; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\epb_mmbp.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\epb_mmbp.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\epb_mmbp.crf ..\src\wechat\MmBp_Embedded_1.0.4\protobuf\epb_MmBp.c]
                          THUMB

                          AREA ||i.epb_auth_request_pack_size||, CODE, READONLY, ALIGN=1

                  epb_auth_request_pack_size PROC
;;;124    
;;;125    int epb_auth_request_pack_size(AuthRequest *request)
000000  b570              PUSH     {r4-r6,lr}
;;;126    {
000002  4604              MOV      r4,r0
;;;127    	int pack_size = 0;
;;;128    	int len = 0;
000004  2100              MOVS     r1,#0
;;;129    
;;;130    	len = epb_base_request_pack_size(request->base_request);
;;;131    	pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_BaseRequest, len);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       epb_length_delimited_pack_size
00000c  4605              MOV      r5,r0
;;;132    	if (request->has_md5_device_type_and_device_id) {
00000e  7920              LDRB     r0,[r4,#4]
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L1.30|
;;;133    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_Md5DeviceTypeAndDeviceId, request->md5_device_type_and_device_id.len);
000014  2012              MOVS     r0,#0x12
000016  68e1              LDR      r1,[r4,#0xc]
000018  f7fffffe          BL       epb_length_delimited_pack_size
00001c  1945              ADDS     r5,r0,r5
                  |L1.30|
;;;134    	}
;;;135    	pack_size += epb_varint32_pack_size(TAG_AuthRequest_ProtoVersion, request->proto_version, false);
00001e  2200              MOVS     r2,#0
000020  2018              MOVS     r0,#0x18
000022  6921              LDR      r1,[r4,#0x10]
000024  f7fffffe          BL       epb_varint32_pack_size
000028  1945              ADDS     r5,r0,r5
;;;136    	pack_size += epb_varint32_pack_size(TAG_AuthRequest_AuthProto, request->auth_proto, false);
00002a  2200              MOVS     r2,#0
00002c  2020              MOVS     r0,#0x20
00002e  6961              LDR      r1,[r4,#0x14]
000030  f7fffffe          BL       epb_varint32_pack_size
000034  1945              ADDS     r5,r0,r5
;;;137    	pack_size += epb_varint32_pack_size(TAG_AuthRequest_AuthMethod, request->auth_method, false);
000036  7e21              LDRB     r1,[r4,#0x18]
000038  2200              MOVS     r2,#0
00003a  2028              MOVS     r0,#0x28
00003c  f7fffffe          BL       epb_varint32_pack_size
000040  1945              ADDS     r5,r0,r5
;;;138    	if (request->has_aes_sign) {
000042  7e60              LDRB     r0,[r4,#0x19]
000044  2800              CMP      r0,#0
000046  d004              BEQ      |L1.82|
;;;139    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_AesSign, request->aes_sign.len);
000048  2032              MOVS     r0,#0x32
00004a  6a21              LDR      r1,[r4,#0x20]
00004c  f7fffffe          BL       epb_length_delimited_pack_size
000050  1945              ADDS     r5,r0,r5
                  |L1.82|
;;;140    	}
;;;141    	if (request->has_mac_address) {
000052  4626              MOV      r6,r4
000054  3620              ADDS     r6,r6,#0x20
000056  7930              LDRB     r0,[r6,#4]
000058  2800              CMP      r0,#0
00005a  d004              BEQ      |L1.102|
;;;142    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_MacAddress, request->mac_address.len);
00005c  203a              MOVS     r0,#0x3a
00005e  6ae1              LDR      r1,[r4,#0x2c]
000060  f7fffffe          BL       epb_length_delimited_pack_size
000064  1945              ADDS     r5,r0,r5
                  |L1.102|
;;;143    	}
;;;144    	if (request->has_time_zone) {
000066  7c30              LDRB     r0,[r6,#0x10]
000068  2800              CMP      r0,#0
00006a  d004              BEQ      |L1.118|
;;;145    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_TimeZone, request->time_zone.len);
00006c  2052              MOVS     r0,#0x52
00006e  6ba1              LDR      r1,[r4,#0x38]
000070  f7fffffe          BL       epb_length_delimited_pack_size
000074  1945              ADDS     r5,r0,r5
                  |L1.118|
;;;146    	}
;;;147    	if (request->has_language) {
000076  7f30              LDRB     r0,[r6,#0x1c]
000078  2800              CMP      r0,#0
00007a  d004              BEQ      |L1.134|
;;;148    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_Language, request->language.len);
00007c  205a              MOVS     r0,#0x5a
00007e  6c61              LDR      r1,[r4,#0x44]
000080  f7fffffe          BL       epb_length_delimited_pack_size
000084  1945              ADDS     r5,r0,r5
                  |L1.134|
;;;149    	}
;;;150    	if (request->has_device_name) {
000086  2048              MOVS     r0,#0x48
000088  5d00              LDRB     r0,[r0,r4]
00008a  2800              CMP      r0,#0
00008c  d004              BEQ      |L1.152|
;;;151    		pack_size += epb_length_delimited_pack_size(TAG_AuthRequest_DeviceName, request->device_name.len);
00008e  2062              MOVS     r0,#0x62
000090  6d21              LDR      r1,[r4,#0x50]
000092  f7fffffe          BL       epb_length_delimited_pack_size
000096  1945              ADDS     r5,r0,r5
                  |L1.152|
;;;152    	}
;;;153    
;;;154    	return pack_size;
000098  4628              MOV      r0,r5
;;;155    }
00009a  bd70              POP      {r4-r6,pc}
;;;156    
                          ENDP


                          AREA ||i.epb_base_request_pack_size||, CODE, READONLY, ALIGN=1

                  epb_base_request_pack_size PROC
;;;68     
;;;69     int epb_base_request_pack_size(BaseRequest *request)
000000  2000              MOVS     r0,#0
;;;70     {
;;;71     	int pack_size = 0;
;;;72     
;;;73     	return pack_size;
;;;74     }
000002  4770              BX       lr
;;;75     
                          ENDP


                          AREA ||i.epb_init_request_pack_size||, CODE, READONLY, ALIGN=1

                  epb_init_request_pack_size PROC
;;;243    
;;;244    int epb_init_request_pack_size(InitRequest *request)
000000  b570              PUSH     {r4-r6,lr}
;;;245    {
000002  4605              MOV      r5,r0
;;;246    	int pack_size = 0;
;;;247    	int len = 0;
000004  2100              MOVS     r1,#0
;;;248    
;;;249    	len = epb_base_request_pack_size(request->base_request);
;;;250    	pack_size += epb_length_delimited_pack_size(TAG_InitRequest_BaseRequest, len);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       epb_length_delimited_pack_size
00000c  4604              MOV      r4,r0
;;;251    	if (request->has_resp_field_filter) {
00000e  7928              LDRB     r0,[r5,#4]
000010  2800              CMP      r0,#0
000012  d004              BEQ      |L3.30|
;;;252    		pack_size += epb_length_delimited_pack_size(TAG_InitRequest_RespFieldFilter, request->resp_field_filter.len);
000014  2012              MOVS     r0,#0x12
000016  68e9              LDR      r1,[r5,#0xc]
000018  f7fffffe          BL       epb_length_delimited_pack_size
00001c  1904              ADDS     r4,r0,r4
                  |L3.30|
;;;253    	}
;;;254    	if (request->has_challenge) {
00001e  7c28              LDRB     r0,[r5,#0x10]
000020  2800              CMP      r0,#0
000022  d004              BEQ      |L3.46|
;;;255    		pack_size += epb_length_delimited_pack_size(TAG_InitRequest_Challenge, request->challenge.len);
000024  201a              MOVS     r0,#0x1a
000026  69a9              LDR      r1,[r5,#0x18]
000028  f7fffffe          BL       epb_length_delimited_pack_size
00002c  1904              ADDS     r4,r0,r4
                  |L3.46|
;;;256    	}
;;;257    
;;;258    	return pack_size;
00002e  4620              MOV      r0,r4
;;;259    }
000030  bd70              POP      {r4-r6,pc}
;;;260    
                          ENDP


                          AREA ||i.epb_pack_auth_request||, CODE, READONLY, ALIGN=1

                  epb_pack_auth_request PROC
;;;156    
;;;157    int epb_pack_auth_request(AuthRequest *request, uint8_t *buf, int buf_len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;158    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;159    	Epb epb;
;;;160    	epb_pack_init(&epb, buf, buf_len);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       epb_pack_init
00000c  2600              MOVS     r6,#0
;;;161    
;;;162    	int ret;
;;;163    	int tmp_len;
;;;164    	uint8_t *tmp;
;;;165    
;;;166    	tmp_len = epb_base_request_pack_size(request->base_request);
;;;167    	tmp = (uint8_t *)malloc(tmp_len);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       mem_malloc
000014  4607              MOV      r7,r0
;;;168    	ret = epb_pack_base_request(request->base_request, tmp, tmp_len);
000016  4632              MOV      r2,r6
000018  4639              MOV      r1,r7
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       epb_pack_base_request
000020  0005              MOVS     r5,r0
;;;169    	if (ret < 0) {
000022  d503              BPL      |L4.44|
;;;170    		free(tmp);
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       mem_free
;;;171    		return ret;
00002a  e00b              B        |L4.68|
                  |L4.44|
;;;172    	}
;;;173    	ret = epb_set_message(&epb, TAG_AuthRequest_BaseRequest, tmp, tmp_len);
00002c  4633              MOV      r3,r6
00002e  463a              MOV      r2,r7
000030  210a              MOVS     r1,#0xa
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       epb_set_message
000038  4605              MOV      r5,r0
;;;174    	free(tmp);
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       mem_free
;;;175    	if (ret < 0) return ret;
000040  2d00              CMP      r5,#0
000042  da02              BGE      |L4.74|
                  |L4.68|
000044  4628              MOV      r0,r5
                  |L4.70|
;;;176    	if (request->has_md5_device_type_and_device_id) {
;;;177    		ret = epb_set_bytes(&epb, TAG_AuthRequest_Md5DeviceTypeAndDeviceId, request->md5_device_type_and_device_id.data, request->md5_device_type_and_device_id.len);
;;;178    		if (ret < 0) return ret;
;;;179    	}
;;;180    	ret = epb_set_int32(&epb, TAG_AuthRequest_ProtoVersion, request->proto_version);
;;;181    	if (ret < 0) return ret;
;;;182    	ret = epb_set_int32(&epb, TAG_AuthRequest_AuthProto, request->auth_proto);
;;;183    	if (ret < 0) return ret;
;;;184    	ret = epb_set_enum(&epb, TAG_AuthRequest_AuthMethod, request->auth_method);
;;;185    	if (ret < 0) return ret;
;;;186    	if (request->has_aes_sign) {
;;;187    		ret = epb_set_bytes(&epb, TAG_AuthRequest_AesSign, request->aes_sign.data, request->aes_sign.len);
;;;188    		if (ret < 0) return ret;
;;;189    	}
;;;190    	if (request->has_mac_address) {
;;;191    		ret = epb_set_bytes(&epb, TAG_AuthRequest_MacAddress, request->mac_address.data, request->mac_address.len);
;;;192    		if (ret < 0) return ret;
;;;193    	}
;;;194    	if (request->has_time_zone) {
;;;195    		ret = epb_set_string(&epb, TAG_AuthRequest_TimeZone, request->time_zone.str, request->time_zone.len);
;;;196    		if (ret < 0) return ret;
;;;197    	}
;;;198    	if (request->has_language) {
;;;199    		ret = epb_set_string(&epb, TAG_AuthRequest_Language, request->language.str, request->language.len);
;;;200    		if (ret < 0) return ret;
;;;201    	}
;;;202    	if (request->has_device_name) {
;;;203    		ret = epb_set_string(&epb, TAG_AuthRequest_DeviceName, request->device_name.str, request->device_name.len);
;;;204    		if (ret < 0) return ret;
;;;205    	}
;;;206    
;;;207    	return epb_get_packed_size(&epb);
;;;208    }
000046  b005              ADD      sp,sp,#0x14
000048  bdf0              POP      {r4-r7,pc}
                  |L4.74|
00004a  7920              LDRB     r0,[r4,#4]            ;176
00004c  2800              CMP      r0,#0                 ;176
00004e  d007              BEQ      |L4.96|
000050  2112              MOVS     r1,#0x12              ;177
000052  4668              MOV      r0,sp                 ;177
000054  68e3              LDR      r3,[r4,#0xc]          ;177
000056  68a2              LDR      r2,[r4,#8]            ;177
000058  f7fffffe          BL       epb_set_bytes
00005c  2800              CMP      r0,#0                 ;178
00005e  dbf2              BLT      |L4.70|
                  |L4.96|
000060  2118              MOVS     r1,#0x18              ;180
000062  4668              MOV      r0,sp                 ;180
000064  6922              LDR      r2,[r4,#0x10]         ;180
000066  f7fffffe          BL       epb_set_int32
00006a  2800              CMP      r0,#0                 ;181
00006c  dbeb              BLT      |L4.70|
00006e  2120              MOVS     r1,#0x20              ;182
000070  4668              MOV      r0,sp                 ;182
000072  6962              LDR      r2,[r4,#0x14]         ;182
000074  f7fffffe          BL       epb_set_int32
000078  2800              CMP      r0,#0                 ;183
00007a  dbe4              BLT      |L4.70|
00007c  7e22              LDRB     r2,[r4,#0x18]         ;184
00007e  2128              MOVS     r1,#0x28              ;184
000080  4668              MOV      r0,sp                 ;184
000082  f7fffffe          BL       epb_set_enum
000086  2800              CMP      r0,#0                 ;185
000088  dbdd              BLT      |L4.70|
00008a  7e60              LDRB     r0,[r4,#0x19]         ;186
00008c  2800              CMP      r0,#0                 ;186
00008e  d007              BEQ      |L4.160|
000090  2132              MOVS     r1,#0x32              ;187
000092  4668              MOV      r0,sp                 ;187
000094  6a23              LDR      r3,[r4,#0x20]         ;187
000096  69e2              LDR      r2,[r4,#0x1c]         ;187
000098  f7fffffe          BL       epb_set_bytes
00009c  2800              CMP      r0,#0                 ;188
00009e  dbd2              BLT      |L4.70|
                  |L4.160|
0000a0  4625              MOV      r5,r4                 ;190
0000a2  3520              ADDS     r5,r5,#0x20           ;190
0000a4  7928              LDRB     r0,[r5,#4]            ;190
0000a6  2800              CMP      r0,#0                 ;190
0000a8  d007              BEQ      |L4.186|
0000aa  213a              MOVS     r1,#0x3a              ;191
0000ac  4668              MOV      r0,sp                 ;191
0000ae  6ae3              LDR      r3,[r4,#0x2c]         ;191
0000b0  6aa2              LDR      r2,[r4,#0x28]         ;191
0000b2  f7fffffe          BL       epb_set_bytes
0000b6  2800              CMP      r0,#0                 ;192
0000b8  dbc5              BLT      |L4.70|
                  |L4.186|
0000ba  7c28              LDRB     r0,[r5,#0x10]         ;194
0000bc  2800              CMP      r0,#0                 ;194
0000be  d007              BEQ      |L4.208|
0000c0  2152              MOVS     r1,#0x52              ;195
0000c2  4668              MOV      r0,sp                 ;195
0000c4  6ba3              LDR      r3,[r4,#0x38]         ;195
0000c6  6b62              LDR      r2,[r4,#0x34]         ;195
0000c8  f7fffffe          BL       epb_set_string
0000cc  2800              CMP      r0,#0                 ;196
0000ce  dbba              BLT      |L4.70|
                  |L4.208|
0000d0  7f28              LDRB     r0,[r5,#0x1c]         ;198
0000d2  2800              CMP      r0,#0                 ;198
0000d4  d007              BEQ      |L4.230|
0000d6  215a              MOVS     r1,#0x5a              ;199
0000d8  4668              MOV      r0,sp                 ;199
0000da  6c63              LDR      r3,[r4,#0x44]         ;199
0000dc  6c22              LDR      r2,[r4,#0x40]         ;199
0000de  f7fffffe          BL       epb_set_string
0000e2  2800              CMP      r0,#0                 ;200
0000e4  dbaf              BLT      |L4.70|
                  |L4.230|
0000e6  2048              MOVS     r0,#0x48              ;202
0000e8  5d00              LDRB     r0,[r0,r4]            ;202
0000ea  2800              CMP      r0,#0                 ;202
0000ec  d007              BEQ      |L4.254|
0000ee  2162              MOVS     r1,#0x62              ;203
0000f0  4668              MOV      r0,sp                 ;203
0000f2  6d23              LDR      r3,[r4,#0x50]         ;203
0000f4  6ce2              LDR      r2,[r4,#0x4c]         ;203
0000f6  f7fffffe          BL       epb_set_string
0000fa  2800              CMP      r0,#0                 ;204
0000fc  dba3              BLT      |L4.70|
                  |L4.254|
0000fe  4668              MOV      r0,sp                 ;207
000100  f7fffffe          BL       epb_get_packed_size
000104  e79f              B        |L4.70|
;;;209    
                          ENDP


                          AREA ||i.epb_pack_base_request||, CODE, READONLY, ALIGN=1

                  epb_pack_base_request PROC
;;;75     
;;;76     int epb_pack_base_request(BaseRequest *request, uint8_t *buf, int buf_len)
000000  b51f              PUSH     {r0-r4,lr}
;;;77     {
;;;78     	Epb epb;
;;;79     	epb_pack_init(&epb, buf, buf_len);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       epb_pack_init
;;;80     
;;;81     	return epb_get_packed_size(&epb);
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_get_packed_size
;;;82     }
00000e  b004              ADD      sp,sp,#0x10
000010  bd10              POP      {r4,pc}
;;;83     
                          ENDP


                          AREA ||i.epb_pack_init_request||, CODE, READONLY, ALIGN=1

                  epb_pack_init_request PROC
;;;260    
;;;261    int epb_pack_init_request(InitRequest *request, uint8_t *buf, int buf_len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;262    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;263    	Epb epb;
;;;264    	epb_pack_init(&epb, buf, buf_len);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       epb_pack_init
00000c  2600              MOVS     r6,#0
;;;265    
;;;266    	int ret;
;;;267    	int tmp_len;
;;;268    	uint8_t *tmp;
;;;269    
;;;270    	tmp_len = epb_base_request_pack_size(request->base_request);
;;;271    	tmp = (uint8_t *)malloc(tmp_len);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       mem_malloc
000014  4607              MOV      r7,r0
;;;272    	ret = epb_pack_base_request(request->base_request, tmp, tmp_len);
000016  4632              MOV      r2,r6
000018  4639              MOV      r1,r7
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       epb_pack_base_request
000020  0005              MOVS     r5,r0
;;;273    	if (ret < 0) {
000022  d503              BPL      |L6.44|
;;;274    		free(tmp);
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       mem_free
;;;275    		return ret;
00002a  e00b              B        |L6.68|
                  |L6.44|
;;;276    	}
;;;277    	ret = epb_set_message(&epb, TAG_InitRequest_BaseRequest, tmp, tmp_len);
00002c  4633              MOV      r3,r6
00002e  463a              MOV      r2,r7
000030  210a              MOVS     r1,#0xa
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       epb_set_message
000038  4605              MOV      r5,r0
;;;278    	free(tmp);
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       mem_free
;;;279    	if (ret < 0) return ret;
000040  2d00              CMP      r5,#0
000042  da02              BGE      |L6.74|
                  |L6.68|
000044  4628              MOV      r0,r5
                  |L6.70|
;;;280    	if (request->has_resp_field_filter) {
;;;281    		ret = epb_set_bytes(&epb, TAG_InitRequest_RespFieldFilter, request->resp_field_filter.data, request->resp_field_filter.len);
;;;282    		if (ret < 0) return ret;
;;;283    	}
;;;284    	if (request->has_challenge) {
;;;285    		ret = epb_set_bytes(&epb, TAG_InitRequest_Challenge, request->challenge.data, request->challenge.len);
;;;286    		if (ret < 0) return ret;
;;;287    	}
;;;288    
;;;289    	return epb_get_packed_size(&epb);
;;;290    }
000046  b005              ADD      sp,sp,#0x14
000048  bdf0              POP      {r4-r7,pc}
                  |L6.74|
00004a  7920              LDRB     r0,[r4,#4]            ;280
00004c  2800              CMP      r0,#0                 ;280
00004e  d007              BEQ      |L6.96|
000050  2112              MOVS     r1,#0x12              ;281
000052  4668              MOV      r0,sp                 ;281
000054  68e3              LDR      r3,[r4,#0xc]          ;281
000056  68a2              LDR      r2,[r4,#8]            ;281
000058  f7fffffe          BL       epb_set_bytes
00005c  2800              CMP      r0,#0                 ;282
00005e  dbf2              BLT      |L6.70|
                  |L6.96|
000060  7c20              LDRB     r0,[r4,#0x10]         ;284
000062  2800              CMP      r0,#0                 ;284
000064  d007              BEQ      |L6.118|
000066  211a              MOVS     r1,#0x1a              ;285
000068  4668              MOV      r0,sp                 ;285
00006a  69a3              LDR      r3,[r4,#0x18]         ;285
00006c  6962              LDR      r2,[r4,#0x14]         ;285
00006e  f7fffffe          BL       epb_set_bytes
000072  2800              CMP      r0,#0                 ;286
000074  dbe7              BLT      |L6.70|
                  |L6.118|
000076  4668              MOV      r0,sp                 ;289
000078  f7fffffe          BL       epb_get_packed_size
00007c  e7e3              B        |L6.70|
;;;291    
                          ENDP


                          AREA ||i.epb_pack_send_data_request||, CODE, READONLY, ALIGN=1

                  epb_pack_send_data_request PROC
;;;384    
;;;385    int epb_pack_send_data_request(SendDataRequest *request, uint8_t *buf, int buf_len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;386    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;387    	Epb epb;
;;;388    	epb_pack_init(&epb, buf, buf_len);
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       epb_pack_init
00000c  2600              MOVS     r6,#0
;;;389    
;;;390    	int ret;
;;;391    	int tmp_len;
;;;392    	uint8_t *tmp;
;;;393    
;;;394    	tmp_len = epb_base_request_pack_size(request->base_request);
;;;395    	tmp = (uint8_t *)malloc(tmp_len);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       mem_malloc
000014  4607              MOV      r7,r0
;;;396    	ret = epb_pack_base_request(request->base_request, tmp, tmp_len);
000016  4632              MOV      r2,r6
000018  4639              MOV      r1,r7
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       epb_pack_base_request
000020  0005              MOVS     r5,r0
;;;397    	if (ret < 0) {
000022  d503              BPL      |L7.44|
;;;398    		free(tmp);
000024  4638              MOV      r0,r7
000026  f7fffffe          BL       mem_free
;;;399    		return ret;
00002a  e00b              B        |L7.68|
                  |L7.44|
;;;400    	}
;;;401    	ret = epb_set_message(&epb, TAG_SendDataRequest_BaseRequest, tmp, tmp_len);
00002c  4633              MOV      r3,r6
00002e  463a              MOV      r2,r7
000030  210a              MOVS     r1,#0xa
000032  4668              MOV      r0,sp
000034  f7fffffe          BL       epb_set_message
000038  4605              MOV      r5,r0
;;;402    	free(tmp);
00003a  4638              MOV      r0,r7
00003c  f7fffffe          BL       mem_free
;;;403    	if (ret < 0) return ret;
000040  2d00              CMP      r5,#0
000042  da02              BGE      |L7.74|
                  |L7.68|
000044  4628              MOV      r0,r5
                  |L7.70|
;;;404    	ret = epb_set_bytes(&epb, TAG_SendDataRequest_Data, request->data.data, request->data.len);
;;;405    	if (ret < 0) return ret;
;;;406    	if (request->has_type) {
;;;407    		ret = epb_set_enum(&epb, TAG_SendDataRequest_Type, request->type);
;;;408    		if (ret < 0) return ret;
;;;409    	}
;;;410    
;;;411    	return epb_get_packed_size(&epb);
;;;412    }
000046  b005              ADD      sp,sp,#0x14
000048  bdf0              POP      {r4-r7,pc}
                  |L7.74|
00004a  2112              MOVS     r1,#0x12              ;404
00004c  4668              MOV      r0,sp                 ;404
00004e  68a3              LDR      r3,[r4,#8]            ;404
000050  6862              LDR      r2,[r4,#4]            ;404
000052  f7fffffe          BL       epb_set_bytes
000056  2800              CMP      r0,#0                 ;405
000058  dbf5              BLT      |L7.70|
00005a  7b20              LDRB     r0,[r4,#0xc]          ;406
00005c  2800              CMP      r0,#0                 ;406
00005e  d006              BEQ      |L7.110|
000060  89e2              LDRH     r2,[r4,#0xe]          ;407
000062  2118              MOVS     r1,#0x18              ;407
000064  4668              MOV      r0,sp                 ;407
000066  f7fffffe          BL       epb_set_enum
00006a  2800              CMP      r0,#0                 ;408
00006c  dbeb              BLT      |L7.70|
                  |L7.110|
00006e  4668              MOV      r0,sp                 ;411
000070  f7fffffe          BL       epb_get_packed_size
000074  e7e7              B        |L7.70|
;;;413    
                          ENDP


                          AREA ||i.epb_send_data_request_pack_size||, CODE, READONLY, ALIGN=1

                  epb_send_data_request_pack_size PROC
;;;369    
;;;370    int epb_send_data_request_pack_size(SendDataRequest *request)
000000  b570              PUSH     {r4-r6,lr}
;;;371    {
000002  4604              MOV      r4,r0
;;;372    	int pack_size = 0;
;;;373    	int len = 0;
000004  2100              MOVS     r1,#0
;;;374    
;;;375    	len = epb_base_request_pack_size(request->base_request);
;;;376    	pack_size += epb_length_delimited_pack_size(TAG_SendDataRequest_BaseRequest, len);
000006  200a              MOVS     r0,#0xa
000008  f7fffffe          BL       epb_length_delimited_pack_size
00000c  4605              MOV      r5,r0
;;;377    	pack_size += epb_length_delimited_pack_size(TAG_SendDataRequest_Data, request->data.len);
00000e  2012              MOVS     r0,#0x12
000010  68a1              LDR      r1,[r4,#8]
000012  f7fffffe          BL       epb_length_delimited_pack_size
000016  1945              ADDS     r5,r0,r5
;;;378    	if (request->has_type) {
000018  7b20              LDRB     r0,[r4,#0xc]
00001a  2800              CMP      r0,#0
00001c  d005              BEQ      |L8.42|
;;;379    		pack_size += epb_varint32_pack_size(TAG_SendDataRequest_Type, request->type, false);
00001e  89e1              LDRH     r1,[r4,#0xe]
000020  2200              MOVS     r2,#0
000022  2018              MOVS     r0,#0x18
000024  f7fffffe          BL       epb_varint32_pack_size
000028  1945              ADDS     r5,r0,r5
                  |L8.42|
;;;380    	}
;;;381    
;;;382    	return pack_size;
00002a  4628              MOV      r0,r5
;;;383    }
00002c  bd70              POP      {r4-r6,pc}
;;;384    
                          ENDP


                          AREA ||i.epb_unpack_auth_response||, CODE, READONLY, ALIGN=1

                  epb_unpack_auth_response PROC
;;;209    
;;;210    AuthResponse *epb_unpack_auth_response(const uint8_t *buf, int buf_len)
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	Epb epb;
;;;213    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;211
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;214    
;;;215    	const uint8_t *tmp;
;;;216    	int tmp_len;
;;;217    
;;;218    	if (!epb_has_tag(&epb, TAG_AuthResponse_BaseResponse)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d020              BEQ      |L9.92|
;;;219    		return NULL;
;;;220    	}
;;;221    	if (!epb_has_tag(&epb, TAG_AuthResponse_AesSessionKey)) {
00001a  2112              MOVS     r1,#0x12
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       epb_has_tag
000022  2800              CMP      r0,#0
000024  d01a              BEQ      |L9.92|
;;;222    		return NULL;
;;;223    	}
;;;224    
;;;225    	AuthResponse *response = (AuthResponse *)malloc(sizeof(AuthResponse));
000026  200c              MOVS     r0,#0xc
000028  f7fffffe          BL       mem_malloc
00002c  4604              MOV      r4,r0
;;;226    	memset(response, 0, sizeof(AuthResponse));
00002e  2000              MOVS     r0,#0
000030  6020              STR      r0,[r4,#0]
000032  6060              STR      r0,[r4,#4]
;;;227    	tmp = epb_get_message(&epb, TAG_AuthResponse_BaseResponse, &tmp_len);
000034  60a0              STR      r0,[r4,#8]
000036  aa04              ADD      r2,sp,#0x10
000038  210a              MOVS     r1,#0xa
00003a  4668              MOV      r0,sp
00003c  f7fffffe          BL       epb_get_message
;;;228    	response->base_response = epb_unpack_base_response(tmp, tmp_len);
000040  9904              LDR      r1,[sp,#0x10]
000042  f7fffffe          BL       epb_unpack_base_response
;;;229    	if (response->base_response == NULL) {
000046  6020              STR      r0,[r4,#0]
000048  2800              CMP      r0,#0
00004a  d009              BEQ      |L9.96|
;;;230    		free(response);
;;;231    		return NULL;
;;;232    	}
;;;233    	response->aes_session_key.data = epb_get_bytes(&epb, TAG_AuthResponse_AesSessionKey, &response->aes_session_key.len);
00004c  4622              MOV      r2,r4
00004e  3208              ADDS     r2,r2,#8
000050  2112              MOVS     r1,#0x12
000052  4668              MOV      r0,sp
000054  f7fffffe          BL       epb_get_bytes
;;;234    
;;;235    	return response;
000058  6060              STR      r0,[r4,#4]
00005a  4620              MOV      r0,r4
                  |L9.92|
;;;236    }
00005c  b006              ADD      sp,sp,#0x18
00005e  bd10              POP      {r4,pc}
                  |L9.96|
000060  4620              MOV      r0,r4                 ;230
000062  f7fffffe          BL       mem_free
000066  2000              MOVS     r0,#0                 ;231
000068  e7f8              B        |L9.92|
;;;237    
                          ENDP


                          AREA ||i.epb_unpack_auth_response_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_auth_response_free PROC
;;;237    
;;;238    void epb_unpack_auth_response_free(AuthResponse *response)
000000  b510              PUSH     {r4,lr}
;;;239    {
000002  4604              MOV      r4,r0
;;;240    	epb_unpack_base_response_free(response->base_response);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;241    	free(response);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;242    }
000010  bd10              POP      {r4,pc}
;;;243    
                          ENDP


                          AREA ||i.epb_unpack_base_push||, CODE, READONLY, ALIGN=1

                  epb_unpack_base_push PROC
;;;108    
;;;109    BasePush *epb_unpack_base_push(const uint8_t *buf, int buf_len)
000000  b51f              PUSH     {r0-r4,lr}
;;;110    {
;;;111    	Epb epb;
;;;112    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  4601              MOV      r1,r0
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       epb_unpack_init
;;;113    
;;;114    	BasePush *push = (BasePush *)malloc(sizeof(BasePush));
00000c  2004              MOVS     r0,#4
00000e  f7fffffe          BL       mem_malloc
;;;115    	memset(push, 0, sizeof(BasePush));
000012  2100              MOVS     r1,#0
000014  6001              STR      r1,[r0,#0]
;;;116    
;;;117    	return push;
;;;118    }
000016  b004              ADD      sp,sp,#0x10
000018  bd10              POP      {r4,pc}
;;;119    
                          ENDP


                          AREA ||i.epb_unpack_base_push_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_base_push_free PROC
;;;119    
;;;120    void epb_unpack_base_push_free(BasePush *push)
000000  b510              PUSH     {r4,lr}
;;;121    {
;;;122    	free(push);
000002  f7fffffe          BL       mem_free
;;;123    }
000006  bd10              POP      {r4,pc}
;;;124    
                          ENDP


                          AREA ||i.epb_unpack_base_response||, CODE, READONLY, ALIGN=1

                  epb_unpack_base_response PROC
;;;83     
;;;84     BaseResponse *epb_unpack_base_response(const uint8_t *buf, int buf_len)
000000  b51f              PUSH     {r0-r4,lr}
;;;85     {
;;;86     	Epb epb;
;;;87     	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  4601              MOV      r1,r0
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       epb_unpack_init
;;;88     
;;;89     	if (!epb_has_tag(&epb, TAG_BaseResponse_ErrCode)) {
00000c  2108              MOVS     r1,#8
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       epb_has_tag
000014  2800              CMP      r0,#0
000016  d01d              BEQ      |L13.84|
;;;90     		return NULL;
;;;91     	}
;;;92     
;;;93     	BaseResponse *response = (BaseResponse *)malloc(sizeof(BaseResponse));
000018  2010              MOVS     r0,#0x10
00001a  f7fffffe          BL       mem_malloc
00001e  4604              MOV      r4,r0
;;;94     	memset(response, 0, sizeof(BaseResponse));
000020  2000              MOVS     r0,#0
000022  6020              STR      r0,[r4,#0]
000024  6060              STR      r0,[r4,#4]
000026  60a0              STR      r0,[r4,#8]
;;;95     	response->err_code = epb_get_int32(&epb, TAG_BaseResponse_ErrCode);
000028  60e0              STR      r0,[r4,#0xc]
00002a  2108              MOVS     r1,#8
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       epb_get_int32
;;;96     	if (epb_has_tag(&epb, TAG_BaseResponse_ErrMsg)) {
000032  6020              STR      r0,[r4,#0]
000034  2112              MOVS     r1,#0x12
000036  4668              MOV      r0,sp
000038  f7fffffe          BL       epb_has_tag
00003c  2800              CMP      r0,#0
00003e  d008              BEQ      |L13.82|
;;;97     		response->err_msg.str = epb_get_string(&epb, TAG_BaseResponse_ErrMsg, &response->err_msg.len);
000040  4622              MOV      r2,r4
000042  320c              ADDS     r2,r2,#0xc
000044  2112              MOVS     r1,#0x12
000046  4668              MOV      r0,sp
000048  f7fffffe          BL       epb_get_string
;;;98     		response->has_err_msg = true;
00004c  60a0              STR      r0,[r4,#8]
00004e  2001              MOVS     r0,#1
000050  7120              STRB     r0,[r4,#4]
                  |L13.82|
;;;99     	}
;;;100    
;;;101    	return response;
000052  4620              MOV      r0,r4
                  |L13.84|
;;;102    }
000054  b004              ADD      sp,sp,#0x10
000056  bd10              POP      {r4,pc}
;;;103    
                          ENDP


                          AREA ||i.epb_unpack_base_response_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_base_response_free PROC
;;;103    
;;;104    void epb_unpack_base_response_free(BaseResponse *response)
000000  b510              PUSH     {r4,lr}
;;;105    {
;;;106    	free(response);
000002  f7fffffe          BL       mem_free
;;;107    }
000006  bd10              POP      {r4,pc}
;;;108    
                          ENDP


                          AREA ||i.epb_unpack_init_response||, CODE, READONLY, ALIGN=2

                  epb_unpack_init_response PROC
;;;291    
;;;292    InitResponse *epb_unpack_init_response(const uint8_t *buf, int buf_len)
000000  b570              PUSH     {r4-r6,lr}
;;;293    {
;;;294    	Epb epb;
;;;295    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;293
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;296    
;;;297    	const uint8_t *tmp;
;;;298    	int tmp_len;
;;;299    
;;;300    	if (!epb_has_tag(&epb, TAG_InitResponse_BaseResponse)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d07e              BEQ      |L15.280|
;;;301    		return NULL;
;;;302    	}
;;;303    	if (!epb_has_tag(&epb, TAG_InitResponse_UserIdHigh)) {
00001a  2110              MOVS     r1,#0x10
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       epb_has_tag
000022  2800              CMP      r0,#0
000024  d078              BEQ      |L15.280|
;;;304    		return NULL;
;;;305    	}
;;;306    	if (!epb_has_tag(&epb, TAG_InitResponse_UserIdLow)) {
000026  2118              MOVS     r1,#0x18
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       epb_has_tag
00002e  2800              CMP      r0,#0
000030  d072              BEQ      |L15.280|
;;;307    		return NULL;
;;;308    	}
;;;309    
;;;310    	InitResponse *response = (InitResponse *)malloc(sizeof(InitResponse));
000032  205c              MOVS     r0,#0x5c
000034  f7fffffe          BL       mem_malloc
000038  4604              MOV      r4,r0
;;;311    	memset(response, 0, sizeof(InitResponse));
00003a  215c              MOVS     r1,#0x5c
00003c  f7fffffe          BL       __aeabi_memclr4
;;;312    	tmp = epb_get_message(&epb, TAG_InitResponse_BaseResponse, &tmp_len);
000040  aa04              ADD      r2,sp,#0x10
000042  210a              MOVS     r1,#0xa
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       epb_get_message
;;;313    	response->base_response = epb_unpack_base_response(tmp, tmp_len);
00004a  9904              LDR      r1,[sp,#0x10]
00004c  f7fffffe          BL       epb_unpack_base_response
;;;314    	if (response->base_response == NULL) {
000050  6020              STR      r0,[r4,#0]
000052  2800              CMP      r0,#0
000054  d07e              BEQ      |L15.340|
;;;315    		free(response);
;;;316    		return NULL;
;;;317    	}
;;;318    	response->user_id_high = epb_get_uint32(&epb, TAG_InitResponse_UserIdHigh);
000056  2110              MOVS     r1,#0x10
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       epb_get_uint32
;;;319    	response->user_id_low = epb_get_uint32(&epb, TAG_InitResponse_UserIdLow);
00005e  6060              STR      r0,[r4,#4]
000060  2118              MOVS     r1,#0x18
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       epb_get_uint32
;;;320    	if (epb_has_tag(&epb, TAG_InitResponse_ChalleangeAnswer)) {
000068  60a0              STR      r0,[r4,#8]
00006a  2120              MOVS     r1,#0x20
00006c  4668              MOV      r0,sp
00006e  f7fffffe          BL       epb_has_tag
;;;321    		response->challeange_answer = epb_get_uint32(&epb, TAG_InitResponse_ChalleangeAnswer);
;;;322    		response->has_challeange_answer = true;
000072  2501              MOVS     r5,#1
000074  2800              CMP      r0,#0                 ;320
000076  d005              BEQ      |L15.132|
000078  2120              MOVS     r1,#0x20              ;321
00007a  4668              MOV      r0,sp                 ;321
00007c  f7fffffe          BL       epb_get_uint32
000080  6120              STR      r0,[r4,#0x10]
000082  7325              STRB     r5,[r4,#0xc]
                  |L15.132|
;;;323    	}
;;;324    	if (epb_has_tag(&epb, TAG_InitResponse_InitScence)) {
000084  2128              MOVS     r1,#0x28
000086  4668              MOV      r0,sp
000088  f7fffffe          BL       epb_has_tag
00008c  2800              CMP      r0,#0
00008e  d005              BEQ      |L15.156|
;;;325    		response->init_scence = (EmInitScence)epb_get_enum(&epb, TAG_InitResponse_InitScence);
000090  2128              MOVS     r1,#0x28
000092  4668              MOV      r0,sp
000094  f7fffffe          BL       epb_get_enum
000098  7560              STRB     r0,[r4,#0x15]
;;;326    		response->has_init_scence = true;
00009a  7525              STRB     r5,[r4,#0x14]
                  |L15.156|
;;;327    	}
;;;328    	if (epb_has_tag(&epb, TAG_InitResponse_AutoSyncMaxDurationSecond)) {
00009c  2130              MOVS     r1,#0x30
00009e  4668              MOV      r0,sp
0000a0  f7fffffe          BL       epb_has_tag
0000a4  2800              CMP      r0,#0
0000a6  d005              BEQ      |L15.180|
;;;329    		response->auto_sync_max_duration_second = epb_get_uint32(&epb, TAG_InitResponse_AutoSyncMaxDurationSecond);
0000a8  2130              MOVS     r1,#0x30
0000aa  4668              MOV      r0,sp
0000ac  f7fffffe          BL       epb_get_uint32
;;;330    		response->has_auto_sync_max_duration_second = true;
0000b0  61a0              STR      r0,[r4,#0x18]
0000b2  75a5              STRB     r5,[r4,#0x16]
                  |L15.180|
;;;331    	}
;;;332    	if (epb_has_tag(&epb, TAG_InitResponse_UserNickName)) {
0000b4  215a              MOVS     r1,#0x5a
0000b6  4668              MOV      r0,sp
0000b8  f7fffffe          BL       epb_has_tag
0000bc  2800              CMP      r0,#0
0000be  d007              BEQ      |L15.208|
;;;333    		response->user_nick_name.str = epb_get_string(&epb, TAG_InitResponse_UserNickName, &response->user_nick_name.len);
0000c0  4622              MOV      r2,r4
0000c2  3224              ADDS     r2,r2,#0x24
0000c4  215a              MOVS     r1,#0x5a
0000c6  4668              MOV      r0,sp
0000c8  f7fffffe          BL       epb_get_string
;;;334    		response->has_user_nick_name = true;
0000cc  6220              STR      r0,[r4,#0x20]
0000ce  7725              STRB     r5,[r4,#0x1c]
                  |L15.208|
;;;335    	}
;;;336    	if (epb_has_tag(&epb, TAG_InitResponse_PlatformType)) {
0000d0  2160              MOVS     r1,#0x60
0000d2  4668              MOV      r0,sp
0000d4  f7fffffe          BL       epb_has_tag
0000d8  2800              CMP      r0,#0
0000da  d008              BEQ      |L15.238|
;;;337    		response->platform_type = (EmPlatformType)epb_get_enum(&epb, TAG_InitResponse_PlatformType);
0000dc  2160              MOVS     r1,#0x60
0000de  4668              MOV      r0,sp
0000e0  f7fffffe          BL       epb_get_enum
0000e4  4601              MOV      r1,r0
0000e6  4620              MOV      r0,r4
0000e8  3020              ADDS     r0,r0,#0x20
0000ea  7241              STRB     r1,[r0,#9]
;;;338    		response->has_platform_type = true;
0000ec  7205              STRB     r5,[r0,#8]
                  |L15.238|
;;;339    	}
;;;340    	if (epb_has_tag(&epb, TAG_InitResponse_Model)) {
0000ee  216a              MOVS     r1,#0x6a
0000f0  4668              MOV      r0,sp
0000f2  f7fffffe          BL       epb_has_tag
0000f6  2800              CMP      r0,#0
0000f8  d008              BEQ      |L15.268|
;;;341    		response->model.str = epb_get_string(&epb, TAG_InitResponse_Model, &response->model.len);
0000fa  4622              MOV      r2,r4
0000fc  3230              ADDS     r2,r2,#0x30
0000fe  216a              MOVS     r1,#0x6a
000100  4668              MOV      r0,sp
000102  f7fffffe          BL       epb_get_string
;;;342    		response->has_model = true;
000106  62e0              STR      r0,[r4,#0x2c]
000108  202a              MOVS     r0,#0x2a
00010a  5505              STRB     r5,[r0,r4]
                  |L15.268|
;;;343    	}
;;;344    	if (epb_has_tag(&epb, TAG_InitResponse_Os)) {
00010c  2172              MOVS     r1,#0x72
00010e  4668              MOV      r0,sp
000110  f7fffffe          BL       epb_has_tag
000114  2800              CMP      r0,#0
000116  e000              B        |L15.282|
                  |L15.280|
000118  e037              B        |L15.394|
                  |L15.282|
00011a  d008              BEQ      |L15.302|
;;;345    		response->os.str = epb_get_string(&epb, TAG_InitResponse_Os, &response->os.len);
00011c  4622              MOV      r2,r4
00011e  323c              ADDS     r2,r2,#0x3c
000120  2172              MOVS     r1,#0x72
000122  4668              MOV      r0,sp
000124  f7fffffe          BL       epb_get_string
;;;346    		response->has_os = true;
000128  63a0              STR      r0,[r4,#0x38]
00012a  2034              MOVS     r0,#0x34
00012c  5505              STRB     r5,[r0,r4]
                  |L15.302|
;;;347    	}
;;;348    	if (epb_has_tag(&epb, TAG_InitResponse_Time)) {
00012e  2178              MOVS     r1,#0x78
000130  4668              MOV      r0,sp
000132  f7fffffe          BL       epb_has_tag
000136  2800              CMP      r0,#0
000138  d006              BEQ      |L15.328|
;;;349    		response->time = epb_get_int32(&epb, TAG_InitResponse_Time);
00013a  2178              MOVS     r1,#0x78
00013c  4668              MOV      r0,sp
00013e  f7fffffe          BL       epb_get_int32
;;;350    		response->has_time = true;
000142  6460              STR      r0,[r4,#0x44]
000144  2040              MOVS     r0,#0x40
000146  5505              STRB     r5,[r0,r4]
                  |L15.328|
;;;351    	}
;;;352    	if (epb_has_tag(&epb, TAG_InitResponse_TimeZone)) {
000148  4e13              LDR      r6,|L15.408|
00014a  4668              MOV      r0,sp
00014c  4631              MOV      r1,r6
00014e  f7fffffe          BL       epb_has_tag
000152  e000              B        |L15.342|
                  |L15.340|
000154  e01b              B        |L15.398|
                  |L15.342|
000156  2800              CMP      r0,#0
000158  d006              BEQ      |L15.360|
;;;353    		response->time_zone = epb_get_int32(&epb, TAG_InitResponse_TimeZone);
00015a  4631              MOV      r1,r6
00015c  4668              MOV      r0,sp
00015e  f7fffffe          BL       epb_get_int32
;;;354    		response->has_time_zone = true;
000162  64e0              STR      r0,[r4,#0x4c]
000164  2048              MOVS     r0,#0x48
000166  5505              STRB     r5,[r0,r4]
                  |L15.360|
;;;355    	}
;;;356    	if (epb_has_tag(&epb, TAG_InitResponse_TimeString)) {
000168  4e0c              LDR      r6,|L15.412|
00016a  4668              MOV      r0,sp
00016c  4631              MOV      r1,r6
00016e  f7fffffe          BL       epb_has_tag
000172  2800              CMP      r0,#0
000174  d008              BEQ      |L15.392|
;;;357    		response->time_string.str = epb_get_string(&epb, TAG_InitResponse_TimeString, &response->time_string.len);
000176  4622              MOV      r2,r4
000178  3258              ADDS     r2,r2,#0x58
00017a  4631              MOV      r1,r6
00017c  4668              MOV      r0,sp
00017e  f7fffffe          BL       epb_get_string
;;;358    		response->has_time_string = true;
000182  6560              STR      r0,[r4,#0x54]
000184  2050              MOVS     r0,#0x50
000186  5505              STRB     r5,[r0,r4]
                  |L15.392|
;;;359    	}
;;;360    
;;;361    	return response;
000188  4620              MOV      r0,r4
                  |L15.394|
;;;362    }
00018a  b006              ADD      sp,sp,#0x18
00018c  bd70              POP      {r4-r6,pc}
                  |L15.398|
00018e  4620              MOV      r0,r4                 ;315
000190  f7fffffe          BL       mem_free
000194  2000              MOVS     r0,#0                 ;316
000196  e7f8              B        |L15.394|
;;;363    
                          ENDP

                  |L15.408|
                          DCD      0x00008001
                  |L15.412|
                          DCD      0x00008a01

                          AREA ||i.epb_unpack_init_response_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_init_response_free PROC
;;;363    
;;;364    void epb_unpack_init_response_free(InitResponse *response)
000000  b510              PUSH     {r4,lr}
;;;365    {
000002  4604              MOV      r4,r0
;;;366    	epb_unpack_base_response_free(response->base_response);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;367    	free(response);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;368    }
000010  bd10              POP      {r4,pc}
;;;369    
                          ENDP


                          AREA ||i.epb_unpack_recv_data_push||, CODE, READONLY, ALIGN=1

                  epb_unpack_recv_data_push PROC
;;;447    
;;;448    RecvDataPush *epb_unpack_recv_data_push(const uint8_t *buf, int buf_len)
000000  b510              PUSH     {r4,lr}
;;;449    {
;;;450    	Epb epb;
;;;451    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;449
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;452    
;;;453    	const uint8_t *tmp;
;;;454    	int tmp_len;
;;;455    
;;;456    	if (!epb_has_tag(&epb, TAG_RecvDataPush_BasePush)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d02e              BEQ      |L17.120|
;;;457    		return NULL;
;;;458    	}
;;;459    	if (!epb_has_tag(&epb, TAG_RecvDataPush_Data)) {
00001a  2112              MOVS     r1,#0x12
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       epb_has_tag
000022  2800              CMP      r0,#0
000024  d028              BEQ      |L17.120|
;;;460    		return NULL;
;;;461    	}
;;;462    
;;;463    	RecvDataPush *push = (RecvDataPush *)malloc(sizeof(RecvDataPush));
000026  2010              MOVS     r0,#0x10
000028  f7fffffe          BL       mem_malloc
00002c  4604              MOV      r4,r0
;;;464    	memset(push, 0, sizeof(RecvDataPush));
00002e  2000              MOVS     r0,#0
000030  6020              STR      r0,[r4,#0]
000032  6060              STR      r0,[r4,#4]
000034  60a0              STR      r0,[r4,#8]
;;;465    	tmp = epb_get_message(&epb, TAG_RecvDataPush_BasePush, &tmp_len);
000036  60e0              STR      r0,[r4,#0xc]
000038  aa04              ADD      r2,sp,#0x10
00003a  210a              MOVS     r1,#0xa
00003c  4668              MOV      r0,sp
00003e  f7fffffe          BL       epb_get_message
;;;466    	push->base_push = epb_unpack_base_push(tmp, tmp_len);
000042  9904              LDR      r1,[sp,#0x10]
000044  f7fffffe          BL       epb_unpack_base_push
;;;467    	if (push->base_push == NULL) {
000048  6020              STR      r0,[r4,#0]
00004a  2800              CMP      r0,#0
00004c  d016              BEQ      |L17.124|
;;;468    		free(push);
;;;469    		return NULL;
;;;470    	}
;;;471    	push->data.data = epb_get_bytes(&epb, TAG_RecvDataPush_Data, &push->data.len);
00004e  4622              MOV      r2,r4
000050  3208              ADDS     r2,r2,#8
000052  2112              MOVS     r1,#0x12
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       epb_get_bytes
;;;472    	if (epb_has_tag(&epb, TAG_RecvDataPush_Type)) {
00005a  6060              STR      r0,[r4,#4]
00005c  2118              MOVS     r1,#0x18
00005e  4668              MOV      r0,sp
000060  f7fffffe          BL       epb_has_tag
000064  2800              CMP      r0,#0
000066  d006              BEQ      |L17.118|
;;;473    		push->type = (EmDeviceDataType)epb_get_enum(&epb, TAG_RecvDataPush_Type);
000068  2118              MOVS     r1,#0x18
00006a  4668              MOV      r0,sp
00006c  f7fffffe          BL       epb_get_enum
000070  81e0              STRH     r0,[r4,#0xe]
;;;474    		push->has_type = true;
000072  2001              MOVS     r0,#1
000074  7320              STRB     r0,[r4,#0xc]
                  |L17.118|
;;;475    	}
;;;476    
;;;477    	return push;
000076  4620              MOV      r0,r4
                  |L17.120|
;;;478    }
000078  b006              ADD      sp,sp,#0x18
00007a  bd10              POP      {r4,pc}
                  |L17.124|
00007c  4620              MOV      r0,r4                 ;468
00007e  f7fffffe          BL       mem_free
000082  2000              MOVS     r0,#0                 ;469
000084  e7f8              B        |L17.120|
;;;479    
                          ENDP


                          AREA ||i.epb_unpack_recv_data_push_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_recv_data_push_free PROC
;;;479    
;;;480    void epb_unpack_recv_data_push_free(RecvDataPush *push)
000000  b510              PUSH     {r4,lr}
;;;481    {
000002  4604              MOV      r4,r0
;;;482    	epb_unpack_base_push_free(push->base_push);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;483    	free(push);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;484    }
000010  bd10              POP      {r4,pc}
;;;485    
                          ENDP


                          AREA ||i.epb_unpack_send_data_response||, CODE, READONLY, ALIGN=1

                  epb_unpack_send_data_response PROC
;;;413    
;;;414    SendDataResponse *epb_unpack_send_data_response(const uint8_t *buf, int buf_len)
000000  b510              PUSH     {r4,lr}
;;;415    {
;;;416    	Epb epb;
;;;417    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;415
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;418    
;;;419    	const uint8_t *tmp;
;;;420    	int tmp_len;
;;;421    
;;;422    	if (!epb_has_tag(&epb, TAG_SendDataResponse_BaseResponse)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d023              BEQ      |L19.98|
;;;423    		return NULL;
;;;424    	}
;;;425    
;;;426    	SendDataResponse *response = (SendDataResponse *)malloc(sizeof(SendDataResponse));
00001a  2010              MOVS     r0,#0x10
00001c  f7fffffe          BL       mem_malloc
000020  4604              MOV      r4,r0
;;;427    	memset(response, 0, sizeof(SendDataResponse));
000022  2000              MOVS     r0,#0
000024  6020              STR      r0,[r4,#0]
000026  6060              STR      r0,[r4,#4]
000028  60a0              STR      r0,[r4,#8]
;;;428    	tmp = epb_get_message(&epb, TAG_SendDataResponse_BaseResponse, &tmp_len);
00002a  60e0              STR      r0,[r4,#0xc]
00002c  aa04              ADD      r2,sp,#0x10
00002e  210a              MOVS     r1,#0xa
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       epb_get_message
;;;429    	response->base_response = epb_unpack_base_response(tmp, tmp_len);
000036  9904              LDR      r1,[sp,#0x10]
000038  f7fffffe          BL       epb_unpack_base_response
;;;430    	if (response->base_response == NULL) {
00003c  6020              STR      r0,[r4,#0]
00003e  2800              CMP      r0,#0
000040  d011              BEQ      |L19.102|
;;;431    		free(response);
;;;432    		return NULL;
;;;433    	}
;;;434    	if (epb_has_tag(&epb, TAG_SendDataResponse_Data)) {
000042  2112              MOVS     r1,#0x12
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       epb_has_tag
00004a  2800              CMP      r0,#0
00004c  d008              BEQ      |L19.96|
;;;435    		response->data.data = epb_get_bytes(&epb, TAG_SendDataResponse_Data, &response->data.len);
00004e  4622              MOV      r2,r4
000050  320c              ADDS     r2,r2,#0xc
000052  2112              MOVS     r1,#0x12
000054  4668              MOV      r0,sp
000056  f7fffffe          BL       epb_get_bytes
;;;436    		response->has_data = true;
00005a  60a0              STR      r0,[r4,#8]
00005c  2001              MOVS     r0,#1
00005e  7120              STRB     r0,[r4,#4]
                  |L19.96|
;;;437    	}
;;;438    
;;;439    	return response;
000060  4620              MOV      r0,r4
                  |L19.98|
;;;440    }
000062  b006              ADD      sp,sp,#0x18
000064  bd10              POP      {r4,pc}
                  |L19.102|
000066  4620              MOV      r0,r4                 ;431
000068  f7fffffe          BL       mem_free
00006c  2000              MOVS     r0,#0                 ;432
00006e  e7f8              B        |L19.98|
;;;441    
                          ENDP


                          AREA ||i.epb_unpack_send_data_response_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_send_data_response_free PROC
;;;441    
;;;442    void epb_unpack_send_data_response_free(SendDataResponse *response)
000000  b510              PUSH     {r4,lr}
;;;443    {
000002  4604              MOV      r4,r0
;;;444    	epb_unpack_base_response_free(response->base_response);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;445    	free(response);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;446    }
000010  bd10              POP      {r4,pc}
;;;447    
                          ENDP


                          AREA ||i.epb_unpack_switch_backgroud_push||, CODE, READONLY, ALIGN=1

                  epb_unpack_switch_backgroud_push PROC
;;;523    
;;;524    SwitchBackgroudPush *epb_unpack_switch_backgroud_push(const uint8_t *buf, int buf_len)
000000  b510              PUSH     {r4,lr}
;;;525    {
;;;526    	Epb epb;
;;;527    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;525
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;528    
;;;529    	const uint8_t *tmp;
;;;530    	int tmp_len;
;;;531    
;;;532    	if (!epb_has_tag(&epb, TAG_SwitchBackgroudPush_BasePush)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d01d              BEQ      |L21.86|
;;;533    		return NULL;
;;;534    	}
;;;535    	if (!epb_has_tag(&epb, TAG_SwitchBackgroudPush_SwitchBackgroundOp)) {
00001a  2110              MOVS     r1,#0x10
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       epb_has_tag
000022  2800              CMP      r0,#0
000024  d017              BEQ      |L21.86|
;;;536    		return NULL;
;;;537    	}
;;;538    
;;;539    	SwitchBackgroudPush *push = (SwitchBackgroudPush *)malloc(sizeof(SwitchBackgroudPush));
000026  2008              MOVS     r0,#8
000028  f7fffffe          BL       mem_malloc
00002c  4604              MOV      r4,r0
;;;540    	memset(push, 0, sizeof(SwitchBackgroudPush));
00002e  2000              MOVS     r0,#0
000030  6020              STR      r0,[r4,#0]
;;;541    	tmp = epb_get_message(&epb, TAG_SwitchBackgroudPush_BasePush, &tmp_len);
000032  6060              STR      r0,[r4,#4]
000034  aa04              ADD      r2,sp,#0x10
000036  210a              MOVS     r1,#0xa
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       epb_get_message
;;;542    	push->base_push = epb_unpack_base_push(tmp, tmp_len);
00003e  9904              LDR      r1,[sp,#0x10]
000040  f7fffffe          BL       epb_unpack_base_push
;;;543    	if (push->base_push == NULL) {
000044  6020              STR      r0,[r4,#0]
000046  2800              CMP      r0,#0
000048  d007              BEQ      |L21.90|
;;;544    		free(push);
;;;545    		return NULL;
;;;546    	}
;;;547    	push->switch_background_op = (EmSwitchBackgroundOp)epb_get_enum(&epb, TAG_SwitchBackgroudPush_SwitchBackgroundOp);
00004a  2110              MOVS     r1,#0x10
00004c  4668              MOV      r0,sp
00004e  f7fffffe          BL       epb_get_enum
000052  7120              STRB     r0,[r4,#4]
;;;548    
;;;549    	return push;
000054  4620              MOV      r0,r4
                  |L21.86|
;;;550    }
000056  b006              ADD      sp,sp,#0x18
000058  bd10              POP      {r4,pc}
                  |L21.90|
00005a  4620              MOV      r0,r4                 ;544
00005c  f7fffffe          BL       mem_free
000060  2000              MOVS     r0,#0                 ;545
000062  e7f8              B        |L21.86|
;;;551    
                          ENDP


                          AREA ||i.epb_unpack_switch_backgroud_push_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_switch_backgroud_push_free PROC
;;;551    
;;;552    void epb_unpack_switch_backgroud_push_free(SwitchBackgroudPush *push)
000000  b510              PUSH     {r4,lr}
;;;553    {
000002  4604              MOV      r4,r0
;;;554    	epb_unpack_base_push_free(push->base_push);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;555    	free(push);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;556    }
000010  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.epb_unpack_switch_view_push||, CODE, READONLY, ALIGN=1

                  epb_unpack_switch_view_push PROC
;;;485    
;;;486    SwitchViewPush *epb_unpack_switch_view_push(const uint8_t *buf, int buf_len)
000000  b510              PUSH     {r4,lr}
;;;487    {
;;;488    	Epb epb;
;;;489    	epb_unpack_init(&epb, buf, buf_len);
000002  460a              MOV      r2,r1
000004  b086              SUB      sp,sp,#0x18           ;487
000006  4601              MOV      r1,r0
000008  4668              MOV      r0,sp
00000a  f7fffffe          BL       epb_unpack_init
;;;490    
;;;491    	const uint8_t *tmp;
;;;492    	int tmp_len;
;;;493    
;;;494    	if (!epb_has_tag(&epb, TAG_SwitchViewPush_BasePush)) {
00000e  210a              MOVS     r1,#0xa
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       epb_has_tag
000016  2800              CMP      r0,#0
000018  d028              BEQ      |L23.108|
;;;495    		return NULL;
;;;496    	}
;;;497    	if (!epb_has_tag(&epb, TAG_SwitchViewPush_SwitchViewOp)) {
00001a  2110              MOVS     r1,#0x10
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       epb_has_tag
000022  2800              CMP      r0,#0
000024  d022              BEQ      |L23.108|
;;;498    		return NULL;
;;;499    	}
;;;500    	if (!epb_has_tag(&epb, TAG_SwitchViewPush_ViewId)) {
000026  2118              MOVS     r1,#0x18
000028  4668              MOV      r0,sp
00002a  f7fffffe          BL       epb_has_tag
00002e  2800              CMP      r0,#0
000030  d01c              BEQ      |L23.108|
;;;501    		return NULL;
;;;502    	}
;;;503    
;;;504    	SwitchViewPush *push = (SwitchViewPush *)malloc(sizeof(SwitchViewPush));
000032  2008              MOVS     r0,#8
000034  f7fffffe          BL       mem_malloc
000038  4604              MOV      r4,r0
;;;505    	memset(push, 0, sizeof(SwitchViewPush));
00003a  2000              MOVS     r0,#0
00003c  6020              STR      r0,[r4,#0]
;;;506    	tmp = epb_get_message(&epb, TAG_SwitchViewPush_BasePush, &tmp_len);
00003e  6060              STR      r0,[r4,#4]
000040  aa04              ADD      r2,sp,#0x10
000042  210a              MOVS     r1,#0xa
000044  4668              MOV      r0,sp
000046  f7fffffe          BL       epb_get_message
;;;507    	push->base_push = epb_unpack_base_push(tmp, tmp_len);
00004a  9904              LDR      r1,[sp,#0x10]
00004c  f7fffffe          BL       epb_unpack_base_push
;;;508    	if (push->base_push == NULL) {
000050  6020              STR      r0,[r4,#0]
000052  2800              CMP      r0,#0
000054  d00c              BEQ      |L23.112|
;;;509    		free(push);
;;;510    		return NULL;
;;;511    	}
;;;512    	push->switch_view_op = (EmSwitchViewOp)epb_get_enum(&epb, TAG_SwitchViewPush_SwitchViewOp);
000056  2110              MOVS     r1,#0x10
000058  4668              MOV      r0,sp
00005a  f7fffffe          BL       epb_get_enum
00005e  7120              STRB     r0,[r4,#4]
;;;513    	push->view_id = (EmViewId)epb_get_enum(&epb, TAG_SwitchViewPush_ViewId);
000060  2118              MOVS     r1,#0x18
000062  4668              MOV      r0,sp
000064  f7fffffe          BL       epb_get_enum
000068  7160              STRB     r0,[r4,#5]
;;;514    
;;;515    	return push;
00006a  4620              MOV      r0,r4
                  |L23.108|
;;;516    }
00006c  b006              ADD      sp,sp,#0x18
00006e  bd10              POP      {r4,pc}
                  |L23.112|
000070  4620              MOV      r0,r4                 ;509
000072  f7fffffe          BL       mem_free
000076  2000              MOVS     r0,#0                 ;510
000078  e7f8              B        |L23.108|
;;;517    
                          ENDP


                          AREA ||i.epb_unpack_switch_view_push_free||, CODE, READONLY, ALIGN=1

                  epb_unpack_switch_view_push_free PROC
;;;517    
;;;518    void epb_unpack_switch_view_push_free(SwitchViewPush *push)
000000  b510              PUSH     {r4,lr}
;;;519    {
000002  4604              MOV      r4,r0
;;;520    	epb_unpack_base_push_free(push->base_push);
000004  6800              LDR      r0,[r0,#0]
000006  f7fffffe          BL       mem_free
;;;521    	free(push);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       mem_free
;;;522    }
000010  bd10              POP      {r4,pc}
;;;523    
                          ENDP

