; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\main.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\main.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\main.crf ..\src\main.c]
                          THUMB

                          AREA ||.init.once.text."..\\src\\main.c".0||, CODE, READONLY, ALIGN=2

                  bt_ready PROC
;;;250    
;;;251    __init_once_text static void bt_ready(int err)
000000  b510              PUSH     {r4,lr}
;;;252    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;253    	uint8_t mac_addr[6];
;;;254    	struct bt_le_oob oob;
;;;255    	
;;;256    	/* don't enter into deepsleep when bt stack init */
;;;257    	app_release_wake_lock();
000006  f7fffffe          BL       app_release_wake_lock
;;;258    
;;;259    	if (err) {
00000a  2c00              CMP      r4,#0
00000c  d005              BEQ      |L1.26|
;;;260    		printk("Bluetooth init failed (err %d)\n", err);
00000e  4621              MOV      r1,r4
000010  a023              ADR      r0,|L1.160|
000012  f7fffffe          BL       printk
                  |L1.22|
;;;261    		return;
;;;262    	}
;;;263    	
;;;264    	printk("Bluetooth initialized\n");
;;;265    
;;;266    	err = bt_le_oob_get_local(&oob);
;;;267    	if (err) {
;;;268    		SYS_LOG_ERR("get local oob failed (err %d)\n", err);
;;;269    		return ;
;;;270    	}
;;;271    	/* mac address which is big endian */
;;;272    	mac_addr[0] = oob.addr.a.val[5];
;;;273    	mac_addr[1] = oob.addr.a.val[4];
;;;274    	mac_addr[2] = oob.addr.a.val[3];
;;;275    	mac_addr[3] = oob.addr.a.val[2];
;;;276    	mac_addr[4] = oob.addr.a.val[1];
;;;277    	mac_addr[5] = oob.addr.a.val[0];
;;;278    	wx_set_mac_address(mac_addr);
;;;279    
;;;280    	err = wechat_init(airsync_proto_recv_cb, airsync_proto_ind_status_cb);
;;;281    	if (err) {
;;;282    		SYS_LOG_ERR("wechat_init failed (err %d)\n", err);
;;;283    		return ;
;;;284    	}
;;;285    
;;;286    	err = wechat_advertise(true);
;;;287    	if (err) {
;;;288    		SYS_LOG_ERR("wechat_advertise failed (err %d)\n", err);
;;;289    		return ;
;;;290    	}
;;;291    
;;;292    	as->proto_status = PROTO_STATUS_CAN_NOT_IND;
;;;293    	as->cached_len = 0;
;;;294    
;;;295    	k_mutex_init(&as->proto_status_mutex);
;;;296    }
000016  b006              ADD      sp,sp,#0x18
000018  bd10              POP      {r4,pc}
                  |L1.26|
00001a  a029              ADR      r0,|L1.192|
00001c  f7fffffe          BL       printk
000020  a803              ADD      r0,sp,#0xc            ;266
000022  f7fffffe          BL       bt_le_oob_get_local
000026  0003              MOVS     r3,r0                 ;266
000028  d005              BEQ      |L1.54|
00002a  a02b              ADR      r0,|L1.216|
00002c  9000              STR      r0,[sp,#0]            ;268
00002e  a22a              ADR      r2,|L1.216|
000030  a12a              ADR      r1,|L1.220|
000032  a02c              ADR      r0,|L1.228|
000034  e025              B        |L1.130|
                  |L1.54|
000036  4669              MOV      r1,sp                 ;272
000038  7c88              LDRB     r0,[r1,#0x12]         ;272
00003a  7108              STRB     r0,[r1,#4]            ;272
00003c  7c48              LDRB     r0,[r1,#0x11]         ;273
00003e  7148              STRB     r0,[r1,#5]            ;273
000040  7c08              LDRB     r0,[r1,#0x10]         ;274
000042  7188              STRB     r0,[r1,#6]            ;274
000044  7bc8              LDRB     r0,[r1,#0xf]          ;275
000046  71c8              STRB     r0,[r1,#7]            ;275
000048  7b88              LDRB     r0,[r1,#0xe]          ;276
00004a  7208              STRB     r0,[r1,#8]            ;276
00004c  7b48              LDRB     r0,[r1,#0xd]          ;277
00004e  7248              STRB     r0,[r1,#9]            ;277
000050  a801              ADD      r0,sp,#4              ;278
000052  f7fffffe          BL       wx_set_mac_address
000056  492e              LDR      r1,|L1.272|
000058  482e              LDR      r0,|L1.276|
00005a  f7fffffe          BL       wechat_init
00005e  0003              MOVS     r3,r0                 ;280
000060  d005              BEQ      |L1.110|
000062  a01d              ADR      r0,|L1.216|
000064  9000              STR      r0,[sp,#0]            ;282
000066  a21c              ADR      r2,|L1.216|
000068  a11c              ADR      r1,|L1.220|
00006a  a02b              ADR      r0,|L1.280|
00006c  e009              B        |L1.130|
                  |L1.110|
00006e  2001              MOVS     r0,#1                 ;286
000070  f7fffffe          BL       wechat_advertise
000074  0003              MOVS     r3,r0                 ;286
000076  d007              BEQ      |L1.136|
000078  a017              ADR      r0,|L1.216|
00007a  9000              STR      r0,[sp,#0]            ;288
00007c  a216              ADR      r2,|L1.216|
00007e  a117              ADR      r1,|L1.220|
000080  a02f              ADR      r0,|L1.320|
                  |L1.130|
000082  f7fffffe          BL       printk
000086  e7c6              B        |L1.22|
                  |L1.136|
000088  4838              LDR      r0,|L1.364|
00008a  2100              MOVS     r1,#0                 ;292
00008c  6800              LDR      r0,[r0,#0]            ;292  ; as
00008e  22ff              MOVS     r2,#0xff              ;293
000090  7001              STRB     r1,[r0,#0]            ;292
000092  3299              ADDS     r2,r2,#0x99           ;293
000094  5211              STRH     r1,[r2,r0]            ;293
000096  1d00              ADDS     r0,r0,#4              ;293
000098  f7fffffe          BL       k_mutex_init
00009c  e7bb              B        |L1.22|
;;;297    
                          ENDP

00009e  0000              DCW      0x0000
                  |L1.160|
0000a0  426c7565          DCB      "Bluetooth init failed (err %d)\n",0
0000a4  746f6f74
0000a8  6820696e
0000ac  69742066
0000b0  61696c65
0000b4  64202865
0000b8  72722025
0000bc  64290a00
                  |L1.192|
0000c0  426c7565          DCB      "Bluetooth initialized\n",0
0000c4  746f6f74
0000c8  6820696e
0000cc  69746961
0000d0  6c697a65
0000d4  640a00  
0000d7  00                DCB      0
                  |L1.216|
0000d8  00                DCB      0
0000d9  00                DCB      0
0000da  00                DCB      0
0000db  00                DCB      0
                  |L1.220|
0000dc  61697273          DCB      "airsync",0
0000e0  796e6300
                  |L1.228|
0000e4  5b25735d          DCB      "[%s] %sget local oob failed (err %d)\n%s\n",0
0000e8  20257367
0000ec  6574206c
0000f0  6f63616c
0000f4  206f6f62
0000f8  20666169
0000fc  6c656420
000100  28657272
000104  20256429
000108  0a25730a
00010c  00      
00010d  00                DCB      0
00010e  00                DCB      0
00010f  00                DCB      0
                  |L1.272|
                          DCD      airsync_proto_ind_status_cb
                  |L1.276|
                          DCD      airsync_proto_recv_cb
                  |L1.280|
000118  5b25735d          DCB      "[%s] %swechat_init failed (err %d)\n%s\n",0
00011c  20257377
000120  65636861
000124  745f696e
000128  69742066
00012c  61696c65
000130  64202865
000134  72722025
000138  64290a25
00013c  730a00  
00013f  00                DCB      0
                  |L1.320|
000140  5b25735d          DCB      "[%s] %swechat_advertise failed (err %d)\n%s\n",0
000144  20257377
000148  65636861
00014c  745f6164
000150  76657274
000154  69736520
000158  6661696c
00015c  65642028
000160  65727220
000164  2564290a
000168  25730a00
                  |L1.364|
                          DCD      ||.data||

                          AREA ||i.airsync_proto_handle||, CODE, READONLY, ALIGN=2

                  airsync_proto_handle PROC
;;;188    
;;;189    static void airsync_proto_handle(struct airsync_priv *as)
000000  b570              PUSH     {r4-r6,lr}
;;;190    {
000002  4604              MOV      r4,r0
;;;191    	cmd_parameter_t param;
;;;192    	uint8_t *buf;
;;;193    	uint32_t len = 0;
000004  2000              MOVS     r0,#0
000006  b086              SUB      sp,sp,#0x18           ;190
;;;194    
;;;195    	k_mutex_lock(&as->proto_status_mutex, K_FOREVER);
000008  1e41              SUBS     r1,r0,#1
00000a  9000              STR      r0,[sp,#0]
00000c  1d20              ADDS     r0,r4,#4
00000e  f7fffffe          BL       k_mutex_lock
;;;196    
;;;197    	/* Wechat does not enable indciation, do nothing... */
;;;198    	if (as->proto_status == PROTO_STATUS_CAN_NOT_IND)
000012  7820              LDRB     r0,[r4,#0]
000014  2800              CMP      r0,#0
000016  d007              BEQ      |L2.40|
;;;199    		goto sleep_out;
;;;200    
;;;201    	switch (as->proto_status) {
;;;202    	case PROTO_STATUS_IDLE:
;;;203    		SYS_LOG_DBG("CMD_AUTH\n");
;;;204    
;;;205    		as->proto_status = PROTO_STATUS_AUTH_SENDING;
000018  2602              MOVS     r6,#2
00001a  2801              CMP      r0,#1                 ;201
00001c  d00c              BEQ      |L2.56|
;;;206    		param.cmd = CMD_AUTH;
;;;207    		data_produce_func_send(&param, &buf, &len);
;;;208    		wechat_send_data(buf, len);
;;;209    		mem_free(buf);
;;;210    		break;
;;;211    
;;;212    	case PROTO_STATUS_AUTH_RSP_RECEIVED:
;;;213    		SYS_LOG_DBG("CMD_INIT\n");
;;;214    
;;;215    		as->proto_status = PROTO_STATUS_INIT_SENDING;
00001e  2504              MOVS     r5,#4
000020  2803              CMP      r0,#3                 ;201
000022  d013              BEQ      |L2.76|
000024  2805              CMP      r0,#5                 ;201
000026  d029              BEQ      |L2.124|
                  |L2.40|
;;;216    		param.cmd = CMD_INIT;
;;;217    	  data_produce_func_send(&param, &buf, &len);
;;;218    		wechat_send_data(buf, len);
;;;219    		mem_free(buf);
;;;220    		break;
;;;221    
;;;222    	case PROTO_STATUS_INIT_RSP_RECEIVED:
;;;223    		SYS_LOG_DBG("INIT_RSP_RECEIVED\n");
;;;224    		as->proto_status = PROTO_STATUS_SEND_OR_RECV;
;;;225    		//test CMD_SENDDAT
;;;226    		{
;;;227    			param.cmd = CMD_SENDDAT;
;;;228    
;;;229    			char data[] = {0x11, 0x22, 0x33, 0x44};
;;;230    			param.send_msg.str = data;
;;;231    			param.send_msg.len = 4;
;;;232    
;;;233    			data_produce_func_send(&param, &buf, &len);
;;;234    			wechat_send_data(buf, len);
;;;235    			mem_free(buf);
;;;236    		}
;;;237    		break;
;;;238    
;;;239    	default:
;;;240    		goto sleep_out;
;;;241    	}
;;;242    
;;;243    	k_mutex_unlock(&as->proto_status_mutex);
;;;244    	return;
;;;245    
;;;246    sleep_out:
;;;247    	k_mutex_unlock(&as->proto_status_mutex);
000028  1d20              ADDS     r0,r4,#4
00002a  f7fffffe          BL       k_mutex_unlock
;;;248    	k_sleep(100);
00002e  2064              MOVS     r0,#0x64
000030  f7fffffe          BL       k_sleep
                  |L2.52|
;;;249    }
000034  b006              ADD      sp,sp,#0x18
000036  bd70              POP      {r4-r6,pc}
                  |L2.56|
000038  a319              ADR      r3,|L2.160|
00003a  a219              ADR      r2,|L2.160|
00003c  a119              ADR      r1,|L2.164|
00003e  a01b              ADR      r0,|L2.172|
000040  f7fffffe          BL       printk
000044  7026              STRB     r6,[r4,#0]            ;205
000046  2001              MOVS     r0,#1                 ;206
000048  9002              STR      r0,[sp,#8]            ;210
00004a  e007              B        |L2.92|
                  |L2.76|
00004c  a314              ADR      r3,|L2.160|
00004e  a214              ADR      r2,|L2.160|
000050  a114              ADR      r1,|L2.164|
000052  a01b              ADR      r0,|L2.192|
000054  f7fffffe          BL       printk
000058  7025              STRB     r5,[r4,#0]            ;215
00005a  9602              STR      r6,[sp,#8]            ;216
                  |L2.92|
00005c  466a              MOV      r2,sp                 ;207
00005e  a901              ADD      r1,sp,#4              ;207
000060  a802              ADD      r0,sp,#8              ;207
000062  f7fffffe          BL       data_produce_func_send
000066  9900              LDR      r1,[sp,#0]            ;208
000068  9801              LDR      r0,[sp,#4]            ;208
00006a  f7fffffe          BL       wechat_send_data
00006e  9801              LDR      r0,[sp,#4]            ;209
000070  f7fffffe          BL       mem_free
000074  1d20              ADDS     r0,r4,#4              ;243
000076  f7fffffe          BL       k_mutex_unlock
00007a  e7db              B        |L2.52|
                  |L2.124|
00007c  a308              ADR      r3,|L2.160|
00007e  a208              ADR      r2,|L2.160|
000080  a108              ADR      r1,|L2.164|
000082  a014              ADR      r0,|L2.212|
000084  f7fffffe          BL       printk
000088  2006              MOVS     r0,#6                 ;224
00008a  7020              STRB     r0,[r4,#0]            ;224
00008c  2003              MOVS     r0,#3                 ;227
00008e  9002              STR      r0,[sp,#8]            ;229
000090  a018              ADR      r0,|L2.244|
000092  6800              LDR      r0,[r0,#0]            ;229
000094  9005              STR      r0,[sp,#0x14]         ;230
000096  a805              ADD      r0,sp,#0x14           ;230
000098  9504              STR      r5,[sp,#0x10]         ;237
00009a  9003              STR      r0,[sp,#0xc]          ;237
00009c  e7de              B        |L2.92|
;;;250    
                          ENDP

00009e  0000              DCW      0x0000
                  |L2.160|
0000a0  00                DCB      0
0000a1  00                DCB      0
0000a2  00                DCB      0
0000a3  00                DCB      0
                  |L2.164|
0000a4  61697273          DCB      "airsync",0
0000a8  796e6300
                  |L2.172|
0000ac  5b25735d          DCB      "[%s] %sCMD_AUTH\n%s\n",0
0000b0  20257343
0000b4  4d445f41
0000b8  5554480a
0000bc  25730a00
                  |L2.192|
0000c0  5b25735d          DCB      "[%s] %sCMD_INIT\n%s\n",0
0000c4  20257343
0000c8  4d445f49
0000cc  4e49540a
0000d0  25730a00
                  |L2.212|
0000d4  5b25735d          DCB      "[%s] %sINIT_RSP_RECEIVED\n%s\n",0
0000d8  20257349
0000dc  4e49545f
0000e0  5253505f
0000e4  52454345
0000e8  49564544
0000ec  0a25730a
0000f0  00      
0000f1  00                DCB      0
0000f2  00                DCB      0
0000f3  00                DCB      0
                  |L2.244|
0000f4  11223344          DCB      17,"""3D"

                          AREA ||i.airsync_proto_ind_status_cb||, CODE, READONLY, ALIGN=2

                  airsync_proto_ind_status_cb PROC
;;;168    
;;;169    static void airsync_proto_ind_status_cb(bool onoff)
000000  b5f8              PUSH     {r3-r7,lr}
;;;170    {
000002  4605              MOV      r5,r0
;;;171    	SYS_LOG_DBG("status %d\n", onoff);
000004  a011              ADR      r0,|L3.76|
000006  9000              STR      r0,[sp,#0]
000008  462b              MOV      r3,r5
00000a  a210              ADR      r2,|L3.76|
00000c  a110              ADR      r1,|L3.80|
00000e  a012              ADR      r0,|L3.88|
000010  f7fffffe          BL       printk
;;;172    
;;;173    	if (!as)
000014  4c16              LDR      r4,|L3.112|
000016  6820              LDR      r0,[r4,#0]  ; as
000018  2800              CMP      r0,#0
00001a  d016              BEQ      |L3.74|
;;;174    		return;
;;;175    
;;;176    	k_mutex_lock(&as->proto_status_mutex, K_FOREVER);
00001c  2100              MOVS     r1,#0
00001e  43c9              MVNS     r1,r1
000020  1d00              ADDS     r0,r0,#4
000022  f7fffffe          BL       k_mutex_lock
000026  2600              MOVS     r6,#0
;;;177    
;;;178    	if (onoff)
000028  2d00              CMP      r5,#0
00002a  d003              BEQ      |L3.52|
;;;179    		as->proto_status = PROTO_STATUS_IDLE;
00002c  6821              LDR      r1,[r4,#0]  ; as
00002e  2001              MOVS     r0,#1
000030  7008              STRB     r0,[r1,#0]
000032  e001              B        |L3.56|
                  |L3.52|
;;;180    	else
;;;181    		as->proto_status = PROTO_STATUS_CAN_NOT_IND;
000034  6820              LDR      r0,[r4,#0]  ; as
000036  7006              STRB     r6,[r0,#0]
                  |L3.56|
;;;182    
;;;183    	mem_init();
000038  f7fffffe          BL       mem_init
;;;184    	as->cached_len = 0;
00003c  21ff              MOVS     r1,#0xff
00003e  6820              LDR      r0,[r4,#0]  ; as
000040  3199              ADDS     r1,r1,#0x99
000042  520e              STRH     r6,[r1,r0]
000044  1d00              ADDS     r0,r0,#4
;;;185    	k_mutex_unlock(&as->proto_status_mutex);
000046  f7fffffe          BL       k_mutex_unlock
                  |L3.74|
;;;186    
;;;187    }
00004a  bdf8              POP      {r3-r7,pc}
;;;188    
                          ENDP

                  |L3.76|
00004c  00                DCB      0
00004d  00                DCB      0
00004e  00                DCB      0
00004f  00                DCB      0
                  |L3.80|
000050  61697273          DCB      "airsync",0
000054  796e6300
                  |L3.88|
000058  5b25735d          DCB      "[%s] %sstatus %d\n%s\n",0
00005c  20257373
000060  74617475
000064  73202564
000068  0a25730a
00006c  00      
00006d  00                DCB      0
00006e  00                DCB      0
00006f  00                DCB      0
                  |L3.112|
                          DCD      ||.data||

                          AREA ||i.airsync_proto_recv_cb||, CODE, READONLY, ALIGN=2

                  airsync_proto_recv_cb PROC
;;;85      *=========================================================================*/
;;;86     static int airsync_proto_recv_cb(void *buf, int len)
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;87     {
000002  b085              SUB      sp,sp,#0x14
;;;88     	uint8_t *raw_data;
;;;89     	uint32_t raw_len;
;;;90     
;;;91     	int ret;
;;;92     
;;;93     	SYS_LOG_DBG("buf %p, len %d\n", buf, len);
000004  a05c              ADR      r0,|L4.376|
000006  9100              STR      r1,[sp,#0]
000008  460d              MOV      r5,r1                 ;87
00000a  9001              STR      r0,[sp,#4]
00000c  a25a              ADR      r2,|L4.376|
00000e  a15b              ADR      r1,|L4.380|
000010  a05c              ADR      r0,|L4.388|
000012  9b05              LDR      r3,[sp,#0x14]
000014  f7fffffe          BL       printk
;;;94     
;;;95     	if (as->cached_len > 0) {
000018  4e61              LDR      r6,|L4.416|
00001a  20ff              MOVS     r0,#0xff
00001c  6831              LDR      r1,[r6,#0]  ; as
00001e  3099              ADDS     r0,r0,#0x99
000020  5a40              LDRH     r0,[r0,r1]
000022  2700              MOVS     r7,#0
000024  2800              CMP      r0,#0
000026  d03b              BEQ      |L4.160|
;;;96     		/* merge the new data to cached data, and parsed them. */
;;;97     
;;;98     		if (as->cached_len + len > RX_PKT_CACHE_LEN) {
000028  23ff              MOVS     r3,#0xff
00002a  1942              ADDS     r2,r0,r5
00002c  3381              ADDS     r3,r3,#0x81
00002e  429a              CMP      r2,r3
000030  dd0a              BLE      |L4.72|
;;;99     			SYS_LOG_ERR("cached buffer full!! discard!!!\n");
000032  a351              ADR      r3,|L4.376|
000034  a250              ADR      r2,|L4.376|
000036  a151              ADR      r1,|L4.380|
000038  a05a              ADR      r0,|L4.420|
00003a  f7fffffe          BL       printk
;;;100    			as->cached_len = 0;
00003e  6830              LDR      r0,[r6,#0]  ; as
000040  30ff              ADDS     r0,r0,#0xff
000042  3081              ADDS     r0,r0,#0x81
000044  8307              STRH     r7,[r0,#0x18]
;;;101    			return len;
000046  e04c              B        |L4.226|
                  |L4.72|
000048  3118              ADDS     r1,r1,#0x18
;;;102    		}
;;;103    
;;;104    		memcpy(&as->pkt_cache[as->cached_len], buf, len);
00004a  1840              ADDS     r0,r0,r1
00004c  462a              MOV      r2,r5
00004e  9905              LDR      r1,[sp,#0x14]
000050  f7fffffe          BL       __aeabi_memcpy
;;;105    		as->cached_len += len;
000054  6830              LDR      r0,[r6,#0]  ; as
;;;106    
;;;107    		ret = data_consume_func_rec(as->pkt_cache, as->cached_len, &raw_data, &raw_len);
000056  ab02              ADD      r3,sp,#8
000058  4604              MOV      r4,r0                 ;105
00005a  30ff              ADDS     r0,r0,#0xff           ;105
00005c  3081              ADDS     r0,r0,#0x81           ;105
00005e  8b01              LDRH     r1,[r0,#0x18]         ;105
000060  aa03              ADD      r2,sp,#0xc
000062  1949              ADDS     r1,r1,r5              ;105
000064  b289              UXTH     r1,r1                 ;105
000066  8301              STRH     r1,[r0,#0x18]         ;105
000068  4620              MOV      r0,r4
00006a  3018              ADDS     r0,r0,#0x18
                  |L4.108|
;;;108    	} else {
;;;109    		/* try to parsed the packet directly. */
;;;110    		ret = data_consume_func_rec(buf, len, &raw_data, &raw_len);
00006c  f7fffffe          BL       data_consume_func_rec
000070  0004              MOVS     r4,r0
000072  d01a              BEQ      |L4.170|
;;;111    	}
;;;112    
;;;113    
;;;114    	if (ret == 0) {
;;;115    		SYS_LOG_DBG("need more data(cached: %d)\n", as->cached_len);
;;;116    
;;;117    		/*
;;;118    		 * need more data, cached it
;;;119    		 * NOTE: if as->cached_len > 0, the packet is alredy cached.
;;;120    		 */
;;;121    		if (as->cached_len == 0) {
;;;122    			memcpy(&as->pkt_cache[as->cached_len], buf, len);
;;;123    			as->cached_len += len;
;;;124    		}
;;;125    		return len;
;;;126    	} else if (ret < 0) {
000074  2c00              CMP      r4,#0
000076  da36              BGE      |L4.230|
;;;127    		SYS_LOG_ERR("data_consume_func_rec (err %d, cached %d)\n", ret, as->cached_len);
000078  6830              LDR      r0,[r6,#0]  ; as
00007a  a13f              ADR      r1,|L4.376|
00007c  30ff              ADDS     r0,r0,#0xff
00007e  3081              ADDS     r0,r0,#0x81
000080  8b00              LDRH     r0,[r0,#0x18]
000082  9101              STR      r1,[sp,#4]
000084  9000              STR      r0,[sp,#0]
000086  4623              MOV      r3,r4
000088  a23b              ADR      r2,|L4.376|
00008a  a13c              ADR      r1,|L4.380|
00008c  a050              ADR      r0,|L4.464|
00008e  f7fffffe          BL       printk
;;;128    
;;;129    		/* dicard all cached data */
;;;130    		as->cached_len = 0;
000092  6830              LDR      r0,[r6,#0]  ; as
000094  30ff              ADDS     r0,r0,#0xff
000096  3081              ADDS     r0,r0,#0x81
000098  8307              STRH     r7,[r0,#0x18]
;;;131    		return ret;
00009a  4620              MOV      r0,r4
                  |L4.156|
;;;132    	} else {
;;;133    		SYS_LOG_DBG("success comsumed one packet(cached: %d, consumed %d)\n", as->cached_len, ret);
;;;134    
;;;135    		/* remove the cached data */
;;;136    		if (as->cached_len > ret) {
;;;137    			memcpy(as->pkt_cache, &as->pkt_cache[ret], as->cached_len - ret);
;;;138    			as->cached_len -= ret;
;;;139    		} else {
;;;140    			as->cached_len = 0;
;;;141    		}
;;;142    	}
;;;143    
;;;144    	k_mutex_lock(&as->proto_status_mutex, K_FOREVER);
;;;145    
;;;146    	switch (as->proto_status) {
;;;147    	case PROTO_STATUS_AUTH_SENDING:
;;;148    		as->proto_status = PROTO_STATUS_AUTH_RSP_RECEIVED;
;;;149    		break;
;;;150    
;;;151    	case PROTO_STATUS_INIT_SENDING:
;;;152    		as->proto_status = PROTO_STATUS_INIT_RSP_RECEIVED;
;;;153    		break;
;;;154    
;;;155    	case PROTO_STATUS_SEND_OR_RECV:
;;;156    	{
;;;157    		SYS_LOG_DBG("%d received\n", raw_len);
;;;158    		break;
;;;159    	}
;;;160    
;;;161    	default:
;;;162    		SYS_LOG_WRN("weared data?\n");
;;;163    	}
;;;164    	k_mutex_unlock(&as->proto_status_mutex);
;;;165    
;;;166    	return len;
;;;167    }
00009c  b007              ADD      sp,sp,#0x1c
00009e  bdf0              POP      {r4-r7,pc}
                  |L4.160|
0000a0  ab02              ADD      r3,sp,#8              ;110
0000a2  aa03              ADD      r2,sp,#0xc            ;110
0000a4  4629              MOV      r1,r5                 ;110
0000a6  9805              LDR      r0,[sp,#0x14]         ;110
0000a8  e7e0              B        |L4.108|
                  |L4.170|
0000aa  a033              ADR      r0,|L4.376|
0000ac  9000              STR      r0,[sp,#0]            ;115
0000ae  6830              LDR      r0,[r6,#0]            ;115  ; as
0000b0  a231              ADR      r2,|L4.376|
0000b2  30ff              ADDS     r0,r0,#0xff           ;115
0000b4  3081              ADDS     r0,r0,#0x81           ;115
0000b6  8b03              LDRH     r3,[r0,#0x18]         ;115
0000b8  a130              ADR      r1,|L4.380|
0000ba  a053              ADR      r0,|L4.520|
0000bc  f7fffffe          BL       printk
0000c0  21ff              MOVS     r1,#0xff              ;121
0000c2  6830              LDR      r0,[r6,#0]            ;121  ; as
0000c4  3199              ADDS     r1,r1,#0x99           ;121
0000c6  5a09              LDRH     r1,[r1,r0]            ;121
0000c8  2900              CMP      r1,#0                 ;121
0000ca  d10a              BNE      |L4.226|
0000cc  462a              MOV      r2,r5                 ;122
0000ce  3018              ADDS     r0,r0,#0x18           ;122
0000d0  9905              LDR      r1,[sp,#0x14]         ;122
0000d2  f7fffffe          BL       __aeabi_memcpy
0000d6  6830              LDR      r0,[r6,#0]            ;123  ; as
0000d8  30ff              ADDS     r0,r0,#0xff           ;123
0000da  3081              ADDS     r0,r0,#0x81           ;123
0000dc  8b01              LDRH     r1,[r0,#0x18]         ;123
0000de  1949              ADDS     r1,r1,r5              ;123
0000e0  8301              STRH     r1,[r0,#0x18]         ;123
                  |L4.226|
0000e2  4628              MOV      r0,r5                 ;125
0000e4  e7da              B        |L4.156|
                  |L4.230|
0000e6  a024              ADR      r0,|L4.376|
0000e8  9400              STR      r4,[sp,#0]            ;133
0000ea  9001              STR      r0,[sp,#4]            ;133
0000ec  6830              LDR      r0,[r6,#0]            ;133  ; as
0000ee  a222              ADR      r2,|L4.376|
0000f0  30ff              ADDS     r0,r0,#0xff           ;133
0000f2  3081              ADDS     r0,r0,#0x81           ;133
0000f4  8b03              LDRH     r3,[r0,#0x18]         ;133
0000f6  a121              ADR      r1,|L4.380|
0000f8  a04d              ADR      r0,|L4.560|
0000fa  f7fffffe          BL       printk
0000fe  6830              LDR      r0,[r6,#0]            ;136  ; as
000100  4601              MOV      r1,r0                 ;136
000102  31ff              ADDS     r1,r1,#0xff           ;136
000104  3181              ADDS     r1,r1,#0x81           ;136
000106  8b0a              LDRH     r2,[r1,#0x18]         ;136
000108  42a2              CMP      r2,r4                 ;136
00010a  dd0c              BLE      |L4.294|
00010c  1901              ADDS     r1,r0,r4              ;137
00010e  1b12              SUBS     r2,r2,r4              ;137
000110  3018              ADDS     r0,r0,#0x18           ;137
000112  3118              ADDS     r1,r1,#0x18           ;137
000114  f7fffffe          BL       __aeabi_memcpy
000118  6830              LDR      r0,[r6,#0]            ;138  ; as
00011a  30ff              ADDS     r0,r0,#0xff           ;138
00011c  3081              ADDS     r0,r0,#0x81           ;138
00011e  8b01              LDRH     r1,[r0,#0x18]         ;138
000120  1b09              SUBS     r1,r1,r4              ;138
000122  8301              STRH     r1,[r0,#0x18]         ;138
000124  e000              B        |L4.296|
                  |L4.294|
000126  830f              STRH     r7,[r1,#0x18]         ;140
                  |L4.296|
000128  6830              LDR      r0,[r6,#0]            ;144  ; as
00012a  2100              MOVS     r1,#0                 ;144
00012c  43c9              MVNS     r1,r1                 ;144
00012e  1d00              ADDS     r0,r0,#4              ;144
000130  f7fffffe          BL       k_mutex_lock
000134  6831              LDR      r1,[r6,#0]            ;146  ; as
000136  7808              LDRB     r0,[r1,#0]            ;146
000138  2802              CMP      r0,#2                 ;146
00013a  d00e              BEQ      |L4.346|
00013c  2804              CMP      r0,#4                 ;146
00013e  d00e              BEQ      |L4.350|
000140  2806              CMP      r0,#6                 ;146
000142  d00f              BEQ      |L4.356|
000144  a30c              ADR      r3,|L4.376|
000146  a20c              ADR      r2,|L4.376|
000148  a10c              ADR      r1,|L4.380|
00014a  a049              ADR      r0,|L4.624|
00014c  f7fffffe          BL       printk
                  |L4.336|
000150  6830              LDR      r0,[r6,#0]            ;164  ; as
000152  1d00              ADDS     r0,r0,#4              ;164
000154  f7fffffe          BL       k_mutex_unlock
000158  e7c3              B        |L4.226|
                  |L4.346|
00015a  2003              MOVS     r0,#3                 ;148
00015c  e000              B        |L4.352|
                  |L4.350|
00015e  2005              MOVS     r0,#5                 ;152
                  |L4.352|
000160  7008              STRB     r0,[r1,#0]            ;148
000162  e7f5              B        |L4.336|
                  |L4.356|
000164  a004              ADR      r0,|L4.376|
000166  9000              STR      r0,[sp,#0]            ;157
000168  a203              ADR      r2,|L4.376|
00016a  a104              ADR      r1,|L4.380|
00016c  a046              ADR      r0,|L4.648|
00016e  9b02              LDR      r3,[sp,#8]            ;157
000170  f7fffffe          BL       printk
000174  e7ec              B        |L4.336|
;;;168    
                          ENDP

000176  0000              DCW      0x0000
                  |L4.376|
000178  00                DCB      0
000179  00                DCB      0
00017a  00                DCB      0
00017b  00                DCB      0
                  |L4.380|
00017c  61697273          DCB      "airsync",0
000180  796e6300
                  |L4.388|
000184  5b25735d          DCB      "[%s] %sbuf %p, len %d\n%s\n",0
000188  20257362
00018c  75662025
000190  702c206c
000194  656e2025
000198  640a2573
00019c  0a00    
00019e  00                DCB      0
00019f  00                DCB      0
                  |L4.416|
                          DCD      ||.data||
                  |L4.420|
0001a4  5b25735d          DCB      "[%s] %scached buffer full!! discard!!!\n%s\n",0
0001a8  20257363
0001ac  61636865
0001b0  64206275
0001b4  66666572
0001b8  2066756c
0001bc  6c212120
0001c0  64697363
0001c4  61726421
0001c8  21210a25
0001cc  730a00  
0001cf  00                DCB      0
                  |L4.464|
0001d0  5b25735d          DCB      "[%s] %sdata_consume_func_rec (err %d, cached %d)\n%s\n",0
0001d4  20257364
0001d8  6174615f
0001dc  636f6e73
0001e0  756d655f
0001e4  66756e63
0001e8  5f726563
0001ec  20286572
0001f0  72202564
0001f4  2c206361
0001f8  63686564
0001fc  20256429
000200  0a25730a
000204  00      
000205  00                DCB      0
000206  00                DCB      0
000207  00                DCB      0
                  |L4.520|
000208  5b25735d          DCB      "[%s] %sneed more data(cached: %d)\n%s\n",0
00020c  2025736e
000210  65656420
000214  6d6f7265
000218  20646174
00021c  61286361
000220  63686564
000224  3a202564
000228  290a2573
00022c  0a00    
00022e  00                DCB      0
00022f  00                DCB      0
                  |L4.560|
000230  5b25735d          DCB      "[%s] %ssuccess comsumed one packet(cached: %d, consumed"
000234  20257373
000238  75636365
00023c  73732063
000240  6f6d7375
000244  6d656420
000248  6f6e6520
00024c  7061636b
000250  65742863
000254  61636865
000258  643a2025
00025c  642c2063
000260  6f6e7375
000264  6d6564  
000267  20256429          DCB      " %d)\n%s\n",0
00026b  0a25730a
00026f  00      
                  |L4.624|
000270  5b25735d          DCB      "[%s] %sweared data?\n%s\n",0
000274  20257377
000278  65617265
00027c  64206461
000280  74613f0a
000284  25730a00
                  |L4.648|
000288  5b25735d          DCB      "[%s] %s%d received\n%s\n",0
00028c  20257325
000290  64207265
000294  63656976
000298  65640a25
00029c  730a00  
00029f  00                DCB      0

                          AREA ||i.app_main||, CODE, READONLY, ALIGN=2

                  app_main PROC
;;;299    /* main loop for airsync recognizer app */
;;;300    void app_main(void)
000000  b510              PUSH     {r4,lr}
;;;301    {
;;;302    	int err;
;;;303    
;;;304    	SYS_LOG_INF("enter airsync\n");
000002  a30f              ADR      r3,|L5.64|
000004  a20e              ADR      r2,|L5.64|
000006  a10f              ADR      r1,|L5.68|
000008  a010              ADR      r0,|L5.76|
00000a  f7fffffe          BL       printk
;;;305    	app_get_wake_lock();
00000e  f7fffffe          BL       app_get_wake_lock
;;;306    	err = bt_enable(bt_ready);
000012  4815              LDR      r0,|L5.104|
000014  f7fffffe          BL       bt_enable
000018  0004              MOVS     r4,r0
;;;307    	if (err) {
00001a  d006              BEQ      |L5.42|
;;;308    		app_release_wake_lock();
00001c  f7fffffe          BL       app_release_wake_lock
;;;309    		printk("Bluetooth init failed (err %d)\n", err);
000020  4621              MOV      r1,r4
000022  a012              ADR      r0,|L5.108|
000024  f7fffffe          BL       printk
;;;310    		return;
;;;311    	}
;;;312    
;;;313    	SYS_LOG_DBG("airsync_proto_handle...\n");
;;;314    	while (1) {
;;;315    		airsync_proto_handle(as);
;;;316    	}
;;;317    }
000028  bd10              POP      {r4,pc}
                  |L5.42|
00002a  a305              ADR      r3,|L5.64|
00002c  a204              ADR      r2,|L5.64|
00002e  a105              ADR      r1,|L5.68|
000030  a016              ADR      r0,|L5.140|
000032  f7fffffe          BL       printk
000036  4c1e              LDR      r4,|L5.176|
                  |L5.56|
000038  6820              LDR      r0,[r4,#0]            ;315  ; as
00003a  f7fffffe          BL       airsync_proto_handle
00003e  e7fb              B        |L5.56|
                          ENDP

                  |L5.64|
000040  00                DCB      0
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
                  |L5.68|
000044  61697273          DCB      "airsync",0
000048  796e6300
                  |L5.76|
00004c  5b25735d          DCB      "[%s] %senter airsync\n%s\n",0
000050  20257365
000054  6e746572
000058  20616972
00005c  73796e63
000060  0a25730a
000064  00      
000065  00                DCB      0
000066  00                DCB      0
000067  00                DCB      0
                  |L5.104|
                          DCD      bt_ready
                  |L5.108|
00006c  426c7565          DCB      "Bluetooth init failed (err %d)\n",0
000070  746f6f74
000074  6820696e
000078  69742066
00007c  61696c65
000080  64202865
000084  72722025
000088  64290a00
                  |L5.140|
00008c  5b25735d          DCB      "[%s] %sairsync_proto_handle...\n%s\n",0
000090  20257361
000094  69727379
000098  6e635f70
00009c  726f746f
0000a0  5f68616e
0000a4  646c652e
0000a8  2e2e0a25
0000ac  730a00  
0000af  00                DCB      0
                  |L5.176|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  airsync_priv_data
                          %        540

                          AREA ||.data||, DATA, ALIGN=2

                  ||as||
                          DCD      airsync_priv_data
