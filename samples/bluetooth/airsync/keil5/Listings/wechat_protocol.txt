; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\wechat_protocol.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\wechat_protocol.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\wechat_protocol.crf ..\src\wechat\MmBp_helper\wechat_protocol.c]
                          THUMB

                          AREA ||i.data_consume_func_rec||, CODE, READONLY, ALIGN=2

                  data_consume_func_rec PROC
;;;128     */ 
;;;129    int data_consume_func_rec(uint8_t *data, uint32_t len,
000000  b5ff              PUSH     {r0-r7,lr}
;;;130    			  uint8_t **raw_data, uint32_t *raw_len)
;;;131    {
000002  4605              MOV      r5,r0
000004  b083              SUB      sp,sp,#0xc
000006  4617              MOV      r7,r2
000008  460c              MOV      r4,r1
;;;132    	const uint8_t fix_head_len = sizeof(cmd_fix_head_t);
;;;133    	cmd_fix_head_t head_buf;
;;;134    	cmd_fix_head_t *fix_head = &head_buf;
00000a  a801              ADD      r0,sp,#4
;;;135    
;;;136    	memcpy(fix_head, data, fix_head_len);
00000c  2208              MOVS     r2,#8
00000e  4629              MOV      r1,r5
000010  f7fffffe          BL       __aeabi_memcpy
;;;137    
;;;138    	if (len < ntohs(fix_head->nLength)) {
000014  4668              MOV      r0,sp
000016  88c0              LDRH     r0,[r0,#6]
000018  ba41              REV16    r1,r0
00001a  42a1              CMP      r1,r4
00001c  d902              BLS      |L1.36|
;;;139     		/* data is not enough, need more data */
;;;140    		return 0;
00001e  2000              MOVS     r0,#0
                  |L1.32|
;;;141    	}
;;;142    
;;;143    	/* only handle one packet length */
;;;144    	len = ntohs(fix_head->nLength);
;;;145    
;;;146    	*raw_len = 0;
;;;147    
;;;148    	switch (ntohs(fix_head->nCmdId)) {
;;;149    	case ECI_resp_auth:
;;;150    	{
;;;151    		printk("%s, ECI_resp_auth\n", __func__);
;;;152    		AuthResponse *authResp = epb_unpack_auth_response(data + fix_head_len, len - fix_head_len);
;;;153    		if (authResp == NULL)
;;;154    			return errorCodeUnpackAuthResp;
;;;155    
;;;156    		if (authResp->base_response) {
;;;157    			if (authResp->base_response->err_code == 0) {
;;;158    				wxbt_state.auth_state = true;
;;;159    			} else {
;;;160    				epb_unpack_auth_response_free(authResp);
;;;161    				return authResp->base_response->err_code;
;;;162    			}
;;;163    		}
;;;164    
;;;165    		epb_unpack_auth_response_free(authResp);
;;;166    		break;
;;;167    	}
;;;168    
;;;169    	case ECI_resp_init:
;;;170    	{
;;;171    		printk("%s, ECI_resp_init\n", __func__);
;;;172    		InitResponse *initResp = epb_unpack_init_response(data + fix_head_len, len - fix_head_len);
;;;173    		if (initResp == NULL)
;;;174    			return errorCodeUnpackInitResp;
;;;175    
;;;176    		if (initResp->base_response) {
;;;177    			if (initResp->base_response->err_code == 0) {
;;;178    				if (initResp->has_challeange_answer) {
;;;179    					if (wechat_crc32(0, challeange, CHALLENAGE_LENGTH) == initResp->challeange_answer)
;;;180    						wxbt_state.init_state = true;
;;;181    				} else {
;;;182    					wxbt_state.init_state = true;
;;;183    				}
;;;184    				wxbt_state.wechats_switch_state = true;
;;;185    			} else {
;;;186    				epb_unpack_init_response_free(initResp);
;;;187    				return initResp->base_response->err_code;
;;;188    			}
;;;189    		}
;;;190    
;;;191    		epb_unpack_init_response_free(initResp);
;;;192    		break;
;;;193    	}
;;;194    
;;;195    	case ECI_resp_sendData:
;;;196    	{
;;;197    		printk("%s, ECI_resp_sendData\n", __func__);
;;;198    		SendDataResponse *sendDataResp = epb_unpack_send_data_response(data + fix_head_len, len - fix_head_len);
;;;199    		if (sendDataResp == NULL)
;;;200    			return errorCodeUnpackSendDataResp;
;;;201    
;;;202    		if (sendDataResp->base_response && sendDataResp->base_response->err_code != 0) {
;;;203    			epb_unpack_send_data_response_free(sendDataResp);
;;;204    			return sendDataResp->base_response->err_code;
;;;205    		}
;;;206    
;;;207    		epb_unpack_send_data_response_free(sendDataResp);
;;;208    		break;
;;;209    	}
;;;210    
;;;211    	case ECI_push_recvData:
;;;212    	{
;;;213    		printk("%s, ECI_push_recvData\n", __func__);
;;;214    		RecvDataPush *recvDatPush = epb_unpack_recv_data_push(data + fix_head_len, len - fix_head_len);
;;;215    		if (recvDatPush == NULL)
;;;216    			return errorCodeUnpackRecvDataPush;
;;;217    
;;;218    		*raw_data = (uint8_t *)recvDatPush->data.data;
;;;219    		*raw_len = recvDatPush->data.len;
;;;220    		
;;;221    		print_buffer(*raw_data, 1, *raw_len, 16, 0);
;;;222    
;;;223    		epb_unpack_recv_data_push_free(recvDatPush);
;;;224    		wxbt_state.push_data_seq++;
;;;225    		break;
;;;226    	}
;;;227    
;;;228    	case ECI_push_switchView:
;;;229    	{
;;;230    		printk("%s, ECI_push_switchView\n", __func__);
;;;231    		wxbt_state.wechats_switch_state = !wxbt_state.wechats_switch_state;
;;;232    		SwitchViewPush *swichViewPush = epb_unpack_switch_view_push(data + fix_head_len, len - fix_head_len);
;;;233    		if (swichViewPush == NULL)
;;;234    			return errorCodeUnpackSwitchViewPush;
;;;235    
;;;236    		epb_unpack_switch_view_push_free(swichViewPush);
;;;237    		break;
;;;238    	}
;;;239    
;;;240    	case ECI_push_switchBackgroud:
;;;241    	{
;;;242    		printk("%s, ECI_push_switchBackgroud\n", __func__);
;;;243    		SwitchBackgroudPush *switchBackgroundPush = epb_unpack_switch_backgroud_push(data + fix_head_len,
;;;244    											     len - fix_head_len);
;;;245    		if (!switchBackgroundPush)
;;;246    			return errorCodeUnpackSwitchBackgroundPush;
;;;247    
;;;248    		epb_unpack_switch_backgroud_push_free(switchBackgroundPush);
;;;249    		break;
;;;250    	}
;;;251    
;;;252    	case ECI_none:
;;;253    	case ECI_err_decode:
;;;254    	default:
;;;255    		break;
;;;256    	}
;;;257    
;;;258    	return len;
;;;259    }
000020  b007              ADD      sp,sp,#0x1c
000022  bdf0              POP      {r4-r7,pc}
                  |L1.36|
000024  ba44              REV16    r4,r0                 ;144
000026  9906              LDR      r1,[sp,#0x18]         ;146
000028  2000              MOVS     r0,#0                 ;146
00002a  6008              STR      r0,[r1,#0]            ;148
00002c  4668              MOV      r0,sp                 ;148
00002e  8900              LDRH     r0,[r0,#8]            ;148
000030  4a64              LDR      r2,|L1.452|
000032  ba40              REV16    r0,r0                 ;148
000034  1a81              SUBS     r1,r0,r2              ;148
000036  4e64              LDR      r6,|L1.456|
000038  3508              ADDS     r5,r5,#8              ;158
00003a  4290              CMP      r0,r2                 ;148
00003c  d02c              BEQ      |L1.152|
00003e  dc09              BGT      |L1.84|
000040  4962              LDR      r1,|L1.460|
000042  2701              MOVS     r7,#1                 ;158
000044  1840              ADDS     r0,r0,r1              ;148
000046  2800              CMP      r0,#0                 ;148
000048  d00b              BEQ      |L1.98|
00004a  2801              CMP      r0,#1                 ;148
00004c  d04f              BEQ      |L1.238|
00004e  2802              CMP      r0,#2                 ;148
                  |L1.80|
000050  d122              BNE      |L1.152|
000052  e022              B        |L1.154|
                  |L1.84|
000054  2902              CMP      r1,#2                 ;148
000056  d068              BEQ      |L1.298|
000058  2903              CMP      r1,#3                 ;148
00005a  d07c              BEQ      |L1.342|
00005c  2904              CMP      r1,#4                 ;148
00005e  d1f7              BNE      |L1.80|
000060  e09e              B        |L1.416|
                  |L1.98|
000062  495b              LDR      r1,|L1.464|
000064  a05b              ADR      r0,|L1.468|
000066  f7fffffe          BL       printk
00006a  4621              MOV      r1,r4                 ;152
00006c  3908              SUBS     r1,r1,#8              ;152
00006e  4628              MOV      r0,r5                 ;152
000070  f7fffffe          BL       epb_unpack_auth_response
000074  0005              MOVS     r5,r0                 ;152
000076  d009              BEQ      |L1.140|
000078  6828              LDR      r0,[r5,#0]            ;156
00007a  2800              CMP      r0,#0                 ;156
00007c  d009              BEQ      |L1.146|
00007e  6800              LDR      r0,[r0,#0]            ;157
000080  2800              CMP      r0,#0                 ;157
000082  d005              BEQ      |L1.144|
000084  4628              MOV      r0,r5                 ;160
000086  f7fffffe          BL       epb_unpack_auth_response_free
00008a  e044              B        |L1.278|
                  |L1.140|
00008c  4856              LDR      r0,|L1.488|
00008e  e7c7              B        |L1.32|
                  |L1.144|
000090  70b7              STRB     r7,[r6,#2]            ;158
                  |L1.146|
000092  4628              MOV      r0,r5                 ;165
000094  f7fffffe          BL       epb_unpack_auth_response_free
                  |L1.152|
000098  e08f              B        |L1.442|
                  |L1.154|
00009a  494d              LDR      r1,|L1.464|
00009c  a053              ADR      r0,|L1.492|
00009e  f7fffffe          BL       printk
0000a2  4621              MOV      r1,r4                 ;172
0000a4  3908              SUBS     r1,r1,#8              ;172
0000a6  4628              MOV      r0,r5                 ;172
0000a8  f7fffffe          BL       epb_unpack_init_response
0000ac  0005              MOVS     r5,r0                 ;172
0000ae  d009              BEQ      |L1.196|
0000b0  6828              LDR      r0,[r5,#0]            ;176
0000b2  2800              CMP      r0,#0                 ;176
0000b4  d017              BEQ      |L1.230|
0000b6  6800              LDR      r0,[r0,#0]            ;177
0000b8  2800              CMP      r0,#0                 ;177
0000ba  d006              BEQ      |L1.202|
0000bc  4628              MOV      r0,r5                 ;186
0000be  f7fffffe          BL       epb_unpack_init_response_free
0000c2  e028              B        |L1.278|
                  |L1.196|
0000c4  4848              LDR      r0,|L1.488|
0000c6  1e40              SUBS     r0,r0,#1              ;174
0000c8  e7aa              B        |L1.32|
                  |L1.202|
0000ca  7b28              LDRB     r0,[r5,#0xc]          ;178
0000cc  2800              CMP      r0,#0                 ;178
0000ce  d008              BEQ      |L1.226|
0000d0  493f              LDR      r1,|L1.464|
0000d2  2204              MOVS     r2,#4                 ;179
0000d4  398c              SUBS     r1,r1,#0x8c           ;179
0000d6  2000              MOVS     r0,#0                 ;179
0000d8  f7fffffe          BL       wechat_crc32
0000dc  6929              LDR      r1,[r5,#0x10]         ;179
0000de  4288              CMP      r0,r1                 ;179
0000e0  d100              BNE      |L1.228|
                  |L1.226|
0000e2  70f7              STRB     r7,[r6,#3]            ;180
                  |L1.228|
0000e4  7037              STRB     r7,[r6,#0]            ;184
                  |L1.230|
0000e6  4628              MOV      r0,r5                 ;191
0000e8  f7fffffe          BL       epb_unpack_init_response_free
0000ec  e065              B        |L1.442|
                  |L1.238|
0000ee  4938              LDR      r1,|L1.464|
0000f0  a043              ADR      r0,|L1.512|
0000f2  f7fffffe          BL       printk
0000f6  4621              MOV      r1,r4                 ;198
0000f8  3908              SUBS     r1,r1,#8              ;198
0000fa  4628              MOV      r0,r5                 ;198
0000fc  f7fffffe          BL       epb_unpack_send_data_response
000100  0005              MOVS     r5,r0                 ;198
000102  d00b              BEQ      |L1.284|
000104  6828              LDR      r0,[r5,#0]            ;202
000106  2800              CMP      r0,#0                 ;202
000108  d00b              BEQ      |L1.290|
00010a  6800              LDR      r0,[r0,#0]            ;202
00010c  2800              CMP      r0,#0                 ;202
00010e  d008              BEQ      |L1.290|
000110  4628              MOV      r0,r5                 ;203
000112  f7fffffe          BL       epb_unpack_send_data_response_free
                  |L1.278|
000116  6828              LDR      r0,[r5,#0]            ;204
000118  6800              LDR      r0,[r0,#0]            ;204
00011a  e781              B        |L1.32|
                  |L1.284|
00011c  4832              LDR      r0,|L1.488|
00011e  1e80              SUBS     r0,r0,#2              ;200
000120  e77e              B        |L1.32|
                  |L1.290|
000122  4628              MOV      r0,r5                 ;207
000124  f7fffffe          BL       epb_unpack_send_data_response_free
000128  e047              B        |L1.442|
                  |L1.298|
00012a  4929              LDR      r1,|L1.464|
00012c  a03a              ADR      r0,|L1.536|
00012e  f7fffffe          BL       printk
000132  4621              MOV      r1,r4                 ;214
000134  3908              SUBS     r1,r1,#8              ;214
000136  4628              MOV      r0,r5                 ;214
000138  f7fffffe          BL       epb_unpack_recv_data_push
00013c  0005              MOVS     r5,r0                 ;214
00013e  d014              BEQ      |L1.362|
000140  6868              LDR      r0,[r5,#4]            ;218
000142  6038              STR      r0,[r7,#0]            ;219
000144  9806              LDR      r0,[sp,#0x18]         ;219
000146  68aa              LDR      r2,[r5,#8]            ;219
000148  6002              STR      r2,[r0,#0]            ;221
00014a  2000              MOVS     r0,#0                 ;221
00014c  9000              STR      r0,[sp,#0]            ;221
00014e  2310              MOVS     r3,#0x10              ;221
000150  2101              MOVS     r1,#1                 ;221
000152  6838              LDR      r0,[r7,#0]            ;221
000154  e000              B        |L1.344|
                  |L1.342|
000156  e00b              B        |L1.368|
                  |L1.344|
000158  f7fffffe          BL       print_buffer
00015c  4628              MOV      r0,r5                 ;223
00015e  f7fffffe          BL       epb_unpack_recv_data_push_free
000162  8930              LDRH     r0,[r6,#8]            ;224  ; wxbt_state
000164  1c40              ADDS     r0,r0,#1              ;224
000166  8130              STRH     r0,[r6,#8]            ;224
000168  e027              B        |L1.442|
                  |L1.362|
00016a  481f              LDR      r0,|L1.488|
00016c  1f00              SUBS     r0,r0,#4              ;216
00016e  e757              B        |L1.32|
                  |L1.368|
000170  4917              LDR      r1,|L1.464|
000172  a02f              ADR      r0,|L1.560|
000174  f7fffffe          BL       printk
000178  7830              LDRB     r0,[r6,#0]            ;231  ; wxbt_state
00017a  2800              CMP      r0,#0                 ;231
00017c  d00b              BEQ      |L1.406|
00017e  2000              MOVS     r0,#0                 ;231
                  |L1.384|
000180  7030              STRB     r0,[r6,#0]            ;231
000182  4621              MOV      r1,r4                 ;232
000184  3908              SUBS     r1,r1,#8              ;232
000186  4628              MOV      r0,r5                 ;232
000188  f7fffffe          BL       epb_unpack_switch_view_push
00018c  2800              CMP      r0,#0                 ;233
00018e  d004              BEQ      |L1.410|
000190  f7fffffe          BL       epb_unpack_switch_view_push_free
000194  e011              B        |L1.442|
                  |L1.406|
000196  2001              MOVS     r0,#1                 ;231
000198  e7f2              B        |L1.384|
                  |L1.410|
00019a  4813              LDR      r0,|L1.488|
00019c  1f40              SUBS     r0,r0,#5              ;234
00019e  e73f              B        |L1.32|
                  |L1.416|
0001a0  490b              LDR      r1,|L1.464|
0001a2  a02a              ADR      r0,|L1.588|
0001a4  f7fffffe          BL       printk
0001a8  4621              MOV      r1,r4                 ;243
0001aa  3908              SUBS     r1,r1,#8              ;243
0001ac  4628              MOV      r0,r5                 ;243
0001ae  f7fffffe          BL       epb_unpack_switch_backgroud_push
0001b2  2800              CMP      r0,#0                 ;245
0001b4  d003              BEQ      |L1.446|
0001b6  f7fffffe          BL       epb_unpack_switch_backgroud_push_free
                  |L1.442|
0001ba  4620              MOV      r0,r4                 ;258
0001bc  e730              B        |L1.32|
                  |L1.446|
0001be  480a              LDR      r0,|L1.488|
0001c0  1f80              SUBS     r0,r0,#6              ;246
0001c2  e72d              B        |L1.32|
                          ENDP

                  |L1.452|
                          DCD      0x0000752f
                  |L1.456|
                          DCD      ||.bss||
                  |L1.460|
                          DCD      0xffffb1df
                  |L1.464|
                          DCD      ||.constdata||+0x8c
                  |L1.468|
0001d4  25732c20          DCB      "%s, ECI_resp_auth\n",0
0001d8  4543495f
0001dc  72657370
0001e0  5f617574
0001e4  680a00  
0001e7  00                DCB      0
                  |L1.488|
                          DCD      0xffff6670
                  |L1.492|
0001ec  25732c20          DCB      "%s, ECI_resp_init\n",0
0001f0  4543495f
0001f4  72657370
0001f8  5f696e69
0001fc  740a00  
0001ff  00                DCB      0
                  |L1.512|
000200  25732c20          DCB      "%s, ECI_resp_sendData\n",0
000204  4543495f
000208  72657370
00020c  5f73656e
000210  64446174
000214  610a00  
000217  00                DCB      0
                  |L1.536|
000218  25732c20          DCB      "%s, ECI_push_recvData\n",0
00021c  4543495f
000220  70757368
000224  5f726563
000228  76446174
00022c  610a00  
00022f  00                DCB      0
                  |L1.560|
000230  25732c20          DCB      "%s, ECI_push_switchView\n",0
000234  4543495f
000238  70757368
00023c  5f737769
000240  74636856
000244  6965770a
000248  00      
000249  00                DCB      0
00024a  00                DCB      0
00024b  00                DCB      0
                  |L1.588|
00024c  25732c20          DCB      "%s, ECI_push_switchBackgroud\n",0
000250  4543495f
000254  70757368
000258  5f737769
00025c  74636842
000260  61636b67
000264  726f7564
000268  0a00    
00026a  00                DCB      0
00026b  00                DCB      0

                          AREA ||i.data_produce_func_send||, CODE, READONLY, ALIGN=2

                  data_produce_func_send PROC
;;;29     
;;;30     void data_produce_func_send(cmd_parameter_t *param, uint8_t **data,
000000  b5f0              PUSH     {r4-r7,lr}
;;;31     			    uint32_t *len)
;;;32     {
000002  4615              MOV      r5,r2
000004  b099              SUB      sp,sp,#0x64
;;;33     	BaseRequest basReq = { NULL };
000006  2600              MOVS     r6,#0
;;;34     
;;;35     	const uint8_t fix_head_len = sizeof(cmd_fix_head_t);
;;;36     	cmd_fix_head_t fix_head = { 0xFE, 1, 0, htons(ECI_req_auth), 0 };
000008  4a43              LDR      r2,|L2.280|
00000a  460c              MOV      r4,r1                 ;32
00000c  9602              STR      r6,[sp,#8]
00000e  6851              LDR      r1,[r2,#4]  ; <Data1>
000010  6892              LDR      r2,[r2,#8]  ; <Data1>
;;;37     
;;;38     	wxbt_state.seq++;
000012  4f42              LDR      r7,|L2.284|
000014  9201              STR      r2,[sp,#4]
000016  9100              STR      r1,[sp,#0]
000018  8979              LDRH     r1,[r7,#0xa]  ; wxbt_state
00001a  1c49              ADDS     r1,r1,#1
00001c  8179              STRH     r1,[r7,#0xa]
;;;39     	*len = 0;
;;;40     
;;;41     	switch (param->cmd) {
00001e  602e              STR      r6,[r5,#0]
000020  6801              LDR      r1,[r0,#0]
000022  2901              CMP      r1,#1
000024  d004              BEQ      |L2.48|
000026  2902              CMP      r1,#2
000028  d01f              BEQ      |L2.106|
00002a  2903              CMP      r1,#3
00002c  d167              BNE      |L2.254|
00002e  e03b              B        |L2.168|
                  |L2.48|
;;;42     	case CMD_AUTH: {
;;;43     		AuthRequest authReq = {
000030  4939              LDR      r1,|L2.280|
000032  2254              MOVS     r2,#0x54
000034  310c              ADDS     r1,r1,#0xc
000036  a803              ADD      r0,sp,#0xc
000038  f7fffffe          BL       __aeabi_memcpy4
00003c  a802              ADD      r0,sp,#8
;;;44     			&basReq, false, { NULL, 0}, PROTO_VERSION, AUTH_PROTO,
;;;45     			(EmAuthMethod)AUTH_METHOD, false, { NULL, 0}, true,
;;;46     			{ wx_bond_addr, MAC_ADDRESS_LENGTH }, false,
;;;47     			{ NULL, 0 }, false, { NULL, 0 }, true,
;;;48     			{ DEVICE_ID, sizeof(DEVICE_ID) }
;;;49     		};
;;;50     
;;;51     		*len = epb_auth_request_pack_size(&authReq) + fix_head_len;
00003e  9003              STR      r0,[sp,#0xc]
000040  a803              ADD      r0,sp,#0xc
000042  f7fffffe          BL       epb_auth_request_pack_size
000046  3008              ADDS     r0,r0,#8
;;;52     		*data = (uint8_t *) malloc(*len);
000048  6028              STR      r0,[r5,#0]
00004a  f7fffffe          BL       mem_malloc
;;;53     		if (*data == NULL)
00004e  6020              STR      r0,[r4,#0]
000050  2800              CMP      r0,#0
000052  d04c              BEQ      |L2.238|
;;;54     			return;
;;;55     
;;;56     		if (epb_pack_auth_request(&authReq, *data + fix_head_len,
000054  4601              MOV      r1,r0
000056  682a              LDR      r2,[r5,#0]
000058  3108              ADDS     r1,r1,#8
00005a  a803              ADD      r0,sp,#0xc
00005c  3a08              SUBS     r2,r2,#8
00005e  f7fffffe          BL       epb_pack_auth_request
000062  2800              CMP      r0,#0
000064  db3f              BLT      |L2.230|
;;;57     					  *len - fix_head_len) < 0) {
;;;58     			free(*data);
;;;59     			*data = NULL;
;;;60     			return;
;;;61     		}
;;;62     
;;;63     		fix_head.nCmdId = htons(ECI_req_auth);
000066  482e              LDR      r0,|L2.288|
;;;64     		break;
000068  e01b              B        |L2.162|
                  |L2.106|
;;;65     	}
;;;66     
;;;67     	case CMD_INIT: {
;;;68     		/* has challeange */
;;;69     		InitRequest initReq = {
00006a  492b              LDR      r1,|L2.280|
00006c  221c              MOVS     r2,#0x1c
00006e  3160              ADDS     r1,r1,#0x60
000070  a803              ADD      r0,sp,#0xc
000072  f7fffffe          BL       __aeabi_memcpy4
000076  a802              ADD      r0,sp,#8
;;;70     			&basReq, false, { NULL, 0 }, true,
;;;71     			{ (uint8_t *)challeange, CHALLENAGE_LENGTH }
;;;72     		};
;;;73     
;;;74     		*len = epb_init_request_pack_size(&initReq) + fix_head_len;
000078  9003              STR      r0,[sp,#0xc]
00007a  a803              ADD      r0,sp,#0xc
00007c  f7fffffe          BL       epb_init_request_pack_size
000080  3008              ADDS     r0,r0,#8
;;;75     		*data = (uint8_t *) malloc(*len);
000082  6028              STR      r0,[r5,#0]
000084  f7fffffe          BL       mem_malloc
;;;76     		if (*data == NULL)
000088  6020              STR      r0,[r4,#0]
00008a  2800              CMP      r0,#0
00008c  d02f              BEQ      |L2.238|
;;;77     			return;
;;;78     		
;;;79     		if (epb_pack_init_request(&initReq, *data + fix_head_len,
00008e  4601              MOV      r1,r0
000090  682a              LDR      r2,[r5,#0]
000092  3108              ADDS     r1,r1,#8
000094  a803              ADD      r0,sp,#0xc
000096  3a08              SUBS     r2,r2,#8
000098  f7fffffe          BL       epb_pack_init_request
00009c  2800              CMP      r0,#0
00009e  db22              BLT      |L2.230|
;;;80     					  *len - fix_head_len) < 0) {
;;;81     			free(*data);
;;;82     			*data = NULL;
;;;83     			return;
;;;84     		}
;;;85     
;;;86     		fix_head.nCmdId = htons(ECI_req_init);
0000a0  4820              LDR      r0,|L2.292|
                  |L2.162|
0000a2  4669              MOV      r1,sp                 ;63
0000a4  8088              STRH     r0,[r1,#4]            ;63
0000a6  e02a              B        |L2.254|
                  |L2.168|
;;;87     		break;
;;;88     	}
;;;89     
;;;90     	case CMD_SENDDAT: {
;;;91     		SendDataRequest sendDatReq = {
0000a8  491b              LDR      r1,|L2.280|
0000aa  3180              ADDS     r1,r1,#0x80
0000ac  c90e              LDM      r1,{r1-r3}
0000ae  9104              STR      r1,[sp,#0x10]
0000b0  a902              ADD      r1,sp,#8
0000b2  9306              STR      r3,[sp,#0x18]
0000b4  9205              STR      r2,[sp,#0x14]
0000b6  9103              STR      r1,[sp,#0xc]
0000b8  6841              LDR      r1,[r0,#4]
0000ba  9104              STR      r1,[sp,#0x10]
0000bc  6880              LDR      r0,[r0,#8]
;;;92     			&basReq,
;;;93     			{ (uint8_t *)param->send_msg.str, param->send_msg.len },
;;;94     			true, (EmDeviceDataType)EDDT_wxDeviceHtmlChatView
;;;95     		};
;;;96     
;;;97     		*len = epb_send_data_request_pack_size(&sendDatReq) + fix_head_len;
0000be  9005              STR      r0,[sp,#0x14]
0000c0  a803              ADD      r0,sp,#0xc
0000c2  f7fffffe          BL       epb_send_data_request_pack_size
0000c6  3008              ADDS     r0,r0,#8
;;;98     		*data = (uint8_t *)malloc(*len);
0000c8  6028              STR      r0,[r5,#0]
0000ca  f7fffffe          BL       mem_malloc
;;;99     		if (*data == NULL)
0000ce  6020              STR      r0,[r4,#0]
0000d0  2800              CMP      r0,#0
0000d2  d00c              BEQ      |L2.238|
;;;100    			return;
;;;101    
;;;102    		if (epb_pack_send_data_request(&sendDatReq, *data + fix_head_len,
0000d4  4601              MOV      r1,r0
0000d6  682a              LDR      r2,[r5,#0]
0000d8  3108              ADDS     r1,r1,#8
0000da  a803              ADD      r0,sp,#0xc
0000dc  3a08              SUBS     r2,r2,#8
0000de  f7fffffe          BL       epb_pack_send_data_request
0000e2  2800              CMP      r0,#0
0000e4  da05              BGE      |L2.242|
                  |L2.230|
;;;103    					       *len - fix_head_len) < 0) {
;;;104    			free(*data);
0000e6  6820              LDR      r0,[r4,#0]
0000e8  f7fffffe          BL       mem_free
;;;105    			*data = NULL;
;;;106    			return;
0000ec  6026              STR      r6,[r4,#0]
                  |L2.238|
;;;107    		}
;;;108    
;;;109    		fix_head.nCmdId = htons(ECI_req_sendData);
;;;110    		wxbt_state.send_data_seq++;
;;;111    		break;
;;;112    	}
;;;113    	}
;;;114    
;;;115    	fix_head.nLength = htons(*len);
;;;116    	fix_head.nSeq = htons(wxbt_state.seq);
;;;117    	memcpy(*data, &fix_head, fix_head_len);
;;;118    
;;;119    	return;
;;;120    }
0000ee  b019              ADD      sp,sp,#0x64
0000f0  bdf0              POP      {r4-r7,pc}
                  |L2.242|
0000f2  480d              LDR      r0,|L2.296|
0000f4  4669              MOV      r1,sp                 ;109
0000f6  8088              STRH     r0,[r1,#4]            ;109
0000f8  88f8              LDRH     r0,[r7,#6]            ;110  ; wxbt_state
0000fa  1c40              ADDS     r0,r0,#1              ;110
0000fc  80f8              STRH     r0,[r7,#6]            ;110
                  |L2.254|
0000fe  6828              LDR      r0,[r5,#0]            ;115
000100  4669              MOV      r1,sp                 ;115
000102  ba40              REV16    r0,r0                 ;115
000104  8048              STRH     r0,[r1,#2]            ;115
000106  8978              LDRH     r0,[r7,#0xa]          ;116  ; wxbt_state
000108  2208              MOVS     r2,#8                 ;117
00010a  ba40              REV16    r0,r0                 ;116
00010c  80c8              STRH     r0,[r1,#6]            ;116
00010e  6820              LDR      r0,[r4,#0]            ;117
000110  f7fffffe          BL       __aeabi_memcpy
000114  e7eb              B        |L2.238|
;;;121    
                          ENDP

000116  0000              DCW      0x0000
                  |L2.280|
                          DCD      ||.constdata||
                  |L2.284|
                          DCD      ||.bss||
                  |L2.288|
                          DCD      0x00001127
                  |L2.292|
                          DCD      0x00001327
                  |L2.296|
                          DCD      0x00001227

                          AREA ||i.wx_set_mac_address||, CODE, READONLY, ALIGN=2

                  wx_set_mac_address PROC
;;;24     
;;;25     void wx_set_mac_address(uint8_t *mac_addr)
000000  b510              PUSH     {r4,lr}
;;;26     {
;;;27     	memcpy(wx_bond_addr, mac_addr, 6);
000002  4601              MOV      r1,r0
000004  2206              MOVS     r2,#6
000006  4802              LDR      r0,|L3.16|
000008  f7fffffe          BL       __aeabi_memcpy
;;;28     }
00000c  bd10              POP      {r4,pc}
;;;29     
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      ||.data||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  wxbt_state
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  challeange
000000  11223344          DCB      0x11,0x22,0x33,0x44
000004  fe01              DCB      0xfe,0x01
000006  0000              DCW      0x0000
000008  11270000          DCW      0x1127,0x0000
                          DCD      0x00000000
000010  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00010004
                          DCD      0x00000001
000024  02000000          DCB      0x02,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000030  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      wx_bond_addr
                          DCD      0x00000006
00003c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000048  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000054  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      ||.conststring||
                          DCD      0x00000021
                          DCD      0x00000000
000064  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      0x00000000
000070  01000000          DCB      0x01,0x00,0x00,0x00
                          DCD      challeange
                          DCD      0x00000004
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000088  0100              DCB      0x01,0x00
00008a  2711              DCW      0x2711
                  __func__
00008c  64617461          DCB      0x64,0x61,0x74,0x61
000090  5f636f6e          DCB      0x5f,0x63,0x6f,0x6e
000094  73756d65          DCB      0x73,0x75,0x6d,0x65
000098  5f66756e          DCB      0x5f,0x66,0x75,0x6e
00009c  635f7265          DCB      0x63,0x5f,0x72,0x65
0000a0  6300              DCB      0x63,0x00

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  67685f66          DCB      "gh_f716795d7c6b_2dc366b1844b914e",0
000004  37313637
000008  39356437
00000c  6336625f
000010  32646333
000014  36366231
000018  38343462
00001c  39313465
000020  00      

                          AREA ||.data||, DATA, ALIGN=0

                  wx_bond_addr
                          DCDU     0x00000000
000004  0000              DCB      0x00,0x00
