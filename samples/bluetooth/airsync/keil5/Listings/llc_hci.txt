; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\llc_hci.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\llc_hci.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\llc_hci.crf ..\..\..\..\drivers\bluetooth\hci\llc_hci.c]
                          THUMB

                          AREA ||i.compute_checksum||, CODE, READONLY, ALIGN=2

                  compute_checksum PROC
;;;57     
;;;58     __ramfunc u8_t compute_checksum(const u8_t *ptr, u32_t len)
000000  b510              PUSH     {r4,lr}
000002  2200              MOVS     r2,#0
000004  4b04              LDR      r3,|L1.24|
;;;59     {
000006  e003              B        |L1.16|
                  |L1.8|
000008  7804              LDRB     r4,[r0,#0]
00000a  4054              EORS     r4,r4,r2
00000c  5d1a              LDRB     r2,[r3,r4]
00000e  1c40              ADDS     r0,r0,#1
                  |L1.16|
000010  1e49              SUBS     r1,r1,#1
000012  d2f9              BCS      |L1.8|
000014  4610              MOV      r0,r2
;;;60     	return crc8_compute(ptr, len);
;;;61     }
000016  bd10              POP      {r4,pc}
;;;62     
                          ENDP

                  |L1.24|
                          DCD      ||.constdata||

                          AREA ||i.hci_tx_failure_new||, CODE, READONLY, ALIGN=2

                  hci_tx_failure_new PROC
;;;1      /*
;;;346    void hci_tx_failure_new(void)
000000  b510              PUSH     {r4,lr}
;;;347    {
;;;348    	/* reboot for failure */
;;;349    	printk("reboot for llcc retry failed\n");
000002  a004              ADR      r0,|L2.20|
000004  f7fffffe          BL       printk
;;;350    	sys_pm_reboot(REBOOT_TYPE_GOTO_APP);
000008  2005              MOVS     r0,#5
00000a  0280              LSLS     r0,r0,#10
00000c  f7fffffe          BL       sys_pm_reboot
;;;351    }
000010  bd10              POP      {r4,pc}
;;;352    
                          ENDP

000012  0000              DCW      0x0000
                  |L2.20|
000014  7265626f          DCB      "reboot for llcc retry failed\n",0
000018  6f742066
00001c  6f72206c
000020  6c636320
000024  72657472
000028  79206661
00002c  696c6564
000030  0a00    
000032  00                DCB      0
000033  00                DCB      0

                          AREA ||i.hci_vs_read_done_new||, CODE, READONLY, ALIGN=2

                  hci_vs_read_done_new PROC
;;;319    bool hci_vs_read_done(u8_t type, u8_t *p_data, u16_t len);
;;;320    __ramfunc bool hci_vs_read_done_new(u8_t type, u8_t *p_data, u16_t len)
000000  b570              PUSH     {r4-r6,lr}
;;;321    {
000002  4616              MOV      r6,r2
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;322    	if (type == HCI_EVT_TYPE) {
000008  2804              CMP      r0,#4
00000a  d115              BNE      |L3.56|
;;;323    		u8_t *evt_data = p_data;
;;;324    
;;;325    		if ((evt_data[0] == 0xff) /* HCI_VENDOR_SPEC_EVT */
00000c  7820              LDRB     r0,[r4,#0]
00000e  28ff              CMP      r0,#0xff
000010  d112              BNE      |L3.56|
;;;326    			&& (evt_data[1] == 0x3e) /* len */
000012  7848              LDRB     r0,[r1,#1]
000014  283e              CMP      r0,#0x3e
000016  d10f              BNE      |L3.56|
;;;327    			&& (evt_data[2] == 0x80) && (evt_data[3] == 0xfe) /* BOOT_EVT_STARTUP */) {
000018  7888              LDRB     r0,[r1,#2]
00001a  2880              CMP      r0,#0x80
00001c  d10c              BNE      |L3.56|
00001e  78c8              LDRB     r0,[r1,#3]
000020  28fe              CMP      r0,#0xfe
000022  d109              BNE      |L3.56|
;;;328    
;;;329    			/* Filter the first reset evt regardless of the reason of reset */
;;;330    			if (evt_data[7] == 0x1) /* POWER_ON_RESET */ {
000024  79c8              LDRB     r0,[r1,#7]
000026  2801              CMP      r0,#1
000028  d106              BNE      |L3.56|
;;;331    				printk("reboot for power_on evt\n");
00002a  a006              ADR      r0,|L3.68|
00002c  f7fffffe          BL       printk
;;;332    				sys_pm_reboot(REBOOT_TYPE_GOTO_APP);
000030  2005              MOVS     r0,#5
000032  0280              LSLS     r0,r0,#10
000034  f7fffffe          BL       sys_pm_reboot
                  |L3.56|
;;;333    			}
;;;334    		}
;;;335    	}
;;;336    	
;;;337    	return hci_vs_read_done(type, p_data, len);
000038  4632              MOV      r2,r6
00003a  4621              MOV      r1,r4
00003c  4628              MOV      r0,r5
00003e  f7fffffe          BL       hci_vs_read_done
;;;338    }
000042  bd70              POP      {r4-r6,pc}
;;;339    
                          ENDP

                  |L3.68|
000044  7265626f          DCB      "reboot for power_on evt\n",0
000048  6f742066
00004c  6f722070
000050  6f776572
000054  5f6f6e20
000058  6576740a
00005c  00      
00005d  00                DCB      0
00005e  00                DCB      0
00005f  00                DCB      0

                          AREA ||i.llcc_rx_cmd_valid_handler_new||, CODE, READONLY, ALIGN=2

                  llcc_rx_cmd_valid_handler_new PROC
;;;176    #ifdef  PATCH_RX_CMD_VALID
;;;177    __ramfunc void llcc_rx_cmd_valid_handler_new(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;178    {
;;;179    	llcc_cmd_t cmd;
;;;180    
;;;181    	/* Read command. */
;;;182    	cmd.data.data[0] = LLCC_RXD->CMD_DATA0;
000002  4833              LDR      r0,|L4.208|
000004  6801              LDR      r1,[r0,#0]
;;;183    	cmd.data.data[1] = LLCC_RXD->CMD_DATA1;
000006  9100              STR      r1,[sp,#0]
000008  6840              LDR      r0,[r0,#4]
;;;184    
;;;185    	/* Validate message checksum */
;;;186    	if (llc_hci_cb.llcc.use_xfer2) {
00000a  4c32              LDR      r4,|L4.212|
00000c  9001              STR      r0,[sp,#4]
00000e  78e0              LDRB     r0,[r4,#3]  ; llc_hci_cb
;;;187    		/* Validate header checksum */
;;;188    		int i;
;;;189    		u8_t *pCmd8 = (u8_t *) &cmd;
;;;190    		u8_t csum = ~0;
;;;191    
;;;192    		for (i = 0 ; i < 7 ; i++)
;;;193    			csum += pCmd8[i];
;;;194    
;;;195    		/* Kick back an error if haeder CRC failes */
;;;196    		if (csum != pCmd8[7]) {
;;;197    			hci_stats.num_hdr_crc_err_rx++;
000010  4d31              LDR      r5,|L4.216|
000012  2800              CMP      r0,#0                 ;186
000014  d013              BEQ      |L4.62|
000016  21ff              MOVS     r1,#0xff              ;190
000018  466a              MOV      r2,sp                 ;189
00001a  2000              MOVS     r0,#0                 ;192
                  |L4.28|
00001c  5c13              LDRB     r3,[r2,r0]            ;193
00001e  1c40              ADDS     r0,r0,#1              ;193
000020  1859              ADDS     r1,r3,r1              ;193
000022  b2c9              UXTB     r1,r1                 ;193
000024  2807              CMP      r0,#7                 ;192
000026  dbf9              BLT      |L4.28|
000028  79d0              LDRB     r0,[r2,#7]            ;196
00002a  4288              CMP      r0,r1                 ;196
00002c  d007              BEQ      |L4.62|
00002e  8a28              LDRH     r0,[r5,#0x10]  ; hci_stats
;;;198    			llcc_tx_error2_cmd(LLCC_ERROR2_HDR_ERR, 0);
000030  2100              MOVS     r1,#0
000032  1c40              ADDS     r0,r0,#1              ;197
000034  8228              STRH     r0,[r5,#0x10]         ;197
000036  2001              MOVS     r0,#1
000038  f7fffffe          BL       llcc_tx_error2_cmd
;;;199    			return;
;;;200    		}
;;;201    	}
;;;202    
;;;203    	switch (cmd.basic.type) {
;;;204    	case LLCC_CMD_SOFT_RESET:
;;;205    	{
;;;206    		llcc_init();
;;;207    		llc_hci_cb.llcc.state = LLCC_STATE_READY;
;;;208    		llc_hci_cb.llcc.tx.seq_num = 0;
;;;209    #ifdef ENABLE_XFER2
;;;210    		llc_hci_cb.llcc.use_xfer2 = (cmd.basic.pad[0] == LLCC_CMD_SOFT_RESET_XFER2_FLAG0 &&
;;;211    															cmd.basic.pad[1] == LLCC_CMD_SOFT_RESET_XFER2_FLAG1);
;;;212    #endif
;;;213    		llcc_tx_soft_reset_ack_cmd_new();
;;;214    		return;
;;;215    	}
;;;216    
;;;217    	case LLCC_CMD2_ERROR:
;;;218    	{
;;;219    		switch (cmd.error2.error[0]) {
;;;220    		case LLCC_ERROR2_DATA_ERR: /* Payload checksum failure */
;;;221    		{
;;;222    			/* First make sure we're in a transfer state */
;;;223    			if (!llc_hci_cb.llcc.tx_busy_flag)
;;;224    				return;
;;;225    
;;;226    			/* Re-validate payload checksum */
;;;227    			u8_t csum;
;;;228    			u8_t *ptr = llc_hci_cb.llcc.tx.p_buf + (llc_hci_cb.llcc.tx.align & 0x3);
;;;229    			u16_t len = (llc_hci_cb.llcc.tx.len * 4) - (llc_hci_cb.llcc.tx.align & 0x3) - ((llc_hci_cb.llcc.tx.align >> 2) & 0x3);
;;;230    
;;;231    			csum = compute_checksum(ptr, len);
;;;232    
;;;233    			SYS_LOG_DBG(" csum %x/%x", csum, llc_hci_cb.llcc.tx.checksum);
;;;234    
;;;235    			if (csum != llc_hci_cb.llcc.tx.checksum) {
;;;236    				/* Error out, data is corrupted, don't retry */
;;;237    				hci_stats.num_tx_buffer_err++;
;;;238    				llc_hci_cb.llcc.consecutive_err = LLCC_MAX_CONSECUTIVE_ERR;
;;;239    				llcc_tx_retry_helper(true);
;;;240    				return;
;;;241    			}
;;;242    
;;;243    			hci_stats.num_data_crc_err_tx++;
;;;244    			llcc_tx_retry_helper(true);
;;;245    			return;
;;;246    		}
;;;247    		default:  /* Ignore all others */
;;;248    			break;
;;;249    		}
;;;250    	}
;;;251    
;;;252    	default:
;;;253    		break;
;;;254    	}
;;;255    void llcc_rxcmd_valid_handler(u32_t , u32_t);
;;;256    	return llcc_rxcmd_valid_handler(cmd.data.data[0], cmd.data.data[1]);
;;;257    }
00003c  bd7c              POP      {r2-r6,pc}
                  |L4.62|
00003e  4668              MOV      r0,sp                 ;203
000040  7800              LDRB     r0,[r0,#0]            ;203
000042  2801              CMP      r0,#1                 ;203
000044  d002              BEQ      |L4.76|
000046  280e              CMP      r0,#0xe               ;203
000048  d11b              BNE      |L4.130|
00004a  e016              B        |L4.122|
                  |L4.76|
00004c  f7fffffe          BL       llcc_init
000050  2002              MOVS     r0,#2                 ;207
000052  70a0              STRB     r0,[r4,#2]            ;207
000054  481f              LDR      r0,|L4.212|
000056  2100              MOVS     r1,#0                 ;208
000058  3020              ADDS     r0,r0,#0x20           ;208
00005a  70c1              STRB     r1,[r0,#3]            ;208
00005c  4668              MOV      r0,sp                 ;210
00005e  7840              LDRB     r0,[r0,#1]            ;210
000060  285a              CMP      r0,#0x5a              ;210
000062  d103              BNE      |L4.108|
000064  4668              MOV      r0,sp                 ;211
000066  7880              LDRB     r0,[r0,#2]            ;211
000068  28a5              CMP      r0,#0xa5              ;211
00006a  d004              BEQ      |L4.118|
                  |L4.108|
00006c  2000              MOVS     r0,#0                 ;211
                  |L4.110|
00006e  70e0              STRB     r0,[r4,#3]            ;211
000070  f7fffffe          BL       llcc_tx_soft_reset_ack_cmd_new
000074  bd7c              POP      {r2-r6,pc}
                  |L4.118|
000076  2001              MOVS     r0,#1                 ;211
000078  e7f9              B        |L4.110|
                  |L4.122|
00007a  4668              MOV      r0,sp                 ;219
00007c  7840              LDRB     r0,[r0,#1]            ;219
00007e  2803              CMP      r0,#3                 ;219
000080  d004              BEQ      |L4.140|
                  |L4.130|
000082  9901              LDR      r1,[sp,#4]            ;256
000084  9800              LDR      r0,[sp,#0]            ;256
000086  f7fffffe          BL       llcc_rxcmd_valid_handler
                  |L4.138|
00008a  bd7c              POP      {r2-r6,pc}
                  |L4.140|
00008c  7860              LDRB     r0,[r4,#1]            ;223  ; llc_hci_cb
00008e  2800              CMP      r0,#0                 ;223
000090  d0fb              BEQ      |L4.138|
000092  7f21              LDRB     r1,[r4,#0x1c]         ;228  ; llc_hci_cb
000094  69a0              LDR      r0,[r4,#0x18]         ;228  ; llc_hci_cb
000096  078a              LSLS     r2,r1,#30             ;228
000098  8be3              LDRH     r3,[r4,#0x1e]         ;229  ; llc_hci_cb
00009a  0f92              LSRS     r2,r2,#30             ;228
00009c  1880              ADDS     r0,r0,r2              ;228
00009e  009b              LSLS     r3,r3,#2              ;229
0000a0  0709              LSLS     r1,r1,#28             ;229
0000a2  1a9a              SUBS     r2,r3,r2              ;229
0000a4  0f89              LSRS     r1,r1,#30             ;229
0000a6  1a51              SUBS     r1,r2,r1              ;229
0000a8  b289              UXTH     r1,r1                 ;229
0000aa  f7fffffe          BL       compute_checksum
0000ae  7f61              LDRB     r1,[r4,#0x1d]         ;235  ; llc_hci_cb
0000b0  4281              CMP      r1,r0                 ;235
0000b2  d005              BEQ      |L4.192|
0000b4  8e28              LDRH     r0,[r5,#0x30]         ;237  ; hci_stats
0000b6  1c40              ADDS     r0,r0,#1              ;237
0000b8  8628              STRH     r0,[r5,#0x30]         ;237
0000ba  20fa              MOVS     r0,#0xfa              ;238
0000bc  71a0              STRB     r0,[r4,#6]            ;238
0000be  e002              B        |L4.198|
                  |L4.192|
0000c0  8a68              LDRH     r0,[r5,#0x12]         ;243  ; hci_stats
0000c2  1c40              ADDS     r0,r0,#1              ;243
0000c4  8268              STRH     r0,[r5,#0x12]         ;243
                  |L4.198|
0000c6  2001              MOVS     r0,#1                 ;244
0000c8  f7fffffe          BL       llcc_tx_retry_helper
0000cc  bd7c              POP      {r2-r6,pc}
;;;258    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L4.208|
                          DCD      0x40022000
                  |L4.212|
                          DCD      llc_hci_cb
                  |L4.216|
                          DCD      hci_stats

                          AREA ||i.llcc_rxcmd_valid_handler_new||, CODE, READONLY, ALIGN=1

                  llcc_rxcmd_valid_handler_new PROC
;;;304    
;;;305    __ramfunc void llcc_rxcmd_valid_handler_new(void)
000000  b510              PUSH     {r4,lr}
;;;306    {
;;;307    #ifdef  PATCH_RX_CMD_VALID
;;;308    	llcc_rx_cmd_valid_handler_new();
000002  f7fffffe          BL       llcc_rx_cmd_valid_handler_new
;;;309    #else
;;;310    	llcc_rxcmd_valid_handler();
;;;311    #endif
;;;312    }
000006  bd10              POP      {r4,pc}
;;;313    
                          ENDP


                          AREA ||i.llcc_rxdmal_done_handler_new||, CODE, READONLY, ALIGN=1

                  llcc_rxdmal_done_handler_new PROC
;;;313    
;;;314    __ramfunc void llcc_rxdmal_done_handler_new(void)
000000  b510              PUSH     {r4,lr}
;;;315    {
;;;316    	llcc_rxdmal_done_handler();
000002  f7fffffe          BL       llcc_rxdmal_done_handler
;;;317    }
000006  bd10              POP      {r4,pc}
;;;318    
                          ENDP


                          AREA ||i.llcc_tx_soft_reset_ack_cmd_new||, CODE, READONLY, ALIGN=1

                  llcc_tx_soft_reset_ack_cmd_new PROC
;;;73     /*************************************************************************************************/
;;;74     void llcc_tx_soft_reset_ack_cmd_new(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;75     {
;;;76     	llcc_cmd_t cmd;
;;;77     
;;;78     	cmd.basic.type = LLCC_CMD_SOFT_RESET_ACK;
000002  2002              MOVS     r0,#2
000004  4669              MOV      r1,sp
000006  7008              STRB     r0,[r1,#0]
;;;79     #ifdef ENABLE_XFER2
;;;80     	cmd.basic.pad[0] = LLCC_CMD_SOFT_RESET_XFER2_FLAG0;
000008  205a              MOVS     r0,#0x5a
00000a  7048              STRB     r0,[r1,#1]
;;;81     	cmd.basic.pad[1] = LLCC_CMD_SOFT_RESET_XFER2_FLAG1;
00000c  20a5              MOVS     r0,#0xa5
00000e  7088              STRB     r0,[r1,#2]
;;;82     	cmd.basic.pad[2] = LLCC_CMD_SOFT_RESET_CRC_FLAG2;
000010  20be              MOVS     r0,#0xbe
000012  70c8              STRB     r0,[r1,#3]
;;;83     #endif
;;;84     	llcc_tx_cmd_crc((u8_t *)&cmd);
000014  4668              MOV      r0,sp
000016  f7fffffe          BL       llcc_tx_cmd_crc
;;;85     }
00001a  bd1c              POP      {r2-r4,pc}
;;;86     
                          ENDP


                          AREA ||i.llcc_write_new||, CODE, READONLY, ALIGN=2

                  llcc_write_new PROC
;;;99     extern void (*p_llcc_write)(u32_t cmd, const u8_t *p_data, u16_t len, void *p_context);
;;;100    __ramfunc void llcc_write_new(u32_t cmd, const u8_t *p_data, u16_t len, void *p_context)
000000  b5ff              PUSH     {r0-r7,lr}
;;;101    {
;;;102    	u8_t align = (u32_t)p_data & 3;
000002  078c              LSLS     r4,r1,#30
000004  4606              MOV      r6,r0                 ;101
000006  0fa4              LSRS     r4,r4,#30
000008  b081              SUB      sp,sp,#4              ;101
;;;103    	u8_t checksum = 0;
00000a  2000              MOVS     r0,#0
00000c  460f              MOV      r7,r1                 ;101
;;;104    
;;;105    	WSF_CS_INIT(cs);
;;;106    
;;;107    	/* Wait for channel to become free */
;;;108    	WSF_CS_ENTER(cs);
;;;109    	while ((llc_hci_cb.llcc.state != LLCC_STATE_READY) || llc_hci_cb.llcc.tx_busy_flag) {
00000e  9000              STR      r0,[sp,#0]
000010  e002              B        |L8.24|
                  |L8.18|
;;;110    		WSF_CS_EXIT(cs);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       _arch_irq_unlock_s
                  |L8.24|
000018  f7fffffe          BL       _arch_irq_lock_s
00001c  4605              MOV      r5,r0
00001e  4830              LDR      r0,|L8.224|
000020  7881              LDRB     r1,[r0,#2]            ;109  ; llc_hci_cb
000022  2902              CMP      r1,#2                 ;109
000024  d1f5              BNE      |L8.18|
000026  7840              LDRB     r0,[r0,#1]            ;109  ; llc_hci_cb
000028  2800              CMP      r0,#0                 ;109
00002a  d1f2              BNE      |L8.18|
;;;111    		/*__WFI();  // or just yield to the OS.*/
;;;112    		WSF_CS_ENTER(cs);
;;;113    	}
;;;114    	if (!llc_hci_cb.llcc.tx_busy_flag) {
00002c  482c              LDR      r0,|L8.224|
00002e  7840              LDRB     r0,[r0,#1]  ; llc_hci_cb
000030  2800              CMP      r0,#0
000032  d104              BNE      |L8.62|
;;;115    		platform_wake_lock_inc();
000034  f7fffffe          BL       platform_wake_lock_inc
;;;116    		llc_hci_cb.llcc.tx_busy_flag = true;
000038  4829              LDR      r0,|L8.224|
00003a  2101              MOVS     r1,#1
00003c  7041              STRB     r1,[r0,#1]
                  |L8.62|
;;;117    	}
;;;118    	WSF_CS_EXIT(cs);
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       _arch_irq_unlock_s
;;;119    
;;;120    	/* Counters */
;;;121    	switch (cmd) {
;;;122    	case HCI_ACL_TYPE:
;;;123    		hci_stats.num_data_out++;
000044  4827              LDR      r0,|L8.228|
000046  2e01              CMP      r6,#1                 ;121
000048  d00c              BEQ      |L8.100|
00004a  2e02              CMP      r6,#2                 ;121
00004c  d002              BEQ      |L8.84|
00004e  2e04              CMP      r6,#4                 ;121
000050  d10b              BNE      |L8.106|
000052  e003              B        |L8.92|
                  |L8.84|
000054  8801              LDRH     r1,[r0,#0]  ; hci_stats
000056  1c49              ADDS     r1,r1,#1
000058  8001              STRH     r1,[r0,#0]
;;;124    		break;
00005a  e006              B        |L8.106|
                  |L8.92|
;;;125    	case HCI_EVT_TYPE:
;;;126    		hci_stats.num_evt_out++;
00005c  8941              LDRH     r1,[r0,#0xa]  ; hci_stats
00005e  1c49              ADDS     r1,r1,#1
000060  8141              STRH     r1,[r0,#0xa]
;;;127    		break;
000062  e002              B        |L8.106|
                  |L8.100|
;;;128    	case HCI_CMD_TYPE:
;;;129    		hci_stats.num_cmd_out++;
000064  88c1              LDRH     r1,[r0,#6]  ; hci_stats
000066  1c49              ADDS     r1,r1,#1
000068  80c1              STRH     r1,[r0,#6]
                  |L8.106|
;;;130    		break;
;;;131    	default:
;;;132    		break;
;;;133    	}
;;;134    
;;;135    	/* Store pointer */
;;;136    	llc_hci_cb.llcc.tx.p_buf = (u8_t *)p_data;
00006a  4d1d              LDR      r5,|L8.224|
;;;137    
;;;138    	/* Calculate checksum, only for new transfers. */
;;;139    	if (llc_hci_cb.llcc.use_xfer2)
00006c  61af              STR      r7,[r5,#0x18]  ; llc_hci_cb
00006e  78e8              LDRB     r0,[r5,#3]  ; llc_hci_cb
000070  2800              CMP      r0,#0
000072  d004              BEQ      |L8.126|
;;;140    		checksum = compute_checksum(p_data, len);
000074  4638              MOV      r0,r7
000076  9903              LDR      r1,[sp,#0xc]
000078  f7fffffe          BL       compute_checksum
00007c  9000              STR      r0,[sp,#0]
                  |L8.126|
;;;141    
;;;142    	/* Round up to next multiple of 32 bits */
;;;143    	u16_t tlen = (len + 3) / 4;
00007e  9803              LDR      r0,[sp,#0xc]
;;;144    
;;;145    	p_data -= align;
;;;146    
;;;147    	llc_hci_cb.llcc.tx.type    = cmd;
000080  842e              STRH     r6,[r5,#0x20]
000082  1cc0              ADDS     r0,r0,#3              ;143
000084  0882              LSRS     r2,r0,#2              ;143
;;;148    	llc_hci_cb.llcc.tx.align   = align & 0x3;
000086  772c              STRB     r4,[r5,#0x1c]
;;;149    	llc_hci_cb.llcc.tx.len     = tlen;
000088  83ea              STRH     r2,[r5,#0x1e]
;;;150    	llc_hci_cb.llcc.tx.checksum = checksum;
00008a  9800              LDR      r0,[sp,#0]
00008c  7768              STRB     r0,[r5,#0x1d]
;;;151    	llc_hci_cb.llcc.p_tx_context = p_context;
00008e  9804              LDR      r0,[sp,#0x10]
;;;152    
;;;153    	if (llc_hci_cb.llcc.use_xfer2) {
000090  64a8              STR      r0,[r5,#0x48]  ; llc_hci_cb
000092  78e8              LDRB     r0,[r5,#3]  ; llc_hci_cb
000094  1b3f              SUBS     r7,r7,r4              ;145
000096  4621              MOV      r1,r4                 ;148
000098  2800              CMP      r0,#0
00009a  d019              BEQ      |L8.208|
;;;154    		/* Allow true length to be recovered by storing the leftover bits too */
;;;155    		llc_hci_cb.llcc.tx.align |= ((tlen * 4) - len - align) << 2;
00009c  9803              LDR      r0,[sp,#0xc]
00009e  0092              LSLS     r2,r2,#2
0000a0  1a10              SUBS     r0,r2,r0
0000a2  1b00              SUBS     r0,r0,r4
0000a4  0080              LSLS     r0,r0,#2
;;;156    
;;;157    		llc_hci_cb.llcc.tx.seq_num++;
0000a6  4c0e              LDR      r4,|L8.224|
0000a8  4301              ORRS     r1,r1,r0              ;155
0000aa  7729              STRB     r1,[r5,#0x1c]         ;155
0000ac  3420              ADDS     r4,r4,#0x20
0000ae  78e0              LDRB     r0,[r4,#3]  ; llc_hci_cb
0000b0  1c40              ADDS     r0,r0,#1
0000b2  70e0              STRB     r0,[r4,#3]
;;;158    
;;;159    		llcc_wdog_tx_ena(llc_hci_cb.llcc.wdog_timeout_ticks);
0000b4  68a8              LDR      r0,[r5,#8]  ; llc_hci_cb
0000b6  f7fffffe          BL       llcc_wdog_tx_ena
;;;160    		llcc_tx_xfer_req2_cmd(llc_hci_cb.llcc.tx.type, llc_hci_cb.llcc.tx.align,
0000ba  78e0              LDRB     r0,[r4,#3]  ; llc_hci_cb
0000bc  9000              STR      r0,[sp,#0]
0000be  8c28              LDRH     r0,[r5,#0x20]  ; llc_hci_cb
0000c0  7f6b              LDRB     r3,[r5,#0x1d]  ; llc_hci_cb
0000c2  8bea              LDRH     r2,[r5,#0x1e]  ; llc_hci_cb
0000c4  7f29              LDRB     r1,[r5,#0x1c]  ; llc_hci_cb
0000c6  b2c0              UXTB     r0,r0
0000c8  f7fffffe          BL       llcc_tx_xfer_req2_cmd
                  |L8.204|
;;;161    											llc_hci_cb.llcc.tx.len, llc_hci_cb.llcc.tx.checksum,
;;;162    											llc_hci_cb.llcc.tx.seq_num);
;;;163    	} else {
;;;164    		llcc_tx_xfer_req_cmd(cmd, llc_hci_cb.llcc.tx.align, llc_hci_cb.llcc.tx.len);
;;;165    		llcc_dma_setup_tx(p_data, llc_hci_cb.llcc.tx.len);
;;;166    	}
;;;167    }
0000cc  b005              ADD      sp,sp,#0x14
0000ce  bdf0              POP      {r4-r7,pc}
                  |L8.208|
0000d0  b2f0              UXTB     r0,r6                 ;164
0000d2  f7fffffe          BL       llcc_tx_xfer_req_cmd
0000d6  8be9              LDRH     r1,[r5,#0x1e]         ;165  ; llc_hci_cb
0000d8  4638              MOV      r0,r7                 ;165
0000da  f7fffffe          BL       llcc_dma_setup_tx
0000de  e7f5              B        |L8.204|
;;;168    /*************************************************************************************************/
                          ENDP

                  |L8.224|
                          DCD      llc_hci_cb
                  |L8.228|
                          DCD      hci_stats

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  crc8_table
000000  001d3a27          DCB      0x00,0x1d,0x3a,0x27
000004  74694e53          DCB      0x74,0x69,0x4e,0x53
000008  e8f5d2cf          DCB      0xe8,0xf5,0xd2,0xcf
00000c  9c81a6bb          DCB      0x9c,0x81,0xa6,0xbb
000010  cdd0f7ea          DCB      0xcd,0xd0,0xf7,0xea
000014  b9a4839e          DCB      0xb9,0xa4,0x83,0x9e
000018  25381f02          DCB      0x25,0x38,0x1f,0x02
00001c  514c6b76          DCB      0x51,0x4c,0x6b,0x76
000020  879abda0          DCB      0x87,0x9a,0xbd,0xa0
000024  f3eec9d4          DCB      0xf3,0xee,0xc9,0xd4
000028  6f725548          DCB      0x6f,0x72,0x55,0x48
00002c  1b06213c          DCB      0x1b,0x06,0x21,0x3c
000030  4a57706d          DCB      0x4a,0x57,0x70,0x6d
000034  3e230419          DCB      0x3e,0x23,0x04,0x19
000038  a2bf9885          DCB      0xa2,0xbf,0x98,0x85
00003c  d6cbecf1          DCB      0xd6,0xcb,0xec,0xf1
000040  130e2934          DCB      0x13,0x0e,0x29,0x34
000044  677a5d40          DCB      0x67,0x7a,0x5d,0x40
000048  fbe6c1dc          DCB      0xfb,0xe6,0xc1,0xdc
00004c  8f92b5a8          DCB      0x8f,0x92,0xb5,0xa8
000050  dec3e4f9          DCB      0xde,0xc3,0xe4,0xf9
000054  aab7908d          DCB      0xaa,0xb7,0x90,0x8d
000058  362b0c11          DCB      0x36,0x2b,0x0c,0x11
00005c  425f7865          DCB      0x42,0x5f,0x78,0x65
000060  9489aeb3          DCB      0x94,0x89,0xae,0xb3
000064  e0fddac7          DCB      0xe0,0xfd,0xda,0xc7
000068  7c61465b          DCB      0x7c,0x61,0x46,0x5b
00006c  0815322f          DCB      0x08,0x15,0x32,0x2f
000070  5944637e          DCB      0x59,0x44,0x63,0x7e
000074  2d30170a          DCB      0x2d,0x30,0x17,0x0a
000078  b1ac8b96          DCB      0xb1,0xac,0x8b,0x96
00007c  c5d8ffe2          DCB      0xc5,0xd8,0xff,0xe2
000080  263b1c01          DCB      0x26,0x3b,0x1c,0x01
000084  524f6875          DCB      0x52,0x4f,0x68,0x75
000088  ced3f4e9          DCB      0xce,0xd3,0xf4,0xe9
00008c  baa7809d          DCB      0xba,0xa7,0x80,0x9d
000090  ebf6d1cc          DCB      0xeb,0xf6,0xd1,0xcc
000094  9f82a5b8          DCB      0x9f,0x82,0xa5,0xb8
000098  031e3924          DCB      0x03,0x1e,0x39,0x24
00009c  776a4d50          DCB      0x77,0x6a,0x4d,0x50
0000a0  a1bc9b86          DCB      0xa1,0xbc,0x9b,0x86
0000a4  d5c8eff2          DCB      0xd5,0xc8,0xef,0xf2
0000a8  4954736e          DCB      0x49,0x54,0x73,0x6e
0000ac  3d20071a          DCB      0x3d,0x20,0x07,0x1a
0000b0  6c71564b          DCB      0x6c,0x71,0x56,0x4b
0000b4  1805223f          DCB      0x18,0x05,0x22,0x3f
0000b8  8499bea3          DCB      0x84,0x99,0xbe,0xa3
0000bc  f0edcad7          DCB      0xf0,0xed,0xca,0xd7
0000c0  35280f12          DCB      0x35,0x28,0x0f,0x12
0000c4  415c7b66          DCB      0x41,0x5c,0x7b,0x66
0000c8  ddc0e7fa          DCB      0xdd,0xc0,0xe7,0xfa
0000cc  a9b4938e          DCB      0xa9,0xb4,0x93,0x8e
0000d0  f8e5c2df          DCB      0xf8,0xe5,0xc2,0xdf
0000d4  8c91b6ab          DCB      0x8c,0x91,0xb6,0xab
0000d8  100d2a37          DCB      0x10,0x0d,0x2a,0x37
0000dc  64795e43          DCB      0x64,0x79,0x5e,0x43
0000e0  b2af8895          DCB      0xb2,0xaf,0x88,0x95
0000e4  c6dbfce1          DCB      0xc6,0xdb,0xfc,0xe1
0000e8  5a47607d          DCB      0x5a,0x47,0x60,0x7d
0000ec  2e331409          DCB      0x2e,0x33,0x14,0x09
0000f0  7f624558          DCB      0x7f,0x62,0x45,0x58
0000f4  0b16312c          DCB      0x0b,0x16,0x31,0x2c
0000f8  978aadb0          DCB      0x97,0x8a,0xad,0xb0
0000fc  e3fed9c4          DCB      0xe3,0xfe,0xd9,0xc4

                          AREA ||.patch_hw_code||, DATA, ALIGN=2

                  __code_patch_llcc_rx_cmd_valid_p1
                  ||__tagsym$$used||
                          DCD      0x46c04cb6
                          DCD      0x0000ea2c
                  __code_patch_llcc_rx_cmd_valid_p2
                  |symbol_number.73|
                          DCD      0x46c09000
                          DCD      0x0000ea30
                  __code_patch_llcc_rx_cmd_valid_p3
                  |symbol_number.75|
                          DCD      0x78e39101
                          DCD      0x0000ea34
                  __code_patch_llcc_rx_dmal_done_p1
                  |symbol_number.77|
                          DCD      0x480db403
                          DCD      0x0000ede4
                  __code_patch_llcc_rx_dmal_done_p2
                  |symbol_number.79|
                          DCD      0xbd019001
                          DCD      0x0000ede8
                  __code_patch_llcc_rx_dmal_done_p3
                  |symbol_number.81|
                          DCD      p_llcc_rx_dmal_done
                          DCD      0x0000ee1c
                  __code_patch_hci_vs_read_done
                  |symbol_number.83|
                          DCD      hci_vs_read_done_new
                          DCD      0x00026bf4

                          AREA ||.patch_hw_func||, DATA, ALIGN=2

                  __function_patch_hci_tx_failure
                  |symbol_number.85|
                          DCD      hci_tx_failure_new
                          DCD      hci_tx_failure
