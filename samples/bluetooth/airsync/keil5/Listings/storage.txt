; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\storage.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\storage.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\storage.crf ..\..\..\..\subsys\bluetooth\host\storage.c]
                          THUMB

                          AREA ||i.bt_addr_le_cmp||, CODE, READONLY, ALIGN=1

                  bt_addr_le_cmp PROC
;;;48     
;;;49     static inline int bt_addr_le_cmp(const bt_addr_le_t *a, const bt_addr_le_t *b)
000000  b510              PUSH     {r4,lr}
;;;50     {
;;;51     	return memcmp(a, b, sizeof(*a));
000002  2207              MOVS     r2,#7
000004  f7fffffe          BL       memcmp
;;;52     }
000008  bd10              POP      {r4,pc}
;;;53     
                          ENDP


                          AREA ||i.bt_addr_le_copy||, CODE, READONLY, ALIGN=1

                  bt_addr_le_copy PROC
;;;58     
;;;59     static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
000000  b510              PUSH     {r4,lr}
;;;60     {
;;;61     	memcpy(dst, src, sizeof(*dst));
000002  2207              MOVS     r2,#7
000004  f7fffffe          BL       __aeabi_memcpy
;;;62     }
000008  bd10              POP      {r4,pc}
;;;63     
                          ENDP


                          AREA ||i.find_bt_keys||, CODE, READONLY, ALIGN=2

                  find_bt_keys PROC
;;;155    static int removeCnt;
;;;156    struct bt_keys *find_bt_keys(const bt_addr_le_t *addr, u16_t key,
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;157    			enum storage_access access)
;;;158    {
000002  4605              MOV      r5,r0
000004  b082              SUB      sp,sp,#8
;;;159    	int i;
;;;160    	struct bt_keys *keys = NULL;
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  7828              LDRB     r0,[r5,#0]
;;;161    
;;;162    	if (!bt_addr_le_is_rpa(addr)) {
;;;163    		for (i = 0; i < key_pool_count; i++) {
;;;164    			if (!bt_addr_le_cmp(&storage_key_pool[i].addr, addr)) {
00000c  4e38              LDR      r6,|L3.240|
00000e  2801              CMP      r0,#1
000010  d127              BNE      |L3.98|
000012  79a8              LDRB     r0,[r5,#6]            ;158
000014  0980              LSRS     r0,r0,#6              ;158
000016  2801              CMP      r0,#1                 ;158
000018  d000              BEQ      |L3.28|
00001a  2000              MOVS     r0,#0                 ;158
                  |L3.28|
00001c  2800              CMP      r0,#0                 ;162
00001e  d020              BEQ      |L3.98|
;;;165    				keys = &storage_key_pool[i];
;;;166    				return keys;
;;;167    			}
;;;168    		}
;;;169    	} else {
;;;170    		for (i = 0; i < key_pool_count; i++) {
000020  2400              MOVS     r4,#0
                  |L3.34|
;;;171    			if (!(storage_key_pool[i].keys & BT_KEYS_IRK)) {
000022  2090              MOVS     r0,#0x90
000024  4360              MULS     r0,r4,r0
000026  1987              ADDS     r7,r0,r6
000028  7b38              LDRB     r0,[r7,#0xc]
00002a  0780              LSLS     r0,r0,#30
00002c  d52a              BPL      |L3.132|
;;;172    				continue;
;;;173    			}
;;;174    
;;;175    			if (!bt_addr_cmp(&addr->a, &storage_key_pool[i].irk.rpa)) {
00002e  4639              MOV      r1,r7
000030  1c68              ADDS     r0,r5,#1
000032  3140              ADDS     r1,r1,#0x40
000034  2206              MOVS     r2,#6
000036  f7fffffe          BL       memcmp
00003a  2800              CMP      r0,#0
00003c  d01e              BEQ      |L3.124|
;;;176    				return &storage_key_pool[i];
;;;177    			}
;;;178    
;;;179    			if (bt_rpa_irk_matches(storage_key_pool[i].irk.val, &addr->a)) {
00003e  4638              MOV      r0,r7
000040  3030              ADDS     r0,r0,#0x30
000042  1c69              ADDS     r1,r5,#1
000044  f7fffffe          BL       bt_rpa_irk_matches
000048  2800              CMP      r0,#0
00004a  d01b              BEQ      |L3.132|
;;;180    				bt_addr_copy(&storage_key_pool[i].irk.rpa, &addr->a);
00004c  2090              MOVS     r0,#0x90
00004e  4344              MULS     r4,r0,r4
000050  19a0              ADDS     r0,r4,r6
000052  1c69              ADDS     r1,r5,#1
000054  2206              MOVS     r2,#6
000056  3040              ADDS     r0,r0,#0x40
000058  f7fffffe          BL       __aeabi_memcpy
00005c  4638              MOV      r0,r7
                  |L3.94|
;;;181    				return &storage_key_pool[i];
;;;182    			}
;;;183    		}
;;;184    
;;;185    	}
;;;186    
;;;187    	if ((keys == NULL) && (access == STORAGE_WRITE)) {
;;;188    		for (i = 0; i < key_pool_count; i++) {
;;;189    			if (!bt_addr_le_cmp(&storage_key_pool[i].addr, BT_ADDR_LE_ANY)) {
;;;190    				keys = &storage_key_pool[i];
;;;191    				bt_addr_le_copy(&keys->addr, addr);
;;;192    				return keys;
;;;193    			}
;;;194    		}
;;;195    		SYS_LOG_WRN("No Key Space In storage key pool");
;;;196    
;;;197    		keys = &storage_key_pool[(removeCnt++)%key_pool_count];
;;;198    		bt_addr_le_copy(&keys->addr, addr);
;;;199    		return keys;
;;;200    	}
;;;201    
;;;202    	return NULL;
;;;203    }
00005e  b005              ADD      sp,sp,#0x14
000060  bdf0              POP      {r4-r7,pc}
                  |L3.98|
000062  2400              MOVS     r4,#0                 ;163
                  |L3.100|
000064  2090              MOVS     r0,#0x90              ;164
000066  4360              MULS     r0,r4,r0              ;164
000068  1980              ADDS     r0,r0,r6              ;164
00006a  4629              MOV      r1,r5                 ;164
00006c  f7fffffe          BL       bt_addr_le_cmp
000070  2800              CMP      r0,#0                 ;164
000072  d003              BEQ      |L3.124|
000074  1c64              ADDS     r4,r4,#1              ;164
000076  2c02              CMP      r4,#2                 ;163
000078  dbf4              BLT      |L3.100|
00007a  e006              B        |L3.138|
                  |L3.124|
00007c  2090              MOVS     r0,#0x90              ;176
00007e  4344              MULS     r4,r0,r4              ;176
000080  19a0              ADDS     r0,r4,r6              ;176
000082  e7ec              B        |L3.94|
                  |L3.132|
000084  1c64              ADDS     r4,r4,#1
000086  2c02              CMP      r4,#2                 ;170
000088  dbcb              BLT      |L3.34|
                  |L3.138|
00008a  9800              LDR      r0,[sp,#0]            ;187
00008c  2800              CMP      r0,#0                 ;187
00008e  d102              BNE      |L3.150|
000090  9804              LDR      r0,[sp,#0x10]         ;187
000092  2801              CMP      r0,#1                 ;187
000094  d001              BEQ      |L3.154|
                  |L3.150|
000096  2000              MOVS     r0,#0                 ;202
000098  e7e1              B        |L3.94|
                  |L3.154|
00009a  2400              MOVS     r4,#0                 ;188
00009c  4627              MOV      r7,r4                 ;188
                  |L3.158|
00009e  2090              MOVS     r0,#0x90              ;189
0000a0  4360              MULS     r0,r4,r0              ;189
0000a2  9700              STR      r7,[sp,#0]            ;189
0000a4  1980              ADDS     r0,r0,r6              ;189
0000a6  4669              MOV      r1,sp                 ;189
0000a8  9701              STR      r7,[sp,#4]            ;189
0000aa  f7fffffe          BL       bt_addr_le_cmp
0000ae  2800              CMP      r0,#0                 ;189
0000b0  d015              BEQ      |L3.222|
0000b2  1c64              ADDS     r4,r4,#1              ;189
0000b4  2c02              CMP      r4,#2                 ;188
0000b6  dbf2              BLT      |L3.158|
0000b8  a30e              ADR      r3,|L3.244|
0000ba  a20e              ADR      r2,|L3.244|
0000bc  a10e              ADR      r1,|L3.248|
0000be  a010              ADR      r0,|L3.256|
0000c0  f7fffffe          BL       printk
0000c4  4919              LDR      r1,|L3.300|
0000c6  2390              MOVS     r3,#0x90              ;197
0000c8  6808              LDR      r0,[r1,#0]            ;197  ; removeCnt
0000ca  0fc2              LSRS     r2,r0,#31             ;197
0000cc  1812              ADDS     r2,r2,r0              ;197
0000ce  0852              LSRS     r2,r2,#1              ;197
0000d0  0052              LSLS     r2,r2,#1              ;197
0000d2  1a82              SUBS     r2,r0,r2              ;197
0000d4  435a              MULS     r2,r3,r2              ;197
0000d6  1994              ADDS     r4,r2,r6              ;197
0000d8  1c40              ADDS     r0,r0,#1              ;197
0000da  6008              STR      r0,[r1,#0]            ;199  ; removeCnt
0000dc  e002              B        |L3.228|
                  |L3.222|
0000de  2090              MOVS     r0,#0x90              ;190
0000e0  4344              MULS     r4,r0,r4              ;190
0000e2  19a4              ADDS     r4,r4,r6              ;190
                  |L3.228|
0000e4  4629              MOV      r1,r5                 ;198
0000e6  4620              MOV      r0,r4                 ;198
0000e8  f7fffffe          BL       bt_addr_le_copy
0000ec  4620              MOV      r0,r4                 ;199
0000ee  e7b6              B        |L3.94|
;;;204    
                          ENDP

                  |L3.240|
                          DCD      ||.bss||
                  |L3.244|
0000f4  00                DCB      0
0000f5  00                DCB      0
0000f6  00                DCB      0
0000f7  00                DCB      0
                  |L3.248|
0000f8  62745f68          DCB      "bt_host",0
0000fc  6f737400
                  |L3.256|
000100  5b25735d          DCB      "[%s] %sNo Key Space In storage key pool%s\n",0
000104  2025734e
000108  6f204b65
00010c  79205370
000110  61636520
000114  496e2073
000118  746f7261
00011c  6765206b
000120  65792070
000124  6f6f6c25
000128  730a00  
00012b  00                DCB      0
                  |L3.300|
                          DCD      ||.data||

                          AREA ||i.storage_clear||, CODE, READONLY, ALIGN=1

                  storage_clear PROC
;;;351    
;;;352    static int storage_clear(const bt_addr_le_t *addr)
000000  b510              PUSH     {r4,lr}
;;;353    {
;;;354    	int err = 0;
000002  2400              MOVS     r4,#0
;;;355    	struct bt_keys *keys = NULL;
;;;356    
;;;357    	if (addr != NULL)
000004  2800              CMP      r0,#0
000006  d008              BEQ      |L4.26|
;;;358    		keys = find_bt_keys(addr, 0, STORAGE_READ);
000008  2200              MOVS     r2,#0
00000a  4611              MOV      r1,r2
00000c  f7fffffe          BL       find_bt_keys
;;;359    
;;;360    	if (keys)
000010  2800              CMP      r0,#0
000012  d002              BEQ      |L4.26|
;;;361    		memset(keys, 0, sizeof(struct bt_keys));
000014  2190              MOVS     r1,#0x90
000016  f7fffffe          BL       __aeabi_memclr4
                  |L4.26|
;;;362    
;;;363    	return err;
00001a  4620              MOV      r0,r4
;;;364    }
00001c  bd10              POP      {r4,pc}
;;;365    
                          ENDP


                          AREA ||i.storage_init||, CODE, READONLY, ALIGN=2

                  storage_init PROC
;;;365    
;;;366    static int storage_init(struct device *unused)
000000  b510              PUSH     {r4,lr}
;;;367    {
;;;368    	int i;
;;;369    	static const struct bt_storage storage = {
;;;370    		.read  = storage_read,
;;;371    		.write = storage_write,
;;;372    		.clear = storage_clear
;;;373    	};
;;;374    	storage_local_bt_addr.type = BT_ADDR_LE_RANDOM;
000002  480d              LDR      r0,|L5.56|
000004  2101              MOVS     r1,#1
000006  7001              STRB     r1,[r0,#0]
;;;375    	storage_local_bt_addr.a.val[0] = 0xAA;
000008  21aa              MOVS     r1,#0xaa
00000a  7041              STRB     r1,[r0,#1]
;;;376    	storage_local_bt_addr.a.val[1] = 0xBB;
00000c  21bb              MOVS     r1,#0xbb
00000e  7081              STRB     r1,[r0,#2]
;;;377    	storage_local_bt_addr.a.val[2] = 0xCC;
000010  21cc              MOVS     r1,#0xcc
000012  70c1              STRB     r1,[r0,#3]
;;;378    	storage_local_bt_addr.a.val[3] = 0xDD;
000014  21dd              MOVS     r1,#0xdd
000016  7101              STRB     r1,[r0,#4]
;;;379    	storage_local_bt_addr.a.val[4] = 0xEE;
000018  21ee              MOVS     r1,#0xee
00001a  7141              STRB     r1,[r0,#5]
;;;380    	storage_local_bt_addr.a.val[5] = 0xFF;
00001c  21ff              MOVS     r1,#0xff
00001e  7181              STRB     r1,[r0,#6]
;;;381    	for (i = 0; i < 16; i++)
;;;382    		storage_local_irk[i] = i;
000020  4906              LDR      r1,|L5.60|
000022  2000              MOVS     r0,#0                 ;381
                  |L5.36|
000024  5408              STRB     r0,[r1,r0]
000026  1c40              ADDS     r0,r0,#1
000028  2810              CMP      r0,#0x10              ;381
00002a  dbfb              BLT      |L5.36|
;;;383    	bt_storage_register(&storage);
00002c  4804              LDR      r0,|L5.64|
00002e  f7fffffe          BL       bt_storage_register
;;;384    
;;;385    	return 0;
000032  2000              MOVS     r0,#0
;;;386    }
000034  bd10              POP      {r4,pc}
;;;387    #endif
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      ||.data||+0x4
                  |L5.60|
                          DCD      ||.bss||+0x120
                  |L5.64|
                          DCD      ||.constdata||

                          AREA ||i.storage_read||, CODE, READONLY, ALIGN=2

                  storage_read PROC
;;;204    
;;;205    static ssize_t storage_read(const bt_addr_le_t *addr, u16_t key, void *data,
000000  b5f8              PUSH     {r3-r7,lr}
;;;206    			    size_t length)
;;;207    {
;;;208    	ssize_t ret = 0;
000002  2500              MOVS     r5,#0
000004  4616              MOV      r6,r2                 ;207
000006  460f              MOV      r7,r1                 ;207
;;;209    	struct bt_keys *keys = NULL;
000008  462c              MOV      r4,r5
;;;210    
;;;211    	if (addr != NULL) {
00000a  2800              CMP      r0,#0
00000c  d003              BEQ      |L6.22|
;;;212    		keys = find_bt_keys(addr, key, STORAGE_READ);
00000e  2200              MOVS     r2,#0
000010  f7fffffe          BL       find_bt_keys
000014  4604              MOV      r4,r0
                  |L6.22|
;;;213    	}
;;;214    
;;;215    	switch (key) {
000016  003b              MOVS     r3,r7
000018  f7fffffe          BL       __ARM_common_switch8
00001c  0a060c39          DCB      0x0a,0x06,0x0c,0x39
000020  122e391e          DCB      0x12,0x2e,0x39,0x1e
000024  252e3139          DCB      0x25,0x2e,0x31,0x39
;;;216    	case BT_STORAGE_ID_ADDR:
;;;217    	{
;;;218    		bt_addr_le_copy(data, &storage_local_bt_addr);
000028  491a              LDR      r1,|L6.148|
00002a  4630              MOV      r0,r6
00002c  f7fffffe          BL       bt_addr_le_copy
;;;219    		ret = sizeof(storage_local_bt_addr);
000030  2507              MOVS     r5,#7
;;;220    	}
;;;221    	break;
000032  e02c              B        |L6.142|
;;;222    	case BT_STORAGE_LOCAL_IRK:
;;;223    	{
;;;224    		memcpy(data, &storage_local_irk, 16);
000034  2210              MOVS     r2,#0x10
000036  4918              LDR      r1,|L6.152|
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       __aeabi_memcpy
;;;225    		ret = 16;
00003e  2510              MOVS     r5,#0x10
;;;226    	}
;;;227    	case BT_STORAGE_SLAVE_LTK:
;;;228    	{
;;;229    		if (keys) {
000040  2c00              CMP      r4,#0
000042  d024              BEQ      |L6.142|
;;;230    			ret = sizeof(keys->slave_ltk);
000044  2520              MOVS     r5,#0x20
;;;231    			memcpy(data, &keys->slave_ltk, ret);
000046  4621              MOV      r1,r4
000048  462a              MOV      r2,r5
00004a  3170              ADDS     r1,r1,#0x70
00004c  e01c              B        |L6.136|
                  |L6.78|
;;;232    		}
;;;233    	}
;;;234    	break;
;;;235    	case BT_STORAGE_LTK:
;;;236    	{
;;;237    		if (keys) {
;;;238    			ret = sizeof(keys->ltk);
00004e  2520              MOVS     r5,#0x20
;;;239    			memcpy(data, &keys->ltk, ret);
000050  4621              MOV      r1,r4
000052  462a              MOV      r2,r5
000054  3110              ADDS     r1,r1,#0x10
000056  e017              B        |L6.136|
;;;240    		}
;;;241    	}
;;;242    	break;
;;;243    	case BT_STORAGE_LOCAL_CSRK:
;;;244    	{
;;;245    		if (keys) {
000058  2c00              CMP      r4,#0
00005a  d018              BEQ      |L6.142|
;;;246    			ret = sizeof(keys->local_csrk);
00005c  2514              MOVS     r5,#0x14
;;;247    			memcpy(data, &keys->local_csrk, ret);
00005e  4621              MOV      r1,r4
000060  462a              MOV      r2,r5
000062  3148              ADDS     r1,r1,#0x48
000064  e010              B        |L6.136|
;;;248    		}
;;;249    	}
;;;250    	break;
;;;251    	case BT_STORAGE_REMOTE_CSRK:
;;;252    	{
;;;253    		if (keys) {
000066  2c00              CMP      r4,#0
000068  d011              BEQ      |L6.142|
;;;254    			ret = sizeof(keys->remote_csrk);
;;;255    			memcpy(data, &keys->remote_csrk, ret);
00006a  4621              MOV      r1,r4
00006c  2214              MOVS     r2,#0x14              ;254
00006e  315c              ADDS     r1,r1,#0x5c
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       __aeabi_memcpy
000076  e7ea              B        |L6.78|
;;;256    		}
;;;257    	}
;;;258    	case BT_STORAGE_LTK_P256:
;;;259    	{
;;;260    		if (keys) {
000078  2c00              CMP      r4,#0
00007a  d1e8              BNE      |L6.78|
00007c  e007              B        |L6.142|
;;;261    			ret = sizeof(keys->ltk);
;;;262    			memcpy(data, &keys->ltk, ret);
;;;263    		}
;;;264    	}
;;;265    	break;
;;;266    	case BT_STORAGE_BT_KEYS:
;;;267    	{
;;;268    		if (keys) {
00007e  2c00              CMP      r4,#0
000080  d005              BEQ      |L6.142|
;;;269    			ret = sizeof(struct bt_keys);
000082  2590              MOVS     r5,#0x90
;;;270    			memcpy(data, keys, ret);
000084  462a              MOV      r2,r5
000086  4621              MOV      r1,r4
                  |L6.136|
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       __aeabi_memcpy
                  |L6.142|
;;;271    		}
;;;272    	}
;;;273    	break;
;;;274    	}
;;;275    	return ret;
00008e  4628              MOV      r0,r5
;;;276    }
000090  bdf8              POP      {r3-r7,pc}
;;;277    
                          ENDP

000092  0000              DCW      0x0000
                  |L6.148|
                          DCD      ||.data||+0x4
                  |L6.152|
                          DCD      ||.bss||+0x120

                          AREA ||i.storage_write||, CODE, READONLY, ALIGN=2

                  storage_write PROC
;;;277    
;;;278    static ssize_t storage_write(const bt_addr_le_t *addr, u16_t key,
000000  b5ff              PUSH     {r0-r7,lr}
;;;279    			     const void *data, size_t length)
;;;280    {
;;;281    	ssize_t ret = 0;
000002  2500              MOVS     r5,#0
000004  b081              SUB      sp,sp,#4              ;280
000006  461e              MOV      r6,r3                 ;280
000008  460f              MOV      r7,r1                 ;280
;;;282    	struct bt_keys *keys = NULL;
00000a  462c              MOV      r4,r5
;;;283    
;;;284    	if (addr != NULL) {
00000c  2800              CMP      r0,#0
00000e  d003              BEQ      |L7.24|
;;;285    		keys = find_bt_keys(addr, key, STORAGE_WRITE);
000010  2201              MOVS     r2,#1
000012  f7fffffe          BL       find_bt_keys
000016  4604              MOV      r4,r0
                  |L7.24|
;;;286    	}
;;;287    
;;;288    	switch (key) {
000018  003b              MOVS     r3,r7
00001a  f7fffffe          BL       __ARM_common_switch8
00001e  0a06              DCB      0x0a,0x06
000020  0c39122e          DCB      0x0c,0x39,0x12,0x2e
000024  391e252e          DCB      0x39,0x1e,0x25,0x2e
000028  3139              DCB      0x31,0x39
;;;289    	case BT_STORAGE_ID_ADDR:
;;;290    	{
;;;291    		bt_addr_le_copy(&storage_local_bt_addr, data);
00002a  481b              LDR      r0,|L7.152|
00002c  9903              LDR      r1,[sp,#0xc]
00002e  f7fffffe          BL       bt_addr_le_copy
;;;292    		ret = sizeof(storage_local_bt_addr);
000032  2507              MOVS     r5,#7
;;;293    	}
;;;294    	break;
000034  e02c              B        |L7.144|
;;;295    	case BT_STORAGE_LOCAL_IRK:
;;;296    	{
;;;297    		memcpy(&storage_local_irk, data, length);
000036  4632              MOV      r2,r6
000038  4818              LDR      r0,|L7.156|
00003a  9903              LDR      r1,[sp,#0xc]
00003c  f7fffffe          BL       __aeabi_memcpy
;;;298    		ret = length;
000040  4635              MOV      r5,r6
;;;299    	}
;;;300    	case BT_STORAGE_SLAVE_LTK:
;;;301    	{
;;;302    		if (keys) {
000042  2c00              CMP      r4,#0
000044  d024              BEQ      |L7.144|
;;;303    			memcpy(&keys->slave_ltk, data, length);
000046  4620              MOV      r0,r4
000048  4632              MOV      r2,r6
00004a  3070              ADDS     r0,r0,#0x70
;;;304    			ret = length;
00004c  9903              LDR      r1,[sp,#0xc]
00004e  e01c              B        |L7.138|
                  |L7.80|
;;;305    		}
;;;306    	}
;;;307    	break;
;;;308    	case BT_STORAGE_LTK:
;;;309    	{
;;;310    		if (keys) {
;;;311    			memcpy(&keys->ltk, data, length);
000050  4620              MOV      r0,r4
000052  4632              MOV      r2,r6
000054  3010              ADDS     r0,r0,#0x10
;;;312    			ret = length;
000056  9903              LDR      r1,[sp,#0xc]
000058  e017              B        |L7.138|
;;;313    		}
;;;314    	}
;;;315    	break;
;;;316    	case BT_STORAGE_LOCAL_CSRK:
;;;317    	{
;;;318    		if (keys) {
00005a  2c00              CMP      r4,#0
00005c  d018              BEQ      |L7.144|
;;;319    			memcpy(&keys->local_csrk, data, length);
00005e  4620              MOV      r0,r4
000060  4632              MOV      r2,r6
000062  3048              ADDS     r0,r0,#0x48
;;;320    			ret = length;
000064  9903              LDR      r1,[sp,#0xc]
000066  e010              B        |L7.138|
;;;321    		}
;;;322    	}
;;;323    	break;
;;;324    	case BT_STORAGE_REMOTE_CSRK:
;;;325    	{
;;;326    		if (keys) {
000068  2c00              CMP      r4,#0
00006a  d011              BEQ      |L7.144|
;;;327    			memcpy(&keys->remote_csrk, data, length);
00006c  4620              MOV      r0,r4
00006e  4632              MOV      r2,r6
000070  305c              ADDS     r0,r0,#0x5c
000072  9903              LDR      r1,[sp,#0xc]
000074  f7fffffe          BL       __aeabi_memcpy
;;;328    			ret = length;
000078  e7ea              B        |L7.80|
;;;329    		}
;;;330    	}
;;;331    	case BT_STORAGE_LTK_P256:
;;;332    	{
;;;333    		if (keys) {
00007a  2c00              CMP      r4,#0
00007c  d1e8              BNE      |L7.80|
00007e  e007              B        |L7.144|
;;;334    			memcpy(&keys->ltk, data, length);
;;;335    			ret = length;
;;;336    		}
;;;337    	}
;;;338    	break;
;;;339    	case BT_STORAGE_BT_KEYS:
;;;340    	{
;;;341    		if (keys) {
000080  2c00              CMP      r4,#0
000082  d005              BEQ      |L7.144|
;;;342    			memcpy(keys, data, length);
000084  4632              MOV      r2,r6
000086  4620              MOV      r0,r4
000088  9903              LDR      r1,[sp,#0xc]
                  |L7.138|
00008a  f7fffffe          BL       __aeabi_memcpy
;;;343    			ret = length;
00008e  4635              MOV      r5,r6
                  |L7.144|
;;;344    		}
;;;345    	}
;;;346    	break;
;;;347    	}
;;;348    
;;;349    	return ret;
000090  4628              MOV      r0,r5
;;;350    }
000092  b005              ADD      sp,sp,#0x14
000094  bdf0              POP      {r4-r7,pc}
;;;351    
                          ENDP

000096  0000              DCW      0x0000
                  |L7.152|
                          DCD      ||.data||+0x4
                  |L7.156|
                          DCD      ||.bss||+0x120

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  storage_key_pool
                          %        288
                  storage_local_irk
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  storage
                          DCD      storage_read
                          DCD      storage_write
                          DCD      storage_clear

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  removeCnt
                          DCD      0x00000000
                  storage_local_bt_addr
                          DCD      0x00000000
000008  000000            DCB      0x00,0x00,0x00

                          AREA ||.devconfig.init||, DATA, ALIGN=2

                  __config_sys_init_storage_init0
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      storage_init
                          DCD      device_pm_control_nop
                          DCD      0x00000000

                          AREA ||.init_APPLICATION40||, DATA, ALIGN=2

                  __device_sys_init_storage_init0
                  |symbol_number.74|
                          DCD      __config_sys_init_storage_init0
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L50.16|
00000e  461d              MOV      r5,r3
                  |L50.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP

