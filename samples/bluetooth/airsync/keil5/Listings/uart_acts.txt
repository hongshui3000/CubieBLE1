; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\uart_acts.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\uart_acts.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\uart_acts.crf ..\..\..\..\drivers\uart\uart_acts.c]
                          THUMB

                          AREA ||.init.once.text."..\\..\\..\\..\\drivers\\uart\\uart_acts.c".0||, CODE, READONLY, ALIGN=2

                  uart_acts_irq_config_0 PROC
;;;72     
;;;73     static __init_once_text void uart_acts_irq_config_0(struct device *port)
000000  b510              PUSH     {r4,lr}
;;;74     {
;;;75     	IRQ_CONNECT(UART0_IRQn,
000002  4808              LDR      r0,|L1.36|
000004  4906              LDR      r1,|L1.32|
000006  6781              STR      r1,[r0,#0x78]  ; _sw_isr_table
000008  4907              LDR      r1,|L1.40|
00000a  67c1              STR      r1,[r0,#0x7c]  ; _sw_isr_table
00000c  2200              MOVS     r2,#0
00000e  4611              MOV      r1,r2
000010  200f              MOVS     r0,#0xf
000012  f7fffffe          BL       _irq_priority_set
;;;76     		    0,
;;;77     		    uart_acts_isr, DEVICE_GET(uart_acts_0),
;;;78     		    0);
;;;79     	irq_enable(UART0_IRQn);
000016  200f              MOVS     r0,#0xf
000018  f7fffffe          BL       _arch_irq_enable
;;;80     }
00001c  bd10              POP      {r4,pc}
;;;81     #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
                          DCD      ||.init_PRE_KERNEL_150||
                  |L1.36|
                          DCD      _sw_isr_table
                  |L1.40|
                          DCD      uart_acts_isr

                          AREA ||i.uart_acts_resume_device_from_suspend||, CODE, READONLY, ALIGN=1

                  uart_acts_resume_device_from_suspend PROC
;;;26     
;;;27     int uart_acts_resume_device_from_suspend(struct device *dev)
000000  b570              PUSH     {r4-r6,lr}
;;;28     {
;;;29     	struct uart_acts_dev_data_t *dev_data = DEV_DATA(dev);
;;;30     
;;;31     	acts_reset_peripheral(dev_data->reset_id);
000002  6884              LDR      r4,[r0,#8]
000004  4605              MOV      r5,r0                 ;28
000006  68a0              LDR      r0,[r4,#8]
000008  f7fffffe          BL       acts_reset_peripheral
;;;32     	acts_clock_peripheral_enable(dev_data->clock_id);
00000c  6860              LDR      r0,[r4,#4]
00000e  f7fffffe          BL       acts_clock_peripheral_enable
;;;33     
;;;34     	sys_write32(dev_data->baud_reg_val, DEV_CFG(dev)->regs + UART_BAUDRATE);
000012  6828              LDR      r0,[r5,#0]
000014  6921              LDR      r1,[r4,#0x10]
000016  68c0              LDR      r0,[r0,#0xc]
000018  6800              LDR      r0,[r0,#0]
00001a  6101              STR      r1,[r0,#0x10]
;;;35     	sys_write32(dev_data->ctl_reg_val, DEV_CFG(dev)->regs + UART_CTRL);
00001c  6829              LDR      r1,[r5,#0]
00001e  68e0              LDR      r0,[r4,#0xc]
000020  68c9              LDR      r1,[r1,#0xc]
000022  6809              LDR      r1,[r1,#0]
000024  6008              STR      r0,[r1,#0]
;;;36     
;;;37     	return 0;
000026  2000              MOVS     r0,#0
;;;38     }
000028  bd70              POP      {r4-r6,pc}
;;;39     
                          ENDP


                          AREA ||i.uart_acts_suspend_device||, CODE, READONLY, ALIGN=1

                  uart_acts_suspend_device PROC
;;;11     
;;;12     int uart_acts_suspend_device(struct device *dev)
000000  b510              PUSH     {r4,lr}
;;;13     {
;;;14     	struct uart_acts_dev_data_t *dev_data = DEV_DATA(dev);
;;;15     
;;;16     	/* wait tx not busy
;;;17     	 * while((sys_read32(DEV_CFG(dev)->regs + UART_STA) & (0x1 << UART_STA_UTBB)) != 0)
;;;18     	 */
;;;19     
;;;20     	dev_data->ctl_reg_val = sys_read32(DEV_CFG(dev)->regs + UART_CTRL);
000002  6802              LDR      r2,[r0,#0]
000004  6881              LDR      r1,[r0,#8]
000006  68d2              LDR      r2,[r2,#0xc]
000008  6812              LDR      r2,[r2,#0]
00000a  6812              LDR      r2,[r2,#0]
;;;21     	dev_data->baud_reg_val = sys_read32(DEV_CFG(dev)->regs + UART_BAUDRATE);
00000c  60ca              STR      r2,[r1,#0xc]
00000e  6800              LDR      r0,[r0,#0]
000010  68c0              LDR      r0,[r0,#0xc]
000012  6800              LDR      r0,[r0,#0]
000014  6900              LDR      r0,[r0,#0x10]
;;;22     	acts_clock_peripheral_disable(dev_data->clock_id);
000016  6108              STR      r0,[r1,#0x10]
000018  6848              LDR      r0,[r1,#4]
00001a  f7fffffe          BL       acts_clock_peripheral_disable
;;;23     
;;;24     	return 0;
00001e  2000              MOVS     r0,#0
;;;25     }
000020  bd10              POP      {r4,pc}
;;;26     
                          ENDP


                          AREA ||i.uart_device_ctrl||, CODE, READONLY, ALIGN=1

                  uart_device_ctrl PROC
;;;39     
;;;40     static int uart_device_ctrl(struct device *dev, u32_t ctrl_command,
000000  b510              PUSH     {r4,lr}
;;;41     			   void *context)
;;;42     {
;;;43     	if (ctrl_command == DEVICE_PM_SET_POWER_STATE) {
000002  2901              CMP      r1,#1
000004  d104              BNE      |L4.16|
;;;44     		if (*((u32_t *)context) == DEVICE_PM_SUSPEND_STATE) {
000006  6811              LDR      r1,[r2,#0]
000008  2903              CMP      r1,#3
00000a  d003              BEQ      |L4.20|
;;;45     			return uart_acts_suspend_device(dev);
;;;46     		} else if (*((u32_t *)context) == DEVICE_PM_ACTIVE_STATE) {
00000c  2901              CMP      r1,#1
00000e  d004              BEQ      |L4.26|
                  |L4.16|
;;;47     			return uart_acts_resume_device_from_suspend(dev);
;;;48     		}
;;;49     	}
;;;50     
;;;51     	return 0;
000010  2000              MOVS     r0,#0
;;;52     }
000012  bd10              POP      {r4,pc}
                  |L4.20|
000014  f7fffffe          BL       uart_acts_suspend_device
000018  bd10              POP      {r4,pc}
                  |L4.26|
00001a  f7fffffe          BL       uart_acts_resume_device_from_suspend
00001e  bd10              POP      {r4,pc}
;;;53     
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  uart_acts_dev_cfg_0
                          DCD      0x4000d000
                          DCD      0x00000000
                          DCD      uart_acts_irq_config_0

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  55415254          DCB      0x55,0x41,0x52,0x54
000004  5f3000            DCB      0x5f,0x30,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  uart_acts_dev_data_0
                          DCD      0x0001c200
                          DCD      0x00000005
                          DCD      0x00000005
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.devconfig.init||, DATA, ALIGN=2

                  __config_uart_acts_0
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||
                          DCD      uart_acts_init
                          DCD      uart_device_ctrl
                          DCD      uart_acts_dev_cfg_0

                          AREA ||.init_PRE_KERNEL_150||, DATA, ALIGN=2

                  __device_uart_acts_0
                  |symbol_number.44|
                          DCD      __config_uart_acts_0
                          DCD      0x00000000
                          DCD      uart_acts_dev_data_0
