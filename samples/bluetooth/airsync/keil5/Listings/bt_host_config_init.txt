; generated by Component: ARM Compiler 5.06 update 5 (build 528) Tool: ArmCC [4d3621]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave --gnu -o.\objects\bt_host_config_init.o --asm_dir=.\Listings\ --list_dir=.\Listings\ --depend=.\objects\bt_host_config_init.d --cpu=Cortex-M0 --apcs=interwork --diag_suppress=9931 --preinclude=autoconf_app.h -I..\..\..\..\include -I..\..\..\..\arch -I..\..\..\..\include\arch\arm -I..\..\..\..\include\zephyr -I..\..\..\..\include\net -I..\..\..\..\include\shell -I..\..\..\..\include\drivers -I..\..\..\..\kernel\include -I..\..\..\..\arch\soc\atb110x -I..\..\..\..\include\arch\arm\cortex_m\cmsis\Include -I..\..\..\..\lib\libc\minimal\include -I..\..\..\..\include\generated -I..\..\..\..\boards -I..\src\include -I..\..\..\..\subsys\bluetooth -I..\..\..\..\subsys\bluetooth\host -I..\src\profile -I..\..\gatt -I..\..\..\..\subsys\bluetooth\common -I.\RTE\_flash -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.2.0\Device\ARM\ARMCM0\Include -IF:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=524 -DARMCM0 --omf_browse=.\objects\bt_host_config_init.crf ..\..\..\..\subsys\bluetooth\host\bt_host_config_init.c]
                          THUMB

                          AREA ||.init.once.text."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".8||, CODE, READONLY, ALIGN=2

                  bt_host_config_init PROC
;;;225    
;;;226    __init_once_text int bt_host_config_init(void)
000000  b510              PUSH     {r4,lr}
;;;227    {
;;;228    	int err;
;;;229    
;;;230    	/* config tx thread for bt host */
;;;231    	err = bt_tx_thread_init(tx_thread_stack,
000002  218b              MOVS     r1,#0x8b
000004  b088              SUB      sp,sp,#0x20           ;227
000006  2207              MOVS     r2,#7
000008  0089              LSLS     r1,r1,#2
00000a  4860              LDR      r0,|L1.396|
00000c  f7fffffe          BL       bt_tx_thread_init
;;;232    		K_THREAD_STACK_SIZEOF(tx_thread_stack), CONFIG_BT_HCI_TX_PRIO);
;;;233    	if (err) {
000010  2800              CMP      r0,#0
000012  d17c              BNE      |L1.270|
;;;234    		return err;
;;;235    	}
;;;236    
;;;237    	/* config rx thread for bt host */
;;;238    	err = bt_rx_thread_init(rx_thread_stack,
000014  2208              MOVS     r2,#8
000016  495e              LDR      r1,|L1.400|
000018  485e              LDR      r0,|L1.404|
00001a  f7fffffe          BL       bt_rx_thread_init
;;;239    		K_THREAD_STACK_SIZEOF(rx_thread_stack), CONFIG_BT_RX_PRIO);
;;;240    	if (err) {
00001e  2800              CMP      r0,#0
000020  d175              BNE      |L1.270|
;;;241    		return err;
;;;242    	}
;;;243    
;;;244    	/* config hci cmd buffer pool for bt host hci layer */
;;;245    	err = bt_hci_cmd_pool_init(&hci_cmd_pool);
000022  485d              LDR      r0,|L1.408|
000024  f7fffffe          BL       bt_hci_cmd_pool_init
;;;246    	if (err) {
000028  2800              CMP      r0,#0
00002a  d170              BNE      |L1.270|
;;;247    		return err;
;;;248    	}
;;;249    
;;;250    	/* config hci rx buffer pool for bt host hci layer */
;;;251    	err = bt_hci_rx_pool_init(hci_rx_pool_array, ARRAY_SIZE(hci_rx_pool_array));
00002c  2103              MOVS     r1,#3
00002e  485b              LDR      r0,|L1.412|
000030  f7fffffe          BL       bt_hci_rx_pool_init
;;;252    	if (err) {
000034  2800              CMP      r0,#0
000036  d16a              BNE      |L1.270|
;;;253    		return err;
;;;254    	}
;;;255    
;;;256    	/* config acl tx buffer pool for bt host hci layer */
;;;257    	err = bt_acl_tx_pool_init(&acl_tx_pool);
000038  4859              LDR      r0,|L1.416|
00003a  f7fffffe          BL       bt_acl_tx_pool_init
;;;258    	if (err) {
00003e  2800              CMP      r0,#0
000040  d165              BNE      |L1.270|
;;;259    		return err;
;;;260    	}
;;;261    
;;;262    	/* config prepare buffer pool for bt host att layer */
;;;263    	err = bt_prep_pool_int(&prep_pool, CONFIG_BT_ATT_PREPARE_COUNT);
000042  2100              MOVS     r1,#0
000044  4857              LDR      r0,|L1.420|
000046  f7fffffe          BL       bt_prep_pool_int
;;;264    	if (err) {
00004a  2800              CMP      r0,#0
00004c  d15f              BNE      |L1.270|
;;;265    		return err;
;;;266    	}
;;;267    
;;;268    	/* config max credits paramter for bt host l2cap layer */
;;;269    	err = bt_l2cap_le_max_credits_init(L2CAP_LE_MAX_CREDITS);
00004e  2002              MOVS     r0,#2
000050  f7fffffe          BL       bt_l2cap_le_max_credits_init
;;;270    	if (err) {
000054  2800              CMP      r0,#0
000056  d15a              BNE      |L1.270|
;;;271    		return err;
;;;272    	}
;;;273    
;;;274    	/* config mtu for bt host l2cap layer */
;;;275    	err = bt_l2cap_pramter_init(L2CAP_MAX_LE_MPS, L2CAP_MAX_LE_MTU);
000058  2142              MOVS     r1,#0x42
00005a  2044              MOVS     r0,#0x44
00005c  f7fffffe          BL       bt_l2cap_pramter_init
;;;276    	if (err) {
000060  2800              CMP      r0,#0
000062  d154              BNE      |L1.270|
;;;277    		return err;
;;;278    	}
;;;279    
;;;280    	/* config max tx buffer simulately for bt host */
;;;281    	err = bt_conn_tx_init(conn_tx, CONFIG_BT_CONN_TX_MAX);
000064  2107              MOVS     r1,#7
000066  4850              LDR      r0,|L1.424|
000068  f7fffffe          BL       bt_conn_tx_init
;;;282    	if (err) {
00006c  2800              CMP      r0,#0
00006e  d14e              BNE      |L1.270|
;;;283    		return err;
;;;284    	}
;;;285    
;;;286    	/* config max supported conn for bt host */
;;;287    	err = bt_conn_struct_init(conns, CONFIG_BT_MAX_CONN);
000070  484d              LDR      r0,|L1.424|
000072  2101              MOVS     r1,#1
000074  3038              ADDS     r0,r0,#0x38
000076  f7fffffe          BL       bt_conn_struct_init
;;;288    	if (err) {
00007a  2800              CMP      r0,#0
00007c  d147              BNE      |L1.270|
;;;289    		return err;
;;;290    	}
;;;291    
;;;292    	/* config att req buffer pool for bt host att layer */
;;;293    	err = bt_req_pool_int(bt_req_pool, CONFIG_BT_MAX_CONN);
00007e  484a              LDR      r0,|L1.424|
000080  2101              MOVS     r1,#1
000082  30fc              ADDS     r0,r0,#0xfc
000084  f7fffffe          BL       bt_req_pool_int
;;;294    	if (err) {
000088  2800              CMP      r0,#0
00008a  d17d              BNE      |L1.392|
;;;295    		return err;
;;;296    	}
;;;297    
;;;298    	/* config l2cap pool for bt host l2cap layer */
;;;299    	err = bt_l2cap_pool_init(bt_l2cap_pool, CONFIG_BT_MAX_CONN);
00008c  2101              MOVS     r1,#1
00008e  4847              LDR      r0,|L1.428|
000090  f7fffffe          BL       bt_l2cap_pool_init
;;;300    	if (err) {
000094  2800              CMP      r0,#0
000096  d177              BNE      |L1.392|
;;;301    		return err;
;;;302    	}
;;;303    
;;;304    	/* config tx pool events buffer for bt host */
;;;305    	err = bt_tx_poll_event_init(events);
000098  4840              LDR      r0,|L1.412|
00009a  300c              ADDS     r0,r0,#0xc
00009c  f7fffffe          BL       bt_tx_poll_event_init
;;;306    	if (err) {
0000a0  2800              CMP      r0,#0
0000a2  d171              BNE      |L1.392|
;;;307    		return err;
;;;308    	}
;;;309    
;;;310    	/* config mtu for bt host att layer */
;;;311    	err = bt_att_paramter_init(BT_ATT_MTU, CONFIG_BT_ATT_TX_MAX);
0000a4  2102              MOVS     r1,#2
0000a6  2041              MOVS     r0,#0x41
0000a8  f7fffffe          BL       bt_att_paramter_init
;;;312    	if (err) {
0000ac  2800              CMP      r0,#0
0000ae  d16b              BNE      |L1.392|
;;;313    		return err;
;;;314    	}
;;;315    
;;;316    	/* config gap name for gap service */
;;;317    	err = bt_gap_svc_config_init(gap_name, strlen(gap_name), gap_appearance);
0000b0  4c3a              LDR      r4,|L1.412|
0000b2  3c08              SUBS     r4,r4,#8
0000b4  6860              LDR      r0,[r4,#4]  ; gap_name
0000b6  f7fffffe          BL       strlen
0000ba  b281              UXTH     r1,r0
0000bc  8822              LDRH     r2,[r4,#0]  ; gap_appearance
0000be  6860              LDR      r0,[r4,#4]  ; gap_name
0000c0  f7fffffe          BL       bt_gap_svc_config_init
;;;318    	if (err) {
0000c4  2800              CMP      r0,#0
0000c6  d15f              BNE      |L1.392|
;;;319    		return err;
;;;320    	}
;;;321    
;;;322    	/* config ccc callback for gatt service */
;;;323    	err = bt_gatt_svc_config_init(sc_ccc_cfg, BT_GATT_CCC_MAX, sc_ccc_cfg_changed);
0000c8  4837              LDR      r0,|L1.424|
0000ca  4a39              LDR      r2,|L1.432|
0000cc  2101              MOVS     r1,#1
0000ce  3810              SUBS     r0,r0,#0x10
0000d0  f7fffffe          BL       bt_gatt_svc_config_init
;;;324    	if (err) {
0000d4  2800              CMP      r0,#0
0000d6  d157              BNE      |L1.392|
;;;325    		return err;
;;;326    	}
;;;327    
;;;328    	/* enable smp feature for bt host */
;;;329    	err = bt_enable_smp(true);
0000d8  2001              MOVS     r0,#1
0000da  f7fffffe          BL       bt_enable_smp
;;;330    	if (err) {
0000de  2800              CMP      r0,#0
0000e0  d152              BNE      |L1.392|
;;;331    		return err;
;;;332    	}
;;;333    
;;;334    	/* config smp pool for bt host smp layer */
;;;335    	err = bt_smp_pool_init(bt_smp_pool, CONFIG_BT_MAX_CONN);
0000e2  4832              LDR      r0,|L1.428|
0000e4  2101              MOVS     r1,#1
0000e6  309c              ADDS     r0,r0,#0x9c
0000e8  f7fffffe          BL       bt_smp_pool_init
;;;336    	if (err) {
0000ec  2800              CMP      r0,#0
0000ee  d14b              BNE      |L1.392|
;;;337    		return err;
;;;338    	}
;;;339    
;;;340    	/* config key pool for bt host smp layer */
;;;341    	err = bt_host_keys_init(default_key_pool, CONFIG_BT_MAX_PAIRED);
0000f0  2101              MOVS     r1,#1
0000f2  4830              LDR      r0,|L1.436|
0000f4  f7fffffe          BL       bt_host_keys_init
;;;342    	if (err) {
0000f8  2800              CMP      r0,#0
0000fa  d145              BNE      |L1.392|
;;;343    		return err;
;;;344    	}
;;;345    
;;;346    #if CONFIG_BT_PRIVACY
;;;347    	/* enable private feature */
;;;348    	err = bt_enable_private(true);
;;;349    	if (err) {
;;;350    		return err;
;;;351    	}
;;;352    
;;;353    	/* config timeout period for generating rpa addr */
;;;354    	err = bt_rpa_timeout_init(RPA_TIMEOUT);
;;;355    	if (err) {
;;;356    		return err;
;;;357    	}
;;;358    #endif /* CONFIG_BT_PRIVACY */
;;;359    
;;;360    	/* config delay time: when connected, we read remote feature after delay time for compitable more mobile phone  */
;;;361    	err = bt_set_delay_time_read_remote_features(K_SECONDS(1));
0000fc  207d              MOVS     r0,#0x7d
0000fe  00c0              LSLS     r0,r0,#3
000100  f7fffffe          BL       bt_set_delay_time_read_remote_features
;;;362    	if (err) {
000104  2800              CMP      r0,#0
000106  d13f              BNE      |L1.392|
;;;363    		return err;
;;;364    	}
;;;365    
;;;366    	/* disable some ble feature for compitable more mobile phone */
;;;367    	hci_set_le_sup_feat(BT_LE_FEAT_BIT_SLAVE_FEAT_REQ, 0);
000108  2100              MOVS     r1,#0
00010a  2003              MOVS     r0,#3
00010c  e000              B        |L1.272|
                  |L1.270|
00010e  e03b              B        |L1.392|
                  |L1.272|
000110  f7fffffe          BL       hci_set_le_sup_feat
;;;368    	hci_set_le_sup_feat(BT_LE_FEAT_BIT_PHY_2M, 0);
000114  2100              MOVS     r1,#0
000116  2008              MOVS     r0,#8
000118  f7fffffe          BL       hci_set_le_sup_feat
;;;369    	hci_set_le_sup_feat(BT_LE_FEAT_BIT_DLE, 0);
00011c  2100              MOVS     r1,#0
00011e  2005              MOVS     r0,#5
000120  f7fffffe          BL       hci_set_le_sup_feat
;;;370    	hci_set_le_sup_feat(BT_LE_FEAT_BIT_PRIVACY, 0);
000124  2100              MOVS     r1,#0
000126  2006              MOVS     r0,#6
000128  f7fffffe          BL       hci_set_le_sup_feat
;;;371    
;;;372    	/* Configure ACL buffers for ctrl*/
;;;373    	hci_vs_cfg_acl_bufs(4, 4, 128);
00012c  2104              MOVS     r1,#4
00012e  2280              MOVS     r2,#0x80
000130  4608              MOV      r0,r1
000132  f7fffffe          BL       hci_vs_cfg_acl_bufs
;;;374    
;;;375    	/* Configure maximum number of connections for ctrl */
;;;376    	hci_vs_cfg_max_conn(CONFIG_BT_MAX_CONN);
000136  2001              MOVS     r0,#1
000138  f7fffffe          BL       hci_vs_cfg_max_conn
;;;377    
;;;378    	/* Configure version for ctrl */
;;;379    	hci_vs_cfg_version(COMP_ID_ACTIONS, IMPL_REV, BT_4_2);
00013c  21ff              MOVS     r1,#0xff
00013e  201f              MOVS     r0,#0x1f
000140  2208              MOVS     r2,#8
000142  3115              ADDS     r1,r1,#0x15
000144  0140              LSLS     r0,r0,#5
000146  f7fffffe          BL       hci_vs_cfg_version
;;;380    
;;;381    	/* Configure BD_ADDR for ctrl */
;;;382    #ifdef CONFIG_NVRAM_CONFIG
;;;383    	char bt_addr_str[] = "11:22:33:44:55:66";
00014a  2214              MOVS     r2,#0x14
00014c  a11a              ADR      r1,|L1.440|
00014e  4668              MOV      r0,sp
000150  f7fffffe          BL       __aeabi_memcpy4
;;;384    	bt_addr_t bt_addr;
;;;385    
;;;386    	err = nvram_config_get_factory("BT_ADDR", bt_addr_str, strlen(bt_addr_str));
000154  4668              MOV      r0,sp
000156  f7fffffe          BL       strlen
00015a  4602              MOV      r2,r0
00015c  4669              MOV      r1,sp
00015e  a01b              ADR      r0,|L1.460|
000160  f7fffffe          BL       nvram_config_get_factory
;;;387    	if (err >= 0) {
000164  2800              CMP      r0,#0
000166  db06              BLT      |L1.374|
;;;388    		str2bt_addr(bt_addr_str, &bt_addr);
000168  a905              ADD      r1,sp,#0x14
00016a  4668              MOV      r0,sp
00016c  f7fffffe          BL       str2bt_addr
;;;389    		hci_vs_cfg_bd_addr(&bt_addr);
000170  a805              ADD      r0,sp,#0x14
000172  f7fffffe          BL       hci_vs_cfg_bd_addr
                  |L1.374|
;;;390    	}
;;;391    #endif
;;;392    
;;;393    #ifdef CONFIG_BT_LLCC_SW_MODE
;;;394    	/* enable ble sw mode */
;;;395    	sys_write32(sys_read32(BLE_CTL) | (0x1<<BLE_CTL_BLE_SWV1V_REQ), BLE_CTL);
;;;396    
;;;397    	/* Configure power manage mode for ctrl */
;;;398    	hci_vs_cfg_pwr_mgmt(BLE_TEST_POWER_MGMT_DEEPSLEEP,
;;;399    		BLE_TEST_OP_FLAG_ENA_HCI_TX_ACK | BLE_TEST_OP_FLAG_DIS_32K_TICK_COMP, BLE_TEST_OP_FLAG_RX_AUTO_RESTART);
;;;400    #else
;;;401    	/* Configure power manage mode for ctrl */
;;;402    	hci_vs_cfg_pwr_mgmt(BLE_TEST_POWER_MGMT_DEEPSLEEP,
000176  2201              MOVS     r2,#1
000178  210e              MOVS     r1,#0xe
00017a  2003              MOVS     r0,#3
00017c  f7fffffe          BL       hci_vs_cfg_pwr_mgmt
;;;403    		BLE_TEST_OP_FLAG_ENA_HCI_TX_ACK | BLE_TEST_OP_FLAG_ENA_SWITCHER_IN_SLEEP |
;;;404    		BLE_TEST_OP_FLAG_DIS_32K_TICK_COMP, BLE_TEST_OP_FLAG_RX_AUTO_RESTART);
;;;405    #endif
;;;406    
;;;407    	/* config scan with identity feature for bt host */
;;;408    	enable_scan_with_identity(IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY));
000180  2000              MOVS     r0,#0
000182  f7fffffe          BL       enable_scan_with_identity
;;;409    
;;;410    	return 0;
000186  2000              MOVS     r0,#0
                  |L1.392|
;;;411    }
000188  b008              ADD      sp,sp,#0x20
00018a  bd10              POP      {r4,pc}
;;;412    
                          ENDP

                  |L1.396|
                          DCD      ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".6||
                  |L1.400|
                          DCD      0x0000052c
                  |L1.404|
                          DCD      ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".7||
                  |L1.408|
                          DCD      ||._net_buf_pool.static.hci_cmd_pool||
                  |L1.412|
                          DCD      ||.data||+0x8
                  |L1.416|
                          DCD      ||._net_buf_pool.static.acl_tx_pool||
                  |L1.420|
                          DCD      ||._net_buf_pool.static.prep_pool||
                  |L1.424|
                          DCD      ||.bss||+0x10
                  |L1.428|
                          DCD      ||.bss||+0x208
                  |L1.432|
                          DCD      sc_ccc_cfg_changed
                  |L1.436|
                          DCD      ||.bss||+0x448
                  |L1.440|
0001b8  31313a32          DCB      "11:22:33:44:55:66",0
0001bc  323a3333
0001c0  3a34343a
0001c4  35353a36
0001c8  3600    
0001ca  00                DCB      0
0001cb  00                DCB      0
                  |L1.460|
0001cc  42545f41          DCB      "BT_ADDR",0
0001d0  44445200

                          AREA ||.init.once.text."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".9||, CODE, READONLY, ALIGN=2

                  _bt_host_config_init PROC
;;;412    
;;;413    static __init_once_text int _bt_host_config_init(struct device *unused)
000000  4903              LDR      r1,|L2.16|
;;;414    {
;;;415    	/* pbt_host_config_init will be called at bt_enable */
;;;416    	pbt_host_config_init = bt_host_config_init;
000002  4802              LDR      r0,|L2.12|
;;;417    	return 0;
000004  6008              STR      r0,[r1,#0]  ; pbt_host_config_init
000006  2000              MOVS     r0,#0
;;;418    }
000008  4770              BX       lr
;;;419    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      bt_host_config_init
                  |L2.16|
                          DCD      pbt_host_config_init

                          AREA ||i.rx_stack_analyze||, CODE, READONLY, ALIGN=2

                  rx_stack_analyze PROC
;;;168    
;;;169    void rx_stack_analyze(void)
000000  b5fe              PUSH     {r1-r7,lr}
;;;170    {
;;;171    	STACK_ANALYZE_EXT("rx stack", rx_thread_stack,
000002  4911              LDR      r1,|L3.72|
000004  4d11              LDR      r5,|L3.76|
000006  2400              MOVS     r4,#0
000008  a60c              ADR      r6,|L3.60|
00000a  4620              MOV      r0,r4
                  |L3.12|
00000c  5c0a              LDRB     r2,[r1,r0]
00000e  2aaa              CMP      r2,#0xaa
000010  d103              BNE      |L3.26|
000012  1c40              ADDS     r0,r0,#1
000014  1c64              ADDS     r4,r4,#1
000016  42a8              CMP      r0,r5
000018  d3f8              BCC      |L3.12|
                  |L3.26|
00001a  1b2f              SUBS     r7,r5,r4
00001c  2064              MOVS     r0,#0x64
00001e  4378              MULS     r0,r7,r0
000020  4629              MOV      r1,r5
000022  f7fffffe          BL       __aeabi_uidivmod
000026  9002              STR      r0,[sp,#8]
000028  4623              MOV      r3,r4
00002a  462a              MOV      r2,r5
00002c  4631              MOV      r1,r6
00002e  9700              STR      r7,[sp,#0]
000030  9501              STR      r5,[sp,#4]
000032  a007              ADR      r0,|L3.80|
000034  f7fffffe          BL       printk
;;;172    		CONFIG_BT_RX_STACK_SIZE + BT_STACK_DEBUG_EXTRA);
;;;173    }
000038  bdfe              POP      {r1-r7,pc}
;;;174    
                          ENDP

00003a  0000              DCW      0x0000
                  |L3.60|
00003c  72782073          DCB      "rx stack",0
000040  7461636b
000044  00      
000045  00                DCB      0
000046  00                DCB      0
000047  00                DCB      0
                  |L3.72|
                          DCD      ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".7||
                  |L3.76|
                          DCD      0x0000052c
                  |L3.80|
000050  25732028          DCB      "%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n",0
000054  7265616c
000058  2073697a
00005c  65202575
000060  293a0975
000064  6e757365
000068  64202575
00006c  09757361
000070  67652025
000074  75202f20
000078  25752028
00007c  25752025
000080  25290a00

                          AREA ||i.sc_ccc_cfg_changed||, CODE, READONLY, ALIGN=2

                  sc_ccc_cfg_changed PROC
;;;219    
;;;220    static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
000000  b510              PUSH     {r4,lr}
;;;221    			       u16_t value)
;;;222    {
;;;223    	printk("ccc_cfg_value 0x%04x\n", value);
000002  a002              ADR      r0,|L4.12|
000004  f7fffffe          BL       printk
;;;224    }
000008  bd10              POP      {r4,pc}
;;;225    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
00000c  6363635f          DCB      "ccc_cfg_value 0x%04x\n",0
000010  6366675f
000014  76616c75
000018  65203078
00001c  25303478
000020  0a00    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.str2bt_addr||, CODE, READONLY, ALIGN=1

                  str2bt_addr PROC
;;;190    
;;;191    int str2bt_addr(const char *str, bt_addr_t *addr)
000000  b5fe              PUSH     {r1-r7,lr}
;;;192    {
000002  460d              MOV      r5,r1
000004  4606              MOV      r6,r0
;;;193    	int i, j;
;;;194    	u8_t tmp;
;;;195    
;;;196    	if (strlen(str) != 17) {
000006  f7fffffe          BL       strlen
00000a  2811              CMP      r0,#0x11
00000c  d12a              BNE      |L5.100|
;;;197    		return -EINVAL;
;;;198    	}
;;;199    
;;;200    	for (i = 5, j = 1; *str != '\0'; str++, j++) {
00000e  2405              MOVS     r4,#5
000010  2001              MOVS     r0,#1
000012  9001              STR      r0,[sp,#4]
000014  e035              B        |L5.130|
                  |L5.22|
;;;201    		if (!(j % 3) && (*str != ':')) {
000016  2103              MOVS     r1,#3
000018  f7fffffe          BL       __aeabi_idivmod
00001c  2900              CMP      r1,#0
00001e  d00c              BEQ      |L5.58|
;;;202    			return -EINVAL;
;;;203    		} else if (*str == ':') {
000020  2f3a              CMP      r7,#0x3a
000022  d00c              BEQ      |L5.62|
;;;204    			i--;
;;;205    			continue;
;;;206    		}
;;;207    
;;;208    		addr->val[i] = addr->val[i] << 4;
000024  5d28              LDRB     r0,[r5,r4]
000026  0100              LSLS     r0,r0,#4
000028  5528              STRB     r0,[r5,r4]
00002a  7830              LDRB     r0,[r6,#0]
00002c  4602              MOV      r2,r0
00002e  3830              SUBS     r0,r0,#0x30
000030  2809              CMP      r0,#9
000032  d806              BHI      |L5.66|
000034  4669              MOV      r1,sp
000036  7008              STRB     r0,[r1,#0]
000038  e011              B        |L5.94|
                  |L5.58|
00003a  2f3a              CMP      r7,#0x3a              ;201
00003c  d112              BNE      |L5.100|
                  |L5.62|
00003e  1e64              SUBS     r4,r4,#1              ;201
000040  e01b              B        |L5.122|
                  |L5.66|
000042  4610              MOV      r0,r2                 ;205
000044  3861              SUBS     r0,r0,#0x61           ;205
000046  2805              CMP      r0,#5                 ;205
000048  d802              BHI      |L5.80|
00004a  4668              MOV      r0,sp                 ;205
00004c  3a57              SUBS     r2,r2,#0x57           ;205
00004e  e005              B        |L5.92|
                  |L5.80|
000050  4610              MOV      r0,r2                 ;205
000052  3841              SUBS     r0,r0,#0x41           ;205
000054  2805              CMP      r0,#5                 ;205
000056  d808              BHI      |L5.106|
000058  4668              MOV      r0,sp                 ;205
00005a  3a37              SUBS     r2,r2,#0x37           ;205
                  |L5.92|
00005c  7002              STRB     r2,[r0,#0]            ;205
                  |L5.94|
00005e  2000              MOVS     r0,#0                 ;205
                  |L5.96|
;;;209    
;;;210    		if (char2hex(str, &tmp) < 0) {
000060  2800              CMP      r0,#0
000062  da05              BGE      |L5.112|
                  |L5.100|
;;;211    			return -EINVAL;
000064  2015              MOVS     r0,#0x15
000066  43c0              MVNS     r0,r0
;;;212    		}
;;;213    
;;;214    		addr->val[i] |= tmp;
;;;215    	}
;;;216    
;;;217    	return 0;
;;;218    }
000068  bdfe              POP      {r1-r7,pc}
                  |L5.106|
00006a  2015              MOVS     r0,#0x15
00006c  43c0              MVNS     r0,r0
00006e  e7f7              B        |L5.96|
                  |L5.112|
000070  4669              MOV      r1,sp                 ;214
000072  5d28              LDRB     r0,[r5,r4]            ;214
000074  7809              LDRB     r1,[r1,#0]            ;214
000076  4308              ORRS     r0,r0,r1              ;214
000078  5528              STRB     r0,[r5,r4]            ;214
                  |L5.122|
00007a  9801              LDR      r0,[sp,#4]            ;200
00007c  1c40              ADDS     r0,r0,#1              ;200
00007e  1c76              ADDS     r6,r6,#1              ;200
000080  9001              STR      r0,[sp,#4]            ;200
                  |L5.130|
000082  7837              LDRB     r7,[r6,#0]            ;200
000084  2f00              CMP      r7,#0                 ;200
000086  d1c6              BNE      |L5.22|
000088  2000              MOVS     r0,#0                 ;217
00008a  bdfe              POP      {r1-r7,pc}
;;;219    
                          ENDP


                          AREA ||._net_buf_pool.static.acl_tx_pool||, DATA, ALIGN=2

                  acl_tx_pool
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      acl_tx_pool+0x8
                          DCD      acl_tx_pool+0x8
000010  00040004          DCW      0x0004,0x0004
000014  00490004          DCW      0x0049,0x0004
000018  00040190          DCW      0x0004,0x0190
                          DCD      ||.conststrlit||+0x40
                          DCD      0x00000000
                          DCD      _net_buf_acl_tx_pool

                          AREA ||._net_buf_pool.static.hci_cmd_pool||, DATA, ALIGN=2

                  hci_cmd_pool
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      hci_cmd_pool+0x8
                          DCD      hci_cmd_pool+0x8
000010  00020002          DCW      0x0002,0x0002
000014  004c0008          DCW      0x004c,0x0008
000018  000200d0          DCW      0x0002,0x00d0
                          DCD      ||.conststrlit||
                          DCD      0x00000000
                          DCD      _net_buf_hci_cmd_pool

                          AREA ||._net_buf_pool.static.hci_rx_pool_0||, DATA, ALIGN=2

                  hci_rx_pool_0
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      hci_rx_pool_0+0x8
                          DCD      hci_rx_pool_0+0x8
000010  00030003          DCW      0x0003,0x0003
000014  004c0004          DCW      0x004c,0x0004
000018  0003012c          DCW      0x0003,0x012c
                          DCD      ||.conststrlit||+0x10
                          DCD      0x00000000
                          DCD      _net_buf_hci_rx_pool_0

                          AREA ||._net_buf_pool.static.hci_rx_pool_2||, DATA, ALIGN=2

                  hci_rx_pool_2
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      hci_rx_pool_2+0x8
                          DCD      hci_rx_pool_2+0x8
000010  00030003          DCW      0x0003,0x0003
000014  00400004          DCW      0x0040,0x0004
000018  00030108          DCW      0x0003,0x0108
                          DCD      ||.conststrlit||+0x20
                          DCD      0x00000000
                          DCD      _net_buf_hci_rx_pool_2

                          AREA ||._net_buf_pool.static.hci_rx_pool_3||, DATA, ALIGN=2

                  hci_rx_pool_3
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      hci_rx_pool_3+0x8
                          DCD      hci_rx_pool_3+0x8
000010  00030003          DCW      0x0003,0x0003
000014  00200004          DCW      0x0020,0x0004
000018  000300a8          DCW      0x0003,0x00a8
                          DCD      ||.conststrlit||+0x30
                          DCD      0x00000000
                          DCD      _net_buf_hci_rx_pool_3

                          AREA ||._net_buf_pool.static.prep_pool||, DATA, ALIGN=2

                  prep_pool
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      prep_pool+0x8
                          DCD      prep_pool+0x8
000010  00000000          DCW      0x0000,0x0000
000014  00410004          DCW      0x0041,0x0004
000018  00000000          DCW      0x0000,0x0000
                          DCD      ||.conststrlit||+0x4c
                          DCD      0x00000000
                          DCD      _net_buf_prep_pool

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  sc_ccc_cfg
                          %        16
                  conn_tx
                          %        56
                  conns
                          %        196
                  bt_req_pool
                          %        252
                  bt_l2cap_pool
                          %        156
                  bt_smp_pool
                          %        420
                  default_key_pool
                          %        144

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  31313058          DCB      "110X Airsync",0
000004  20416972
000008  73796e63
00000c  00      

                          AREA ||.conststrlit||, DATA, READONLY, ALIGN=2

000000  6863695f          DCB      0x68,0x63,0x69,0x5f
000004  636d645f          DCB      0x63,0x6d,0x64,0x5f
000008  706f6f6c          DCB      0x70,0x6f,0x6f,0x6c
00000c  00000000          DCB      0x00,0x00,0x00,0x00
000010  6863695f          DCB      0x68,0x63,0x69,0x5f
000014  72785f70          DCB      0x72,0x78,0x5f,0x70
000018  6f6f6c5f          DCB      0x6f,0x6f,0x6c,0x5f
00001c  30000000          DCB      0x30,0x00,0x00,0x00
000020  6863695f          DCB      0x68,0x63,0x69,0x5f
000024  72785f70          DCB      0x72,0x78,0x5f,0x70
000028  6f6f6c5f          DCB      0x6f,0x6f,0x6c,0x5f
00002c  32000000          DCB      0x32,0x00,0x00,0x00
000030  6863695f          DCB      0x68,0x63,0x69,0x5f
000034  72785f70          DCB      0x72,0x78,0x5f,0x70
000038  6f6f6c5f          DCB      0x6f,0x6f,0x6c,0x5f
00003c  33000000          DCB      0x33,0x00,0x00,0x00
000040  61636c5f          DCB      0x61,0x63,0x6c,0x5f
000044  74785f70          DCB      0x74,0x78,0x5f,0x70
000048  6f6f6c00          DCB      0x6f,0x6f,0x6c,0x00
00004c  70726570          DCB      0x70,0x72,0x65,0x70
000050  5f706f6f          DCB      0x5f,0x70,0x6f,0x6f
000054  6c000000          DCB      0x6c,0x00,0x00,0x00
000058  00                DCB      0x00

                          AREA ||.data||, DATA, ALIGN=2

                  gap_appearance
000000  0000              DCW      0x0000
000002  0000              DCB      0x00,0x00
                  gap_name
                          DCD      ||.conststring||
                  hci_rx_pool_array
                          DCD      hci_rx_pool_3
                          DCD      hci_rx_pool_2
                          DCD      hci_rx_pool_0
                  events
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
000020  00040000          DCB      0x00,0x04,0x00,0x00
                          DCD      bt_dev+0xcc
                          %        60

                          AREA ||.devconfig.init||, DATA, ALIGN=2

                  __config_sys_init__bt_host_config_init10
                  ||__tagsym$$used||
                          DCD      ||.conststrlit||+0x58
                          DCD      _bt_host_config_init
                          DCD      device_pm_control_nop
                          DCD      0x00000000

                          AREA ||.init_POST_KERNEL50||, DATA, ALIGN=2

                  __device_sys_init__bt_host_config_init10
                  |symbol_number.80|
                          DCD      __config_sys_init__bt_host_config_init10
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".0||, DATA, ALIGN=2

                  _net_buf_hci_cmd_pool
                          %        208

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".1||, DATA, ALIGN=2

                  _net_buf_hci_rx_pool_0
                          %        300

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".2||, DATA, ALIGN=2

                  _net_buf_hci_rx_pool_2
                          %        264

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".3||, DATA, ALIGN=2

                  _net_buf_hci_rx_pool_3
                          %        168

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".4||, DATA, ALIGN=2

                  _net_buf_acl_tx_pool
                          %        400

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".5||, DATA, ALIGN=2

                  _net_buf_prep_pool
000000  00                DCB      0x00

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".6||, DATA, ALIGN=3

                  tx_thread_stack
                          %        556

                          AREA ||.noinit."..\\..\\..\\..\\subsys\\bluetooth\\host\\bt_host_config_init.c".7||, DATA, ALIGN=3

                  rx_thread_stack
                          %        1324
